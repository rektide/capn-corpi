// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test-import.capnp

#ifndef CAPNP_INCLUDED_f36d7b330303c66e_
#define CAPNP_INCLUDED_f36d7b330303c66e_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "test.capnp.h"


struct TestImport {
  TestImport() = delete;

  class Reader;
  class Builder;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_bc55b08b672b5d97;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::TestImport, bc55b08b672b5d97,
    0, 1, POINTER);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class TestImport::Reader {
public:
  typedef TestImport Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasField() const;
  inline  ::capnproto_test::capnp::test::TestAllTypes::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestImport::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestImport::Reader reader) {
  return ::capnp::_::structString<TestImport>(reader._reader);
}

class TestImport::Builder {
public:
  typedef TestImport Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasField();
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder getField();
  inline void setField( ::capnproto_test::capnp::test::TestAllTypes::Reader value);
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder initField();
  inline void adoptField(::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestImport::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestImport::Builder builder) {
  return ::capnp::_::structString<TestImport>(builder._builder.asReader());
}

// =======================================================================================

inline bool TestImport::Reader::hasField() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestImport::Builder::hasField() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Reader TestImport::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestImport::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestImport::Builder::setField( ::capnproto_test::capnp::test::TestAllTypes::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestImport::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestImport::Builder::adoptField(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> TestImport::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::disown(
      _builder, 0 * ::capnp::POINTERS);
}


#endif  // CAPNP_INCLUDED_f36d7b330303c66e_
