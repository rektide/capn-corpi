// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#ifndef CAPNP_INCLUDED_d508eebdc2dc42b8_
#define CAPNP_INCLUDED_d508eebdc2dc42b8_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnproto_test {
namespace capnp {
namespace test {

enum class TestEnum: uint16_t {
  FOO,
  BAR,
  BAZ,
  QUX,
  QUUX,
  CORGE,
  GRAULT,
  GARPLY,
};

struct TestAllTypes {
  TestAllTypes() = delete;

  class Reader;
  class Builder;
};

struct TestDefaults {
  TestDefaults() = delete;

  class Reader;
  class Builder;
};

struct TestObject {
  TestObject() = delete;

  class Reader;
  class Builder;
};

struct TestOutOfOrder {
  TestOutOfOrder() = delete;

  class Reader;
  class Builder;
};

struct TestUnion {
  TestUnion() = delete;

  class Reader;
  class Builder;
  struct Union0;
  struct Union1;
  struct Union2;
  struct Union3;
};

struct TestUnion::Union0 {
  Union0() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    U0F0S0,
    U0F0S1,
    U0F0S8,
    U0F0S16,
    U0F0S32,
    U0F0S64,
    U0F0SP,
    U0F1S0,
    U0F1S1,
    U0F1S8,
    U0F1S16,
    U0F1S32,
    U0F1S64,
    U0F1SP,
  };
};

struct TestUnion::Union1 {
  Union1() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    U1F0S0,
    U1F0S1,
    U1F1S1,
    U1F0S8,
    U1F1S8,
    U1F0S16,
    U1F1S16,
    U1F0S32,
    U1F1S32,
    U1F0S64,
    U1F1S64,
    U1F0SP,
    U1F1SP,
    U1F2S0,
    U1F2S1,
    U1F2S8,
    U1F2S16,
    U1F2S32,
    U1F2S64,
    U1F2SP,
  };
};

struct TestUnion::Union2 {
  Union2() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    U2F0S1,
    U2F0S8,
    U2F0S16,
    U2F0S32,
    U2F0S64,
  };
};

struct TestUnion::Union3 {
  Union3() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    U3F0S1,
    U3F0S8,
    U3F0S16,
    U3F0S32,
    U3F0S64,
  };
};

struct TestUnnamedUnion {
  TestUnnamedUnion() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    FOO,
    BAR,
  };
};

struct TestUnionInUnion {
  TestUnionInUnion() = delete;

  class Reader;
  class Builder;
  struct Outer;
};

struct TestUnionInUnion::Outer {
  Outer() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    INNER,
    BAZ,
  };
  struct Inner;
};

struct TestUnionInUnion::Outer::Inner {
  Inner() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    FOO,
    BAR,
  };
};

struct TestGroups {
  TestGroups() = delete;

  class Reader;
  class Builder;
  struct Groups;
};

struct TestGroups::Groups {
  Groups() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    FOO,
    BAZ,
    BAR,
  };
  struct Foo;
  struct Baz;
  struct Bar;
};

struct TestGroups::Groups::Foo {
  Foo() = delete;

  class Reader;
  class Builder;
};

struct TestGroups::Groups::Baz {
  Baz() = delete;

  class Reader;
  class Builder;
};

struct TestGroups::Groups::Bar {
  Bar() = delete;

  class Reader;
  class Builder;
};

struct TestInterleavedGroups {
  TestInterleavedGroups() = delete;

  class Reader;
  class Builder;
  struct Group1;
  struct Group2;
};

struct TestInterleavedGroups::Group1 {
  Group1() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    QUX,
    CORGE,
    FRED,
  };
  struct Corge;
};

struct TestInterleavedGroups::Group1::Corge {
  Corge() = delete;

  class Reader;
  class Builder;
};

struct TestInterleavedGroups::Group2 {
  Group2() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    QUX,
    CORGE,
    FRED,
  };
  struct Corge;
};

struct TestInterleavedGroups::Group2::Corge {
  Corge() = delete;

  class Reader;
  class Builder;
};

struct TestUnionDefaults {
  TestUnionDefaults() = delete;

  class Reader;
  class Builder;
};

struct TestNestedTypes {
  TestNestedTypes() = delete;

  class Reader;
  class Builder;
  enum class NestedEnum: uint16_t {
    FOO,
    BAR,
  };

  struct NestedStruct;
};

struct TestNestedTypes::NestedStruct {
  NestedStruct() = delete;

  class Reader;
  class Builder;
  enum class NestedEnum: uint16_t {
    BAZ,
    QUX,
    QUUX,
  };

};

struct TestUsing {
  TestUsing() = delete;

  class Reader;
  class Builder;
};

struct TestLists {
  TestLists() = delete;

  class Reader;
  class Builder;
  struct Struct0;
  struct Struct1;
  struct Struct8;
  struct Struct16;
  struct Struct32;
  struct Struct64;
  struct StructP;
  struct Struct0c;
  struct Struct1c;
  struct Struct8c;
  struct Struct16c;
  struct Struct32c;
  struct Struct64c;
  struct StructPc;
};

struct TestLists::Struct0 {
  Struct0() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct1 {
  Struct1() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct8 {
  Struct8() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct16 {
  Struct16() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct32 {
  Struct32() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct64 {
  Struct64() = delete;

  class Reader;
  class Builder;
};

struct TestLists::StructP {
  StructP() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct0c {
  Struct0c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct1c {
  Struct1c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct8c {
  Struct8c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct16c {
  Struct16c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct32c {
  Struct32c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::Struct64c {
  Struct64c() = delete;

  class Reader;
  class Builder;
};

struct TestLists::StructPc {
  StructPc() = delete;

  class Reader;
  class Builder;
};

struct TestFieldZeroIsBit {
  TestFieldZeroIsBit() = delete;

  class Reader;
  class Builder;
};

struct TestListDefaults {
  TestListDefaults() = delete;

  class Reader;
  class Builder;
};

struct TestLateUnion {
  TestLateUnion() = delete;

  class Reader;
  class Builder;
  struct TheUnion;
  struct AnotherUnion;
};

struct TestLateUnion::TheUnion {
  TheUnion() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    QUX,
    CORGE,
    GRAULT,
  };
};

struct TestLateUnion::AnotherUnion {
  AnotherUnion() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    QUX,
    CORGE,
    GRAULT,
  };
};

struct TestOldVersion {
  TestOldVersion() = delete;

  class Reader;
  class Builder;
};

struct TestNewVersion {
  TestNewVersion() = delete;

  class Reader;
  class Builder;
};

struct TestStructUnion {
  TestStructUnion() = delete;

  class Reader;
  class Builder;
  struct Un;
};

struct TestStructUnion::Un {
  Un() = delete;

  class Reader;
  class Builder;
  enum Which: uint16_t {
    ALL_TYPES,
    OBJECT,
  };
};

struct TestEmptyStruct {
  TestEmptyStruct() = delete;

  class Reader;
  class Builder;
};

struct TestConstants {
  TestConstants() = delete;

  class Reader;
  class Builder;
  static constexpr  ::capnp::Void VOID_CONST =  ::capnp::VOID;
  static constexpr bool BOOL_CONST = true;
  static constexpr  ::int8_t INT8_CONST = -123;
  static constexpr  ::int16_t INT16_CONST = -12345;
  static constexpr  ::int32_t INT32_CONST = -12345678;
  static constexpr  ::int64_t INT64_CONST = -123456789012345ll;
  static constexpr  ::uint8_t UINT8_CONST = 234u;
  static constexpr  ::uint16_t UINT16_CONST = 45678u;
  static constexpr  ::uint32_t UINT32_CONST = 3456789012u;
  static constexpr  ::uint64_t UINT64_CONST = 12345678901234567890llu;
  static constexpr float FLOAT32_CONST = 1234.5f;
  static constexpr double FLOAT64_CONST = -1.23e47;
  static const ::capnp::_::ConstText<3> TEXT_CONST;
  static const ::capnp::_::ConstData<3> DATA_CONST;
  static const ::capnp::_::ConstStruct< ::capnproto_test::capnp::test::TestAllTypes> STRUCT_CONST;
  static constexpr  ::capnproto_test::capnp::test::TestEnum ENUM_CONST =  ::capnproto_test::capnp::test::TestEnum::CORGE;
  static const ::capnp::_::ConstList< ::capnp::Void> VOID_LIST_CONST;
  static const ::capnp::_::ConstList<bool> BOOL_LIST_CONST;
  static const ::capnp::_::ConstList< ::int8_t> INT8_LIST_CONST;
  static const ::capnp::_::ConstList< ::int16_t> INT16_LIST_CONST;
  static const ::capnp::_::ConstList< ::int32_t> INT32_LIST_CONST;
  static const ::capnp::_::ConstList< ::int64_t> INT64_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint8_t> UINT8_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint16_t> UINT16_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint32_t> UINT32_LIST_CONST;
  static const ::capnp::_::ConstList< ::uint64_t> UINT64_LIST_CONST;
  static const ::capnp::_::ConstList<float> FLOAT32_LIST_CONST;
  static const ::capnp::_::ConstList<double> FLOAT64_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnp::Text> TEXT_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnp::Data> DATA_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnproto_test::capnp::test::TestAllTypes> STRUCT_LIST_CONST;
  static const ::capnp::_::ConstList< ::capnproto_test::capnp::test::TestEnum> ENUM_LIST_CONST;
};

static constexpr  ::uint32_t GLOBAL_INT = 12345u;
extern const ::capnp::_::ConstText<6> GLOBAL_TEXT;
extern const ::capnp::_::ConstStruct< ::capnproto_test::capnp::test::TestAllTypes> GLOBAL_STRUCT;
extern const ::capnp::_::ConstStruct< ::capnproto_test::capnp::test::TestAllTypes> DERIVED_CONSTANT;
}  // namespace
}  // namespace
}  // namespace

// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_9c8e9318b29d9cd3;
extern const ::capnp::_::RawSchema s_a0a8f314b80b63fd;
extern const ::capnp::_::RawSchema s_eb3f9ebe98c73cb6;
extern const ::capnp::_::RawSchema s_d1f4434616a112ca;
extern const ::capnp::_::RawSchema s_a9d5f8efe770022b;
extern const ::capnp::_::RawSchema s_f47697362233ce52;
extern const ::capnp::_::RawSchema s_fc76a82eecb7a718;
extern const ::capnp::_::RawSchema s_ee0a6b99b7dc7ab2;
extern const ::capnp::_::RawSchema s_afc5fd419f0d66d4;
extern const ::capnp::_::RawSchema s_a2fb022ec7f30053;
extern const ::capnp::_::RawSchema s_9e2e784c915329b6;
extern const ::capnp::_::RawSchema s_89a9494f1b900f22;
extern const ::capnp::_::RawSchema s_d005f6c63707670c;
extern const ::capnp::_::RawSchema s_ff9ce111c6f8e5db;
extern const ::capnp::_::RawSchema s_dc841556134c3103;
extern const ::capnp::_::RawSchema s_e22ae74ff9113268;
extern const ::capnp::_::RawSchema s_f5fcba89c0c1196f;
extern const ::capnp::_::RawSchema s_f0fa30304066a4b3;
extern const ::capnp::_::RawSchema s_b727c0d0091a001d;
extern const ::capnp::_::RawSchema s_f77ed6f7454eec40;
extern const ::capnp::_::RawSchema s_c7485a3516c7d3c8;
extern const ::capnp::_::RawSchema s_db0afd413f4a313a;
extern const ::capnp::_::RawSchema s_cc85a335569990e9;
extern const ::capnp::_::RawSchema s_a017f0366827ee37;
extern const ::capnp::_::RawSchema s_94f7e0b103b4b718;
extern const ::capnp::_::RawSchema s_d9f2b5941a343bcd;
extern const ::capnp::_::RawSchema s_b651d2fba42056d4;
extern const ::capnp::_::RawSchema s_82cd03a53b29d76b;
extern const ::capnp::_::RawSchema s_cfa0d546993a3df3;
extern const ::capnp::_::RawSchema s_e78aac389e77b065;
extern const ::capnp::_::RawSchema s_e41885c94393277e;
extern const ::capnp::_::RawSchema s_8412c03b75b2cfee;
extern const ::capnp::_::RawSchema s_e0fe5870b141ad69;
extern const ::capnp::_::RawSchema s_a6411a353090145b;
extern const ::capnp::_::RawSchema s_a8abf7a82928986c;
extern const ::capnp::_::RawSchema s_ad7beedc4ed30742;
extern const ::capnp::_::RawSchema s_ef9a34f2ff7cc646;
extern const ::capnp::_::RawSchema s_c6abf1b0329e6227;
extern const ::capnp::_::RawSchema s_943a234ca336b16a;
extern const ::capnp::_::RawSchema s_8991bc0e74a594cd;
extern const ::capnp::_::RawSchema s_ed267416528c7a24;
extern const ::capnp::_::RawSchema s_9978837b037d58e6;
extern const ::capnp::_::RawSchema s_ed5fa940f54a7904;
extern const ::capnp::_::RawSchema s_bc743778f2597c7d;
extern const ::capnp::_::RawSchema s_c2e364a40182013d;
extern const ::capnp::_::RawSchema s_92fc29a80f3ddd5c;
extern const ::capnp::_::RawSchema s_a851ad32cbc2ffea;
extern const ::capnp::_::RawSchema s_a76e3c9bb7fd56d3;
extern const ::capnp::_::RawSchema s_807280a2901aa079;
extern const ::capnp::_::RawSchema s_c1973984dee98e3a;
extern const ::capnp::_::RawSchema s_95b30dd14e01dda8;
extern const ::capnp::_::RawSchema s_8ed75a7469f04ce3;
extern const ::capnp::_::RawSchema s_faf781ef89a00e39;
extern const ::capnp::_::RawSchema s_992edc677bef5a3c;
extern const ::capnp::_::RawSchema s_c5598844441096dc;
extern const ::capnp::_::RawSchema s_abed745cd8c92095;
extern const ::capnp::_::RawSchema s_f346e8becc34c826;
extern const ::capnp::_::RawSchema s_aaa4fc67c55b78fd;
extern const ::capnp::_::RawSchema s_ed37d4414bf1157a;
extern const ::capnp::_::RawSchema s_e3201c2e657cf0fc;
extern const ::capnp::_::RawSchema s_ce1810c84e108cdc;
extern const ::capnp::_::RawSchema s_ff58bf5895b73ee2;
extern const ::capnp::_::RawSchema s_a145449a15848a09;
extern const ::capnp::_::RawSchema s_a567a743b6b4bf0d;
extern const ::capnp::_::RawSchema s_d987eb8af5945021;
extern const ::capnp::_::RawSchema s_9e55f87eb2ffa805;
extern const ::capnp::_::RawSchema s_fe4d1147d7537f4c;
extern const ::capnp::_::RawSchema s_900218d4541375d3;
extern const ::capnp::_::RawSchema s_d26dd7a486f26cd7;
extern const ::capnp::_::RawSchema s_feb875138580a065;
extern const ::capnp::_::RawSchema s_a815a514acbab212;
extern const ::capnp::_::RawSchema s_ec56db537c838603;
extern const ::capnp::_::RawSchema s_c468785db6321458;
extern const ::capnp::_::RawSchema s_d1f994d3d4fbbaed;
extern const ::capnp::_::RawSchema s_c30860d747fd5019;
extern const ::capnp::_::RawSchema s_d81b65e268fb3f34;
extern const ::capnp::_::RawSchema s_bd579b448bfbcc7b;
extern const ::capnp::_::RawSchema s_a4764c3483341eeb;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_ENUM(
    ::capnproto_test::capnp::test::TestEnum, 9c8e9318b29d9cd3);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestAllTypes, a0a8f314b80b63fd,
    6, 20, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestDefaults, eb3f9ebe98c73cb6,
    6, 20, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestObject, d1f4434616a112ca,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestOutOfOrder, a9d5f8efe770022b,
    0, 9, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnion, f47697362233ce52,
    8, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnion::Union0, fc76a82eecb7a718,
    8, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnion::Union1, ee0a6b99b7dc7ab2,
    8, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnion::Union2, afc5fd419f0d66d4,
    8, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnion::Union3, a2fb022ec7f30053,
    8, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnnamedUnion, 9e2e784c915329b6,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnionInUnion, 89a9494f1b900f22,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnionInUnion::Outer, d005f6c63707670c,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnionInUnion::Outer::Inner, ff9ce111c6f8e5db,
    2, 0, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestGroups, dc841556134c3103,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestGroups::Groups, e22ae74ff9113268,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestGroups::Groups::Foo, f5fcba89c0c1196f,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestGroups::Groups::Baz, f0fa30304066a4b3,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestGroups::Groups::Bar, b727c0d0091a001d,
    2, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestInterleavedGroups, f77ed6f7454eec40,
    6, 6, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestInterleavedGroups::Group1, c7485a3516c7d3c8,
    6, 6, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestInterleavedGroups::Group1::Corge, db0afd413f4a313a,
    6, 6, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestInterleavedGroups::Group2, cc85a335569990e9,
    6, 6, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestInterleavedGroups::Group2::Corge, a017f0366827ee37,
    6, 6, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUnionDefaults, 94f7e0b103b4b718,
    0, 4, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestNestedTypes, d9f2b5941a343bcd,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum, b651d2fba42056d4);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct, 82cd03a53b29d76b,
    1, 0, FOUR_BYTES);
CAPNP_DECLARE_ENUM(
    ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum, cfa0d546993a3df3);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestUsing, e78aac389e77b065,
    1, 0, FOUR_BYTES);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists, e41885c94393277e,
    0, 10, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct0, 8412c03b75b2cfee,
    0, 0, VOID);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct1, e0fe5870b141ad69,
    1, 0, BIT);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct8, a6411a353090145b,
    1, 0, BYTE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct16, a8abf7a82928986c,
    1, 0, TWO_BYTES);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct32, ad7beedc4ed30742,
    1, 0, FOUR_BYTES);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct64, ef9a34f2ff7cc646,
    1, 0, EIGHT_BYTES);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::StructP, c6abf1b0329e6227,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct0c, 943a234ca336b16a,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct1c, 8991bc0e74a594cd,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct8c, ed267416528c7a24,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct16c, 9978837b037d58e6,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct32c, ed5fa940f54a7904,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::Struct64c, bc743778f2597c7d,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLists::StructPc, c2e364a40182013d,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestFieldZeroIsBit, 92fc29a80f3ddd5c,
    1, 0, TWO_BYTES);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestListDefaults, a851ad32cbc2ffea,
    0, 1, POINTER);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLateUnion, a76e3c9bb7fd56d3,
    3, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLateUnion::TheUnion, 807280a2901aa079,
    3, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestLateUnion::AnotherUnion, c1973984dee98e3a,
    3, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestOldVersion, 95b30dd14e01dda8,
    1, 2, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestNewVersion, 8ed75a7469f04ce3,
    2, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestStructUnion, faf781ef89a00e39,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestStructUnion::Un, 992edc677bef5a3c,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestEmptyStruct, c5598844441096dc,
    0, 0, VOID);
CAPNP_DECLARE_STRUCT(
    ::capnproto_test::capnp::test::TestConstants, abed745cd8c92095,
    0, 0, VOID);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================

namespace capnproto_test {
namespace capnp {
namespace test {

class TestAllTypes::Reader {
public:
  typedef TestAllTypes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasVoidField() const;
  inline  ::capnp::Void getVoidField() const;

  inline bool hasBoolField() const;
  inline bool getBoolField() const;

  inline bool hasInt8Field() const;
  inline  ::int8_t getInt8Field() const;

  inline bool hasInt16Field() const;
  inline  ::int16_t getInt16Field() const;

  inline bool hasInt32Field() const;
  inline  ::int32_t getInt32Field() const;

  inline bool hasInt64Field() const;
  inline  ::int64_t getInt64Field() const;

  inline bool hasUInt8Field() const;
  inline  ::uint8_t getUInt8Field() const;

  inline bool hasUInt16Field() const;
  inline  ::uint16_t getUInt16Field() const;

  inline bool hasUInt32Field() const;
  inline  ::uint32_t getUInt32Field() const;

  inline bool hasUInt64Field() const;
  inline  ::uint64_t getUInt64Field() const;

  inline bool hasFloat32Field() const;
  inline float getFloat32Field() const;

  inline bool hasFloat64Field() const;
  inline double getFloat64Field() const;

  inline bool hasTextField() const;
  inline  ::capnp::Text::Reader getTextField() const;

  inline bool hasDataField() const;
  inline  ::capnp::Data::Reader getDataField() const;

  inline bool hasStructField() const;
  inline  ::capnproto_test::capnp::test::TestAllTypes::Reader getStructField() const;

  inline bool hasEnumField() const;
  inline  ::capnproto_test::capnp::test::TestEnum getEnumField() const;

  inline bool hasInterfaceField() const;
  inline  ::capnp::Void getInterfaceField() const;

  inline bool hasVoidList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getVoidList() const;

  inline bool hasBoolList() const;
  inline  ::capnp::List<bool>::Reader getBoolList() const;

  inline bool hasInt8List() const;
  inline  ::capnp::List< ::int8_t>::Reader getInt8List() const;

  inline bool hasInt16List() const;
  inline  ::capnp::List< ::int16_t>::Reader getInt16List() const;

  inline bool hasInt32List() const;
  inline  ::capnp::List< ::int32_t>::Reader getInt32List() const;

  inline bool hasInt64List() const;
  inline  ::capnp::List< ::int64_t>::Reader getInt64List() const;

  inline bool hasUInt8List() const;
  inline  ::capnp::List< ::uint8_t>::Reader getUInt8List() const;

  inline bool hasUInt16List() const;
  inline  ::capnp::List< ::uint16_t>::Reader getUInt16List() const;

  inline bool hasUInt32List() const;
  inline  ::capnp::List< ::uint32_t>::Reader getUInt32List() const;

  inline bool hasUInt64List() const;
  inline  ::capnp::List< ::uint64_t>::Reader getUInt64List() const;

  inline bool hasFloat32List() const;
  inline  ::capnp::List<float>::Reader getFloat32List() const;

  inline bool hasFloat64List() const;
  inline  ::capnp::List<double>::Reader getFloat64List() const;

  inline bool hasTextList() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getTextList() const;

  inline bool hasDataList() const;
  inline  ::capnp::List< ::capnp::Data>::Reader getDataList() const;

  inline bool hasStructList() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader getStructList() const;

  inline bool hasEnumList() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader getEnumList() const;

  inline bool hasInterfaceList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getInterfaceList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestAllTypes::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestAllTypes::Reader reader) {
  return ::capnp::_::structString<TestAllTypes>(reader._reader);
}

class TestAllTypes::Builder {
public:
  typedef TestAllTypes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasVoidField();
  inline  ::capnp::Void getVoidField();
  inline void setVoidField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasBoolField();
  inline bool getBoolField();
  inline void setBoolField(bool value);

  inline bool hasInt8Field();
  inline  ::int8_t getInt8Field();
  inline void setInt8Field( ::int8_t value);

  inline bool hasInt16Field();
  inline  ::int16_t getInt16Field();
  inline void setInt16Field( ::int16_t value);

  inline bool hasInt32Field();
  inline  ::int32_t getInt32Field();
  inline void setInt32Field( ::int32_t value);

  inline bool hasInt64Field();
  inline  ::int64_t getInt64Field();
  inline void setInt64Field( ::int64_t value);

  inline bool hasUInt8Field();
  inline  ::uint8_t getUInt8Field();
  inline void setUInt8Field( ::uint8_t value);

  inline bool hasUInt16Field();
  inline  ::uint16_t getUInt16Field();
  inline void setUInt16Field( ::uint16_t value);

  inline bool hasUInt32Field();
  inline  ::uint32_t getUInt32Field();
  inline void setUInt32Field( ::uint32_t value);

  inline bool hasUInt64Field();
  inline  ::uint64_t getUInt64Field();
  inline void setUInt64Field( ::uint64_t value);

  inline bool hasFloat32Field();
  inline float getFloat32Field();
  inline void setFloat32Field(float value);

  inline bool hasFloat64Field();
  inline double getFloat64Field();
  inline void setFloat64Field(double value);

  inline bool hasTextField();
  inline  ::capnp::Text::Builder getTextField();
  inline void setTextField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextField(unsigned int size);
  inline void adoptTextField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextField();

  inline bool hasDataField();
  inline  ::capnp::Data::Builder getDataField();
  inline void setDataField( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDataField(unsigned int size);
  inline void adoptDataField(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDataField();

  inline bool hasStructField();
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder getStructField();
  inline void setStructField( ::capnproto_test::capnp::test::TestAllTypes::Reader value);
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder initStructField();
  inline void adoptStructField(::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> disownStructField();

  inline bool hasEnumField();
  inline  ::capnproto_test::capnp::test::TestEnum getEnumField();
  inline void setEnumField( ::capnproto_test::capnp::test::TestEnum value);

  inline bool hasInterfaceField();
  inline  ::capnp::Void getInterfaceField();
  inline void setInterfaceField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasVoidList();
  inline  ::capnp::List< ::capnp::Void>::Builder getVoidList();
  inline void setVoidList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setVoidList(std::initializer_list< ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initVoidList(unsigned int size);
  inline void adoptVoidList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownVoidList();

  inline bool hasBoolList();
  inline  ::capnp::List<bool>::Builder getBoolList();
  inline void setBoolList( ::capnp::List<bool>::Reader value);
  inline void setBoolList(std::initializer_list<bool> value);
  inline  ::capnp::List<bool>::Builder initBoolList(unsigned int size);
  inline void adoptBoolList(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownBoolList();

  inline bool hasInt8List();
  inline  ::capnp::List< ::int8_t>::Builder getInt8List();
  inline void setInt8List( ::capnp::List< ::int8_t>::Reader value);
  inline void setInt8List(std::initializer_list< ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initInt8List(unsigned int size);
  inline void adoptInt8List(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownInt8List();

  inline bool hasInt16List();
  inline  ::capnp::List< ::int16_t>::Builder getInt16List();
  inline void setInt16List( ::capnp::List< ::int16_t>::Reader value);
  inline void setInt16List(std::initializer_list< ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initInt16List(unsigned int size);
  inline void adoptInt16List(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownInt16List();

  inline bool hasInt32List();
  inline  ::capnp::List< ::int32_t>::Builder getInt32List();
  inline void setInt32List( ::capnp::List< ::int32_t>::Reader value);
  inline void setInt32List(std::initializer_list< ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initInt32List(unsigned int size);
  inline void adoptInt32List(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownInt32List();

  inline bool hasInt64List();
  inline  ::capnp::List< ::int64_t>::Builder getInt64List();
  inline void setInt64List( ::capnp::List< ::int64_t>::Reader value);
  inline void setInt64List(std::initializer_list< ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initInt64List(unsigned int size);
  inline void adoptInt64List(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownInt64List();

  inline bool hasUInt8List();
  inline  ::capnp::List< ::uint8_t>::Builder getUInt8List();
  inline void setUInt8List( ::capnp::List< ::uint8_t>::Reader value);
  inline void setUInt8List(std::initializer_list< ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initUInt8List(unsigned int size);
  inline void adoptUInt8List(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownUInt8List();

  inline bool hasUInt16List();
  inline  ::capnp::List< ::uint16_t>::Builder getUInt16List();
  inline void setUInt16List( ::capnp::List< ::uint16_t>::Reader value);
  inline void setUInt16List(std::initializer_list< ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initUInt16List(unsigned int size);
  inline void adoptUInt16List(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownUInt16List();

  inline bool hasUInt32List();
  inline  ::capnp::List< ::uint32_t>::Builder getUInt32List();
  inline void setUInt32List( ::capnp::List< ::uint32_t>::Reader value);
  inline void setUInt32List(std::initializer_list< ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initUInt32List(unsigned int size);
  inline void adoptUInt32List(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownUInt32List();

  inline bool hasUInt64List();
  inline  ::capnp::List< ::uint64_t>::Builder getUInt64List();
  inline void setUInt64List( ::capnp::List< ::uint64_t>::Reader value);
  inline void setUInt64List(std::initializer_list< ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initUInt64List(unsigned int size);
  inline void adoptUInt64List(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownUInt64List();

  inline bool hasFloat32List();
  inline  ::capnp::List<float>::Builder getFloat32List();
  inline void setFloat32List( ::capnp::List<float>::Reader value);
  inline void setFloat32List(std::initializer_list<float> value);
  inline  ::capnp::List<float>::Builder initFloat32List(unsigned int size);
  inline void adoptFloat32List(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFloat32List();

  inline bool hasFloat64List();
  inline  ::capnp::List<double>::Builder getFloat64List();
  inline void setFloat64List( ::capnp::List<double>::Reader value);
  inline void setFloat64List(std::initializer_list<double> value);
  inline  ::capnp::List<double>::Builder initFloat64List(unsigned int size);
  inline void adoptFloat64List(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFloat64List();

  inline bool hasTextList();
  inline  ::capnp::List< ::capnp::Text>::Builder getTextList();
  inline void setTextList( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setTextList(std::initializer_list< ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initTextList(unsigned int size);
  inline void adoptTextList(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownTextList();

  inline bool hasDataList();
  inline  ::capnp::List< ::capnp::Data>::Builder getDataList();
  inline void setDataList( ::capnp::List< ::capnp::Data>::Reader value);
  inline void setDataList(std::initializer_list< ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data>::Builder initDataList(unsigned int size);
  inline void adoptDataList(::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> disownDataList();

  inline bool hasStructList();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder getStructList();
  inline void setStructList( ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder initStructList(unsigned int size);
  inline void adoptStructList(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>> disownStructList();

  inline bool hasEnumList();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder getEnumList();
  inline void setEnumList( ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader value);
  inline void setEnumList(std::initializer_list< ::capnproto_test::capnp::test::TestEnum> value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder initEnumList(unsigned int size);
  inline void adoptEnumList(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>> disownEnumList();

  inline bool hasInterfaceList();
  inline  ::capnp::List< ::capnp::Void>::Builder getInterfaceList();
  inline void setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setInterfaceList(std::initializer_list< ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initInterfaceList(unsigned int size);
  inline void adoptInterfaceList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownInterfaceList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestAllTypes::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestAllTypes::Builder builder) {
  return ::capnp::_::structString<TestAllTypes>(builder._builder.asReader());
}

class TestDefaults::Reader {
public:
  typedef TestDefaults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasVoidField() const;
  inline  ::capnp::Void getVoidField() const;

  inline bool hasBoolField() const;
  inline bool getBoolField() const;

  inline bool hasInt8Field() const;
  inline  ::int8_t getInt8Field() const;

  inline bool hasInt16Field() const;
  inline  ::int16_t getInt16Field() const;

  inline bool hasInt32Field() const;
  inline  ::int32_t getInt32Field() const;

  inline bool hasInt64Field() const;
  inline  ::int64_t getInt64Field() const;

  inline bool hasUInt8Field() const;
  inline  ::uint8_t getUInt8Field() const;

  inline bool hasUInt16Field() const;
  inline  ::uint16_t getUInt16Field() const;

  inline bool hasUInt32Field() const;
  inline  ::uint32_t getUInt32Field() const;

  inline bool hasUInt64Field() const;
  inline  ::uint64_t getUInt64Field() const;

  inline bool hasFloat32Field() const;
  inline float getFloat32Field() const;

  inline bool hasFloat64Field() const;
  inline double getFloat64Field() const;

  inline bool hasTextField() const;
  inline  ::capnp::Text::Reader getTextField() const;

  inline bool hasDataField() const;
  inline  ::capnp::Data::Reader getDataField() const;

  inline bool hasStructField() const;
  inline  ::capnproto_test::capnp::test::TestAllTypes::Reader getStructField() const;

  inline bool hasEnumField() const;
  inline  ::capnproto_test::capnp::test::TestEnum getEnumField() const;

  inline bool hasInterfaceField() const;
  inline  ::capnp::Void getInterfaceField() const;

  inline bool hasVoidList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getVoidList() const;

  inline bool hasBoolList() const;
  inline  ::capnp::List<bool>::Reader getBoolList() const;

  inline bool hasInt8List() const;
  inline  ::capnp::List< ::int8_t>::Reader getInt8List() const;

  inline bool hasInt16List() const;
  inline  ::capnp::List< ::int16_t>::Reader getInt16List() const;

  inline bool hasInt32List() const;
  inline  ::capnp::List< ::int32_t>::Reader getInt32List() const;

  inline bool hasInt64List() const;
  inline  ::capnp::List< ::int64_t>::Reader getInt64List() const;

  inline bool hasUInt8List() const;
  inline  ::capnp::List< ::uint8_t>::Reader getUInt8List() const;

  inline bool hasUInt16List() const;
  inline  ::capnp::List< ::uint16_t>::Reader getUInt16List() const;

  inline bool hasUInt32List() const;
  inline  ::capnp::List< ::uint32_t>::Reader getUInt32List() const;

  inline bool hasUInt64List() const;
  inline  ::capnp::List< ::uint64_t>::Reader getUInt64List() const;

  inline bool hasFloat32List() const;
  inline  ::capnp::List<float>::Reader getFloat32List() const;

  inline bool hasFloat64List() const;
  inline  ::capnp::List<double>::Reader getFloat64List() const;

  inline bool hasTextList() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getTextList() const;

  inline bool hasDataList() const;
  inline  ::capnp::List< ::capnp::Data>::Reader getDataList() const;

  inline bool hasStructList() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader getStructList() const;

  inline bool hasEnumList() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader getEnumList() const;

  inline bool hasInterfaceList() const;
  inline  ::capnp::List< ::capnp::Void>::Reader getInterfaceList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestDefaults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestDefaults::Reader reader) {
  return ::capnp::_::structString<TestDefaults>(reader._reader);
}

class TestDefaults::Builder {
public:
  typedef TestDefaults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasVoidField();
  inline  ::capnp::Void getVoidField();
  inline void setVoidField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasBoolField();
  inline bool getBoolField();
  inline void setBoolField(bool value);

  inline bool hasInt8Field();
  inline  ::int8_t getInt8Field();
  inline void setInt8Field( ::int8_t value);

  inline bool hasInt16Field();
  inline  ::int16_t getInt16Field();
  inline void setInt16Field( ::int16_t value);

  inline bool hasInt32Field();
  inline  ::int32_t getInt32Field();
  inline void setInt32Field( ::int32_t value);

  inline bool hasInt64Field();
  inline  ::int64_t getInt64Field();
  inline void setInt64Field( ::int64_t value);

  inline bool hasUInt8Field();
  inline  ::uint8_t getUInt8Field();
  inline void setUInt8Field( ::uint8_t value);

  inline bool hasUInt16Field();
  inline  ::uint16_t getUInt16Field();
  inline void setUInt16Field( ::uint16_t value);

  inline bool hasUInt32Field();
  inline  ::uint32_t getUInt32Field();
  inline void setUInt32Field( ::uint32_t value);

  inline bool hasUInt64Field();
  inline  ::uint64_t getUInt64Field();
  inline void setUInt64Field( ::uint64_t value);

  inline bool hasFloat32Field();
  inline float getFloat32Field();
  inline void setFloat32Field(float value);

  inline bool hasFloat64Field();
  inline double getFloat64Field();
  inline void setFloat64Field(double value);

  inline bool hasTextField();
  inline  ::capnp::Text::Builder getTextField();
  inline void setTextField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextField(unsigned int size);
  inline void adoptTextField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextField();

  inline bool hasDataField();
  inline  ::capnp::Data::Builder getDataField();
  inline void setDataField( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDataField(unsigned int size);
  inline void adoptDataField(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDataField();

  inline bool hasStructField();
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder getStructField();
  inline void setStructField( ::capnproto_test::capnp::test::TestAllTypes::Reader value);
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder initStructField();
  inline void adoptStructField(::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> disownStructField();

  inline bool hasEnumField();
  inline  ::capnproto_test::capnp::test::TestEnum getEnumField();
  inline void setEnumField( ::capnproto_test::capnp::test::TestEnum value);

  inline bool hasInterfaceField();
  inline  ::capnp::Void getInterfaceField();
  inline void setInterfaceField( ::capnp::Void value = ::capnp::VOID);

  inline bool hasVoidList();
  inline  ::capnp::List< ::capnp::Void>::Builder getVoidList();
  inline void setVoidList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setVoidList(std::initializer_list< ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initVoidList(unsigned int size);
  inline void adoptVoidList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownVoidList();

  inline bool hasBoolList();
  inline  ::capnp::List<bool>::Builder getBoolList();
  inline void setBoolList( ::capnp::List<bool>::Reader value);
  inline void setBoolList(std::initializer_list<bool> value);
  inline  ::capnp::List<bool>::Builder initBoolList(unsigned int size);
  inline void adoptBoolList(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownBoolList();

  inline bool hasInt8List();
  inline  ::capnp::List< ::int8_t>::Builder getInt8List();
  inline void setInt8List( ::capnp::List< ::int8_t>::Reader value);
  inline void setInt8List(std::initializer_list< ::int8_t> value);
  inline  ::capnp::List< ::int8_t>::Builder initInt8List(unsigned int size);
  inline void adoptInt8List(::capnp::Orphan< ::capnp::List< ::int8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t>> disownInt8List();

  inline bool hasInt16List();
  inline  ::capnp::List< ::int16_t>::Builder getInt16List();
  inline void setInt16List( ::capnp::List< ::int16_t>::Reader value);
  inline void setInt16List(std::initializer_list< ::int16_t> value);
  inline  ::capnp::List< ::int16_t>::Builder initInt16List(unsigned int size);
  inline void adoptInt16List(::capnp::Orphan< ::capnp::List< ::int16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t>> disownInt16List();

  inline bool hasInt32List();
  inline  ::capnp::List< ::int32_t>::Builder getInt32List();
  inline void setInt32List( ::capnp::List< ::int32_t>::Reader value);
  inline void setInt32List(std::initializer_list< ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initInt32List(unsigned int size);
  inline void adoptInt32List(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownInt32List();

  inline bool hasInt64List();
  inline  ::capnp::List< ::int64_t>::Builder getInt64List();
  inline void setInt64List( ::capnp::List< ::int64_t>::Reader value);
  inline void setInt64List(std::initializer_list< ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initInt64List(unsigned int size);
  inline void adoptInt64List(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownInt64List();

  inline bool hasUInt8List();
  inline  ::capnp::List< ::uint8_t>::Builder getUInt8List();
  inline void setUInt8List( ::capnp::List< ::uint8_t>::Reader value);
  inline void setUInt8List(std::initializer_list< ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initUInt8List(unsigned int size);
  inline void adoptUInt8List(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownUInt8List();

  inline bool hasUInt16List();
  inline  ::capnp::List< ::uint16_t>::Builder getUInt16List();
  inline void setUInt16List( ::capnp::List< ::uint16_t>::Reader value);
  inline void setUInt16List(std::initializer_list< ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t>::Builder initUInt16List(unsigned int size);
  inline void adoptUInt16List(::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> disownUInt16List();

  inline bool hasUInt32List();
  inline  ::capnp::List< ::uint32_t>::Builder getUInt32List();
  inline void setUInt32List( ::capnp::List< ::uint32_t>::Reader value);
  inline void setUInt32List(std::initializer_list< ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initUInt32List(unsigned int size);
  inline void adoptUInt32List(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownUInt32List();

  inline bool hasUInt64List();
  inline  ::capnp::List< ::uint64_t>::Builder getUInt64List();
  inline void setUInt64List( ::capnp::List< ::uint64_t>::Reader value);
  inline void setUInt64List(std::initializer_list< ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initUInt64List(unsigned int size);
  inline void adoptUInt64List(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownUInt64List();

  inline bool hasFloat32List();
  inline  ::capnp::List<float>::Builder getFloat32List();
  inline void setFloat32List( ::capnp::List<float>::Reader value);
  inline void setFloat32List(std::initializer_list<float> value);
  inline  ::capnp::List<float>::Builder initFloat32List(unsigned int size);
  inline void adoptFloat32List(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownFloat32List();

  inline bool hasFloat64List();
  inline  ::capnp::List<double>::Builder getFloat64List();
  inline void setFloat64List( ::capnp::List<double>::Reader value);
  inline void setFloat64List(std::initializer_list<double> value);
  inline  ::capnp::List<double>::Builder initFloat64List(unsigned int size);
  inline void adoptFloat64List(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownFloat64List();

  inline bool hasTextList();
  inline  ::capnp::List< ::capnp::Text>::Builder getTextList();
  inline void setTextList( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setTextList(std::initializer_list< ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initTextList(unsigned int size);
  inline void adoptTextList(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownTextList();

  inline bool hasDataList();
  inline  ::capnp::List< ::capnp::Data>::Builder getDataList();
  inline void setDataList( ::capnp::List< ::capnp::Data>::Reader value);
  inline void setDataList(std::initializer_list< ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data>::Builder initDataList(unsigned int size);
  inline void adoptDataList(::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> disownDataList();

  inline bool hasStructList();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder getStructList();
  inline void setStructList( ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder initStructList(unsigned int size);
  inline void adoptStructList(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>> disownStructList();

  inline bool hasEnumList();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder getEnumList();
  inline void setEnumList( ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader value);
  inline void setEnumList(std::initializer_list< ::capnproto_test::capnp::test::TestEnum> value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder initEnumList(unsigned int size);
  inline void adoptEnumList(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>> disownEnumList();

  inline bool hasInterfaceList();
  inline  ::capnp::List< ::capnp::Void>::Builder getInterfaceList();
  inline void setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value);
  inline void setInterfaceList(std::initializer_list< ::capnp::Void> value);
  inline  ::capnp::List< ::capnp::Void>::Builder initInterfaceList(unsigned int size);
  inline void adoptInterfaceList(::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> disownInterfaceList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestDefaults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestDefaults::Builder builder) {
  return ::capnp::_::structString<TestDefaults>(builder._builder.asReader());
}

class TestObject::Reader {
public:
  typedef TestObject Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasObjectField() const;
  template <typename T>
  inline typename T::Reader getObjectField() const;
  template <typename T, typename Param>
  inline typename T::Reader getObjectField(Param&& param) const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestObject::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestObject::Reader reader) {
  return ::capnp::_::structString<TestObject>(reader._reader);
}

class TestObject::Builder {
public:
  typedef TestObject Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasObjectField();
  template <typename T>
  inline typename T::Builder getObjectField();
  template <typename T, typename Param>
  inline typename T::Builder getObjectField(Param&& param);
  template <typename T>
  inline void setObjectField(typename T::Reader value);
  template <typename T, typename U>  inline void setObjectField(std::initializer_list<U> value);
  template <typename T, typename... Params>
  inline typename T::Builder initObjectField(Params&&... params);
  template <typename T>
  inline void adoptObjectField(::capnp::Orphan<T>&& value);
  template <typename T, typename... Params>
  inline ::capnp::Orphan<T> disownObjectField(Params&&... params);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestObject::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestObject::Builder builder) {
  return ::capnp::_::structString<TestObject>(builder._builder.asReader());
}

class TestOutOfOrder::Reader {
public:
  typedef TestOutOfOrder Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasQux() const;
  inline  ::capnp::Text::Reader getQux() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline bool hasBar() const;
  inline  ::capnp::Text::Reader getBar() const;

  inline bool hasFoo() const;
  inline  ::capnp::Text::Reader getFoo() const;

  inline bool hasCorge() const;
  inline  ::capnp::Text::Reader getCorge() const;

  inline bool hasWaldo() const;
  inline  ::capnp::Text::Reader getWaldo() const;

  inline bool hasQuux() const;
  inline  ::capnp::Text::Reader getQuux() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

  inline bool hasBaz() const;
  inline  ::capnp::Text::Reader getBaz() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestOutOfOrder::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestOutOfOrder::Reader reader) {
  return ::capnp::_::structString<TestOutOfOrder>(reader._reader);
}

class TestOutOfOrder::Builder {
public:
  typedef TestOutOfOrder Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasQux();
  inline  ::capnp::Text::Builder getQux();
  inline void setQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQux();

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline bool hasBar();
  inline  ::capnp::Text::Builder getBar();
  inline void setBar( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBar();

  inline bool hasFoo();
  inline  ::capnp::Text::Builder getFoo();
  inline void setFoo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFoo();

  inline bool hasCorge();
  inline  ::capnp::Text::Builder getCorge();
  inline void setCorge( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCorge(unsigned int size);
  inline void adoptCorge(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCorge();

  inline bool hasWaldo();
  inline  ::capnp::Text::Builder getWaldo();
  inline void setWaldo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWaldo(unsigned int size);
  inline void adoptWaldo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWaldo();

  inline bool hasQuux();
  inline  ::capnp::Text::Builder getQuux();
  inline void setQuux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQuux(unsigned int size);
  inline void adoptQuux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQuux();

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

  inline bool hasBaz();
  inline  ::capnp::Text::Builder getBaz();
  inline void setBaz( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBaz(unsigned int size);
  inline void adoptBaz(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBaz();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestOutOfOrder::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestOutOfOrder::Builder builder) {
  return ::capnp::_::structString<TestOutOfOrder>(builder._builder.asReader());
}

class TestUnion::Reader {
public:
  typedef TestUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasUnion0() const;
  inline Union0::Reader getUnion0() const;

  inline bool hasUnion1() const;
  inline Union1::Reader getUnion1() const;

  inline bool hasUnion2() const;
  inline Union2::Reader getUnion2() const;

  inline bool hasUnion3() const;
  inline Union3::Reader getUnion3() const;

  inline bool hasBit0() const;
  inline bool getBit0() const;

  inline bool hasBit2() const;
  inline bool getBit2() const;

  inline bool hasBit3() const;
  inline bool getBit3() const;

  inline bool hasBit4() const;
  inline bool getBit4() const;

  inline bool hasBit5() const;
  inline bool getBit5() const;

  inline bool hasBit6() const;
  inline bool getBit6() const;

  inline bool hasBit7() const;
  inline bool getBit7() const;

  inline bool hasByte0() const;
  inline  ::uint8_t getByte0() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Reader reader) {
  return ::capnp::_::structString<TestUnion>(reader._reader);
}

class TestUnion::Builder {
public:
  typedef TestUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasUnion0();
  inline Union0::Builder getUnion0();
  inline Union0::Builder initUnion0();

  inline bool hasUnion1();
  inline Union1::Builder getUnion1();
  inline Union1::Builder initUnion1();

  inline bool hasUnion2();
  inline Union2::Builder getUnion2();
  inline Union2::Builder initUnion2();

  inline bool hasUnion3();
  inline Union3::Builder getUnion3();
  inline Union3::Builder initUnion3();

  inline bool hasBit0();
  inline bool getBit0();
  inline void setBit0(bool value);

  inline bool hasBit2();
  inline bool getBit2();
  inline void setBit2(bool value);

  inline bool hasBit3();
  inline bool getBit3();
  inline void setBit3(bool value);

  inline bool hasBit4();
  inline bool getBit4();
  inline void setBit4(bool value);

  inline bool hasBit5();
  inline bool getBit5();
  inline void setBit5(bool value);

  inline bool hasBit6();
  inline bool getBit6();
  inline void setBit6(bool value);

  inline bool hasBit7();
  inline bool getBit7();
  inline void setBit7(bool value);

  inline bool hasByte0();
  inline  ::uint8_t getByte0();
  inline void setByte0( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Builder builder) {
  return ::capnp::_::structString<TestUnion>(builder._builder.asReader());
}

class TestUnion::Union0::Reader {
public:
  typedef Union0 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isU0f0s0() const;
  inline bool hasU0f0s0() const;
  inline  ::capnp::Void getU0f0s0() const;

  inline bool isU0f0s1() const;
  inline bool hasU0f0s1() const;
  inline bool getU0f0s1() const;

  inline bool isU0f0s8() const;
  inline bool hasU0f0s8() const;
  inline  ::int8_t getU0f0s8() const;

  inline bool isU0f0s16() const;
  inline bool hasU0f0s16() const;
  inline  ::int16_t getU0f0s16() const;

  inline bool isU0f0s32() const;
  inline bool hasU0f0s32() const;
  inline  ::int32_t getU0f0s32() const;

  inline bool isU0f0s64() const;
  inline bool hasU0f0s64() const;
  inline  ::int64_t getU0f0s64() const;

  inline bool isU0f0sp() const;
  inline bool hasU0f0sp() const;
  inline  ::capnp::Text::Reader getU0f0sp() const;

  inline bool isU0f1s0() const;
  inline bool hasU0f1s0() const;
  inline  ::capnp::Void getU0f1s0() const;

  inline bool isU0f1s1() const;
  inline bool hasU0f1s1() const;
  inline bool getU0f1s1() const;

  inline bool isU0f1s8() const;
  inline bool hasU0f1s8() const;
  inline  ::int8_t getU0f1s8() const;

  inline bool isU0f1s16() const;
  inline bool hasU0f1s16() const;
  inline  ::int16_t getU0f1s16() const;

  inline bool isU0f1s32() const;
  inline bool hasU0f1s32() const;
  inline  ::int32_t getU0f1s32() const;

  inline bool isU0f1s64() const;
  inline bool hasU0f1s64() const;
  inline  ::int64_t getU0f1s64() const;

  inline bool isU0f1sp() const;
  inline bool hasU0f1sp() const;
  inline  ::capnp::Text::Reader getU0f1sp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union0::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union0::Reader reader) {
  return ::capnp::_::structString<TestUnion::Union0>(reader._reader);
}

class TestUnion::Union0::Builder {
public:
  typedef Union0 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isU0f0s0();
  inline bool hasU0f0s0();
  inline  ::capnp::Void getU0f0s0();
  inline void setU0f0s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU0f0s1();
  inline bool hasU0f0s1();
  inline bool getU0f0s1();
  inline void setU0f0s1(bool value);

  inline bool isU0f0s8();
  inline bool hasU0f0s8();
  inline  ::int8_t getU0f0s8();
  inline void setU0f0s8( ::int8_t value);

  inline bool isU0f0s16();
  inline bool hasU0f0s16();
  inline  ::int16_t getU0f0s16();
  inline void setU0f0s16( ::int16_t value);

  inline bool isU0f0s32();
  inline bool hasU0f0s32();
  inline  ::int32_t getU0f0s32();
  inline void setU0f0s32( ::int32_t value);

  inline bool isU0f0s64();
  inline bool hasU0f0s64();
  inline  ::int64_t getU0f0s64();
  inline void setU0f0s64( ::int64_t value);

  inline bool isU0f0sp();
  inline bool hasU0f0sp();
  inline  ::capnp::Text::Builder getU0f0sp();
  inline void setU0f0sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU0f0sp(unsigned int size);
  inline void adoptU0f0sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU0f0sp();

  inline bool isU0f1s0();
  inline bool hasU0f1s0();
  inline  ::capnp::Void getU0f1s0();
  inline void setU0f1s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU0f1s1();
  inline bool hasU0f1s1();
  inline bool getU0f1s1();
  inline void setU0f1s1(bool value);

  inline bool isU0f1s8();
  inline bool hasU0f1s8();
  inline  ::int8_t getU0f1s8();
  inline void setU0f1s8( ::int8_t value);

  inline bool isU0f1s16();
  inline bool hasU0f1s16();
  inline  ::int16_t getU0f1s16();
  inline void setU0f1s16( ::int16_t value);

  inline bool isU0f1s32();
  inline bool hasU0f1s32();
  inline  ::int32_t getU0f1s32();
  inline void setU0f1s32( ::int32_t value);

  inline bool isU0f1s64();
  inline bool hasU0f1s64();
  inline  ::int64_t getU0f1s64();
  inline void setU0f1s64( ::int64_t value);

  inline bool isU0f1sp();
  inline bool hasU0f1sp();
  inline  ::capnp::Text::Builder getU0f1sp();
  inline void setU0f1sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU0f1sp(unsigned int size);
  inline void adoptU0f1sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU0f1sp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union0::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union0::Builder builder) {
  return ::capnp::_::structString<TestUnion::Union0>(builder._builder.asReader());
}

class TestUnion::Union1::Reader {
public:
  typedef Union1 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isU1f0s0() const;
  inline bool hasU1f0s0() const;
  inline  ::capnp::Void getU1f0s0() const;

  inline bool isU1f0s1() const;
  inline bool hasU1f0s1() const;
  inline bool getU1f0s1() const;

  inline bool isU1f1s1() const;
  inline bool hasU1f1s1() const;
  inline bool getU1f1s1() const;

  inline bool isU1f0s8() const;
  inline bool hasU1f0s8() const;
  inline  ::int8_t getU1f0s8() const;

  inline bool isU1f1s8() const;
  inline bool hasU1f1s8() const;
  inline  ::int8_t getU1f1s8() const;

  inline bool isU1f0s16() const;
  inline bool hasU1f0s16() const;
  inline  ::int16_t getU1f0s16() const;

  inline bool isU1f1s16() const;
  inline bool hasU1f1s16() const;
  inline  ::int16_t getU1f1s16() const;

  inline bool isU1f0s32() const;
  inline bool hasU1f0s32() const;
  inline  ::int32_t getU1f0s32() const;

  inline bool isU1f1s32() const;
  inline bool hasU1f1s32() const;
  inline  ::int32_t getU1f1s32() const;

  inline bool isU1f0s64() const;
  inline bool hasU1f0s64() const;
  inline  ::int64_t getU1f0s64() const;

  inline bool isU1f1s64() const;
  inline bool hasU1f1s64() const;
  inline  ::int64_t getU1f1s64() const;

  inline bool isU1f0sp() const;
  inline bool hasU1f0sp() const;
  inline  ::capnp::Text::Reader getU1f0sp() const;

  inline bool isU1f1sp() const;
  inline bool hasU1f1sp() const;
  inline  ::capnp::Text::Reader getU1f1sp() const;

  inline bool isU1f2s0() const;
  inline bool hasU1f2s0() const;
  inline  ::capnp::Void getU1f2s0() const;

  inline bool isU1f2s1() const;
  inline bool hasU1f2s1() const;
  inline bool getU1f2s1() const;

  inline bool isU1f2s8() const;
  inline bool hasU1f2s8() const;
  inline  ::int8_t getU1f2s8() const;

  inline bool isU1f2s16() const;
  inline bool hasU1f2s16() const;
  inline  ::int16_t getU1f2s16() const;

  inline bool isU1f2s32() const;
  inline bool hasU1f2s32() const;
  inline  ::int32_t getU1f2s32() const;

  inline bool isU1f2s64() const;
  inline bool hasU1f2s64() const;
  inline  ::int64_t getU1f2s64() const;

  inline bool isU1f2sp() const;
  inline bool hasU1f2sp() const;
  inline  ::capnp::Text::Reader getU1f2sp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union1::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union1::Reader reader) {
  return ::capnp::_::structString<TestUnion::Union1>(reader._reader);
}

class TestUnion::Union1::Builder {
public:
  typedef Union1 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isU1f0s0();
  inline bool hasU1f0s0();
  inline  ::capnp::Void getU1f0s0();
  inline void setU1f0s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU1f0s1();
  inline bool hasU1f0s1();
  inline bool getU1f0s1();
  inline void setU1f0s1(bool value);

  inline bool isU1f1s1();
  inline bool hasU1f1s1();
  inline bool getU1f1s1();
  inline void setU1f1s1(bool value);

  inline bool isU1f0s8();
  inline bool hasU1f0s8();
  inline  ::int8_t getU1f0s8();
  inline void setU1f0s8( ::int8_t value);

  inline bool isU1f1s8();
  inline bool hasU1f1s8();
  inline  ::int8_t getU1f1s8();
  inline void setU1f1s8( ::int8_t value);

  inline bool isU1f0s16();
  inline bool hasU1f0s16();
  inline  ::int16_t getU1f0s16();
  inline void setU1f0s16( ::int16_t value);

  inline bool isU1f1s16();
  inline bool hasU1f1s16();
  inline  ::int16_t getU1f1s16();
  inline void setU1f1s16( ::int16_t value);

  inline bool isU1f0s32();
  inline bool hasU1f0s32();
  inline  ::int32_t getU1f0s32();
  inline void setU1f0s32( ::int32_t value);

  inline bool isU1f1s32();
  inline bool hasU1f1s32();
  inline  ::int32_t getU1f1s32();
  inline void setU1f1s32( ::int32_t value);

  inline bool isU1f0s64();
  inline bool hasU1f0s64();
  inline  ::int64_t getU1f0s64();
  inline void setU1f0s64( ::int64_t value);

  inline bool isU1f1s64();
  inline bool hasU1f1s64();
  inline  ::int64_t getU1f1s64();
  inline void setU1f1s64( ::int64_t value);

  inline bool isU1f0sp();
  inline bool hasU1f0sp();
  inline  ::capnp::Text::Builder getU1f0sp();
  inline void setU1f0sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f0sp(unsigned int size);
  inline void adoptU1f0sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f0sp();

  inline bool isU1f1sp();
  inline bool hasU1f1sp();
  inline  ::capnp::Text::Builder getU1f1sp();
  inline void setU1f1sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f1sp(unsigned int size);
  inline void adoptU1f1sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f1sp();

  inline bool isU1f2s0();
  inline bool hasU1f2s0();
  inline  ::capnp::Void getU1f2s0();
  inline void setU1f2s0( ::capnp::Void value = ::capnp::VOID);

  inline bool isU1f2s1();
  inline bool hasU1f2s1();
  inline bool getU1f2s1();
  inline void setU1f2s1(bool value);

  inline bool isU1f2s8();
  inline bool hasU1f2s8();
  inline  ::int8_t getU1f2s8();
  inline void setU1f2s8( ::int8_t value);

  inline bool isU1f2s16();
  inline bool hasU1f2s16();
  inline  ::int16_t getU1f2s16();
  inline void setU1f2s16( ::int16_t value);

  inline bool isU1f2s32();
  inline bool hasU1f2s32();
  inline  ::int32_t getU1f2s32();
  inline void setU1f2s32( ::int32_t value);

  inline bool isU1f2s64();
  inline bool hasU1f2s64();
  inline  ::int64_t getU1f2s64();
  inline void setU1f2s64( ::int64_t value);

  inline bool isU1f2sp();
  inline bool hasU1f2sp();
  inline  ::capnp::Text::Builder getU1f2sp();
  inline void setU1f2sp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initU1f2sp(unsigned int size);
  inline void adoptU1f2sp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownU1f2sp();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union1::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union1::Builder builder) {
  return ::capnp::_::structString<TestUnion::Union1>(builder._builder.asReader());
}

class TestUnion::Union2::Reader {
public:
  typedef Union2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isU2f0s1() const;
  inline bool hasU2f0s1() const;
  inline bool getU2f0s1() const;

  inline bool isU2f0s8() const;
  inline bool hasU2f0s8() const;
  inline  ::int8_t getU2f0s8() const;

  inline bool isU2f0s16() const;
  inline bool hasU2f0s16() const;
  inline  ::int16_t getU2f0s16() const;

  inline bool isU2f0s32() const;
  inline bool hasU2f0s32() const;
  inline  ::int32_t getU2f0s32() const;

  inline bool isU2f0s64() const;
  inline bool hasU2f0s64() const;
  inline  ::int64_t getU2f0s64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union2::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union2::Reader reader) {
  return ::capnp::_::structString<TestUnion::Union2>(reader._reader);
}

class TestUnion::Union2::Builder {
public:
  typedef Union2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isU2f0s1();
  inline bool hasU2f0s1();
  inline bool getU2f0s1();
  inline void setU2f0s1(bool value);

  inline bool isU2f0s8();
  inline bool hasU2f0s8();
  inline  ::int8_t getU2f0s8();
  inline void setU2f0s8( ::int8_t value);

  inline bool isU2f0s16();
  inline bool hasU2f0s16();
  inline  ::int16_t getU2f0s16();
  inline void setU2f0s16( ::int16_t value);

  inline bool isU2f0s32();
  inline bool hasU2f0s32();
  inline  ::int32_t getU2f0s32();
  inline void setU2f0s32( ::int32_t value);

  inline bool isU2f0s64();
  inline bool hasU2f0s64();
  inline  ::int64_t getU2f0s64();
  inline void setU2f0s64( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union2::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union2::Builder builder) {
  return ::capnp::_::structString<TestUnion::Union2>(builder._builder.asReader());
}

class TestUnion::Union3::Reader {
public:
  typedef Union3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isU3f0s1() const;
  inline bool hasU3f0s1() const;
  inline bool getU3f0s1() const;

  inline bool isU3f0s8() const;
  inline bool hasU3f0s8() const;
  inline  ::int8_t getU3f0s8() const;

  inline bool isU3f0s16() const;
  inline bool hasU3f0s16() const;
  inline  ::int16_t getU3f0s16() const;

  inline bool isU3f0s32() const;
  inline bool hasU3f0s32() const;
  inline  ::int32_t getU3f0s32() const;

  inline bool isU3f0s64() const;
  inline bool hasU3f0s64() const;
  inline  ::int64_t getU3f0s64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union3::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union3::Reader reader) {
  return ::capnp::_::structString<TestUnion::Union3>(reader._reader);
}

class TestUnion::Union3::Builder {
public:
  typedef Union3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isU3f0s1();
  inline bool hasU3f0s1();
  inline bool getU3f0s1();
  inline void setU3f0s1(bool value);

  inline bool isU3f0s8();
  inline bool hasU3f0s8();
  inline  ::int8_t getU3f0s8();
  inline void setU3f0s8( ::int8_t value);

  inline bool isU3f0s16();
  inline bool hasU3f0s16();
  inline  ::int16_t getU3f0s16();
  inline void setU3f0s16( ::int16_t value);

  inline bool isU3f0s32();
  inline bool hasU3f0s32();
  inline  ::int32_t getU3f0s32();
  inline void setU3f0s32( ::int32_t value);

  inline bool isU3f0s64();
  inline bool hasU3f0s64();
  inline  ::int64_t getU3f0s64();
  inline void setU3f0s64( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnion::Union3::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnion::Union3::Builder builder) {
  return ::capnp::_::structString<TestUnion::Union3>(builder._builder.asReader());
}

class TestUnnamedUnion::Reader {
public:
  typedef TestUnnamedUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasBefore() const;
  inline  ::capnp::Text::Reader getBefore() const;

  inline bool isFoo() const;
  inline bool hasFoo() const;
  inline  ::uint16_t getFoo() const;

  inline bool hasMiddle() const;
  inline  ::uint16_t getMiddle() const;

  inline bool isBar() const;
  inline bool hasBar() const;
  inline  ::uint32_t getBar() const;

  inline bool hasAfter() const;
  inline  ::capnp::Text::Reader getAfter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnnamedUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnnamedUnion::Reader reader) {
  return ::capnp::_::structString<TestUnnamedUnion>(reader._reader);
}

class TestUnnamedUnion::Builder {
public:
  typedef TestUnnamedUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasBefore();
  inline  ::capnp::Text::Builder getBefore();
  inline void setBefore( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBefore(unsigned int size);
  inline void adoptBefore(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBefore();

  inline bool isFoo();
  inline bool hasFoo();
  inline  ::uint16_t getFoo();
  inline void setFoo( ::uint16_t value);

  inline bool hasMiddle();
  inline  ::uint16_t getMiddle();
  inline void setMiddle( ::uint16_t value);

  inline bool isBar();
  inline bool hasBar();
  inline  ::uint32_t getBar();
  inline void setBar( ::uint32_t value);

  inline bool hasAfter();
  inline  ::capnp::Text::Builder getAfter();
  inline void setAfter( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAfter(unsigned int size);
  inline void adoptAfter(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAfter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnnamedUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnnamedUnion::Builder builder) {
  return ::capnp::_::structString<TestUnnamedUnion>(builder._builder.asReader());
}

class TestUnionInUnion::Reader {
public:
  typedef TestUnionInUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasOuter() const;
  inline Outer::Reader getOuter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Reader reader) {
  return ::capnp::_::structString<TestUnionInUnion>(reader._reader);
}

class TestUnionInUnion::Builder {
public:
  typedef TestUnionInUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasOuter();
  inline Outer::Builder getOuter();
  inline Outer::Builder initOuter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Builder builder) {
  return ::capnp::_::structString<TestUnionInUnion>(builder._builder.asReader());
}

class TestUnionInUnion::Outer::Reader {
public:
  typedef Outer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isInner() const;
  inline bool hasInner() const;
  inline Inner::Reader getInner() const;

  inline bool isBaz() const;
  inline bool hasBaz() const;
  inline  ::int32_t getBaz() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Reader reader) {
  return ::capnp::_::structString<TestUnionInUnion::Outer>(reader._reader);
}

class TestUnionInUnion::Outer::Builder {
public:
  typedef Outer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isInner();
  inline bool hasInner();
  inline Inner::Builder getInner();
  inline Inner::Builder initInner();

  inline bool isBaz();
  inline bool hasBaz();
  inline  ::int32_t getBaz();
  inline void setBaz( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Builder builder) {
  return ::capnp::_::structString<TestUnionInUnion::Outer>(builder._builder.asReader());
}

class TestUnionInUnion::Outer::Inner::Reader {
public:
  typedef Inner Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isFoo() const;
  inline bool hasFoo() const;
  inline  ::int32_t getFoo() const;

  inline bool isBar() const;
  inline bool hasBar() const;
  inline  ::int32_t getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Inner::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Inner::Reader reader) {
  return ::capnp::_::structString<TestUnionInUnion::Outer::Inner>(reader._reader);
}

class TestUnionInUnion::Outer::Inner::Builder {
public:
  typedef Inner Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isFoo();
  inline bool hasFoo();
  inline  ::int32_t getFoo();
  inline void setFoo( ::int32_t value);

  inline bool isBar();
  inline bool hasBar();
  inline  ::int32_t getBar();
  inline void setBar( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Inner::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionInUnion::Outer::Inner::Builder builder) {
  return ::capnp::_::structString<TestUnionInUnion::Outer::Inner>(builder._builder.asReader());
}

class TestGroups::Reader {
public:
  typedef TestGroups Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasGroups() const;
  inline Groups::Reader getGroups() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Reader reader) {
  return ::capnp::_::structString<TestGroups>(reader._reader);
}

class TestGroups::Builder {
public:
  typedef TestGroups Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasGroups();
  inline Groups::Builder getGroups();
  inline Groups::Builder initGroups();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Builder builder) {
  return ::capnp::_::structString<TestGroups>(builder._builder.asReader());
}

class TestGroups::Groups::Reader {
public:
  typedef Groups Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isFoo() const;
  inline bool hasFoo() const;
  inline Foo::Reader getFoo() const;

  inline bool isBaz() const;
  inline bool hasBaz() const;
  inline Baz::Reader getBaz() const;

  inline bool isBar() const;
  inline bool hasBar() const;
  inline Bar::Reader getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Reader reader) {
  return ::capnp::_::structString<TestGroups::Groups>(reader._reader);
}

class TestGroups::Groups::Builder {
public:
  typedef Groups Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isFoo();
  inline bool hasFoo();
  inline Foo::Builder getFoo();
  inline Foo::Builder initFoo();

  inline bool isBaz();
  inline bool hasBaz();
  inline Baz::Builder getBaz();
  inline Baz::Builder initBaz();

  inline bool isBar();
  inline bool hasBar();
  inline Bar::Builder getBar();
  inline Bar::Builder initBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Builder builder) {
  return ::capnp::_::structString<TestGroups::Groups>(builder._builder.asReader());
}

class TestGroups::Groups::Foo::Reader {
public:
  typedef Foo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasCorge() const;
  inline  ::int32_t getCorge() const;

  inline bool hasGrault() const;
  inline  ::int64_t getGrault() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Foo::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Foo::Reader reader) {
  return ::capnp::_::structString<TestGroups::Groups::Foo>(reader._reader);
}

class TestGroups::Groups::Foo::Builder {
public:
  typedef Foo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasCorge();
  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline bool hasGrault();
  inline  ::int64_t getGrault();
  inline void setGrault( ::int64_t value);

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Foo::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Foo::Builder builder) {
  return ::capnp::_::structString<TestGroups::Groups::Foo>(builder._builder.asReader());
}

class TestGroups::Groups::Baz::Reader {
public:
  typedef Baz Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasCorge() const;
  inline  ::int32_t getCorge() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline bool hasGarply() const;
  inline  ::capnp::Text::Reader getGarply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Baz::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Baz::Reader reader) {
  return ::capnp::_::structString<TestGroups::Groups::Baz>(reader._reader);
}

class TestGroups::Groups::Baz::Builder {
public:
  typedef Baz Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasCorge();
  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline bool hasGarply();
  inline  ::capnp::Text::Builder getGarply();
  inline void setGarply( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGarply(unsigned int size);
  inline void adoptGarply(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGarply();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Baz::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Baz::Builder builder) {
  return ::capnp::_::structString<TestGroups::Groups::Baz>(builder._builder.asReader());
}

class TestGroups::Groups::Bar::Reader {
public:
  typedef Bar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasCorge() const;
  inline  ::int32_t getCorge() const;

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

  inline bool hasGarply() const;
  inline  ::int64_t getGarply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Bar::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Bar::Reader reader) {
  return ::capnp::_::structString<TestGroups::Groups::Bar>(reader._reader);
}

class TestGroups::Groups::Bar::Builder {
public:
  typedef Bar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasCorge();
  inline  ::int32_t getCorge();
  inline void setCorge( ::int32_t value);

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

  inline bool hasGarply();
  inline  ::int64_t getGarply();
  inline void setGarply( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Bar::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestGroups::Groups::Bar::Builder builder) {
  return ::capnp::_::structString<TestGroups::Groups::Bar>(builder._builder.asReader());
}

class TestInterleavedGroups::Reader {
public:
  typedef TestInterleavedGroups Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasGroup1() const;
  inline Group1::Reader getGroup1() const;

  inline bool hasGroup2() const;
  inline Group2::Reader getGroup2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Reader reader) {
  return ::capnp::_::structString<TestInterleavedGroups>(reader._reader);
}

class TestInterleavedGroups::Builder {
public:
  typedef TestInterleavedGroups Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasGroup1();
  inline Group1::Builder getGroup1();
  inline Group1::Builder initGroup1();

  inline bool hasGroup2();
  inline Group2::Builder getGroup2();
  inline Group2::Builder initGroup2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Builder builder) {
  return ::capnp::_::structString<TestInterleavedGroups>(builder._builder.asReader());
}

class TestInterleavedGroups::Group1::Reader {
public:
  typedef Group1 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasFoo() const;
  inline  ::uint32_t getFoo() const;

  inline bool hasBar() const;
  inline  ::uint64_t getBar() const;

  inline bool isQux() const;
  inline bool hasQux() const;
  inline  ::uint16_t getQux() const;

  inline bool isCorge() const;
  inline bool hasCorge() const;
  inline Corge::Reader getCorge() const;

  inline bool hasWaldo() const;
  inline  ::capnp::Text::Reader getWaldo() const;

  inline bool isFred() const;
  inline bool hasFred() const;
  inline  ::capnp::Text::Reader getFred() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Reader reader) {
  return ::capnp::_::structString<TestInterleavedGroups::Group1>(reader._reader);
}

class TestInterleavedGroups::Group1::Builder {
public:
  typedef Group1 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasFoo();
  inline  ::uint32_t getFoo();
  inline void setFoo( ::uint32_t value);

  inline bool hasBar();
  inline  ::uint64_t getBar();
  inline void setBar( ::uint64_t value);

  inline bool isQux();
  inline bool hasQux();
  inline  ::uint16_t getQux();
  inline void setQux( ::uint16_t value);

  inline bool isCorge();
  inline bool hasCorge();
  inline Corge::Builder getCorge();
  inline Corge::Builder initCorge();

  inline bool hasWaldo();
  inline  ::capnp::Text::Builder getWaldo();
  inline void setWaldo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWaldo(unsigned int size);
  inline void adoptWaldo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWaldo();

  inline bool isFred();
  inline bool hasFred();
  inline  ::capnp::Text::Builder getFred();
  inline void setFred( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFred(unsigned int size);
  inline void adoptFred(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFred();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Builder builder) {
  return ::capnp::_::structString<TestInterleavedGroups::Group1>(builder._builder.asReader());
}

class TestInterleavedGroups::Group1::Corge::Reader {
public:
  typedef Corge Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasGrault() const;
  inline  ::uint64_t getGrault() const;

  inline bool hasGarply() const;
  inline  ::uint16_t getGarply() const;

  inline bool hasPlugh() const;
  inline  ::capnp::Text::Reader getPlugh() const;

  inline bool hasXyzzy() const;
  inline  ::capnp::Text::Reader getXyzzy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Corge::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Corge::Reader reader) {
  return ::capnp::_::structString<TestInterleavedGroups::Group1::Corge>(reader._reader);
}

class TestInterleavedGroups::Group1::Corge::Builder {
public:
  typedef Corge Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasGrault();
  inline  ::uint64_t getGrault();
  inline void setGrault( ::uint64_t value);

  inline bool hasGarply();
  inline  ::uint16_t getGarply();
  inline void setGarply( ::uint16_t value);

  inline bool hasPlugh();
  inline  ::capnp::Text::Builder getPlugh();
  inline void setPlugh( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlugh(unsigned int size);
  inline void adoptPlugh(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlugh();

  inline bool hasXyzzy();
  inline  ::capnp::Text::Builder getXyzzy();
  inline void setXyzzy( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXyzzy(unsigned int size);
  inline void adoptXyzzy(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXyzzy();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Corge::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group1::Corge::Builder builder) {
  return ::capnp::_::structString<TestInterleavedGroups::Group1::Corge>(builder._builder.asReader());
}

class TestInterleavedGroups::Group2::Reader {
public:
  typedef Group2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool hasFoo() const;
  inline  ::uint32_t getFoo() const;

  inline bool hasBar() const;
  inline  ::uint64_t getBar() const;

  inline bool isQux() const;
  inline bool hasQux() const;
  inline  ::uint16_t getQux() const;

  inline bool isCorge() const;
  inline bool hasCorge() const;
  inline Corge::Reader getCorge() const;

  inline bool hasWaldo() const;
  inline  ::capnp::Text::Reader getWaldo() const;

  inline bool isFred() const;
  inline bool hasFred() const;
  inline  ::capnp::Text::Reader getFred() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Reader reader) {
  return ::capnp::_::structString<TestInterleavedGroups::Group2>(reader._reader);
}

class TestInterleavedGroups::Group2::Builder {
public:
  typedef Group2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool hasFoo();
  inline  ::uint32_t getFoo();
  inline void setFoo( ::uint32_t value);

  inline bool hasBar();
  inline  ::uint64_t getBar();
  inline void setBar( ::uint64_t value);

  inline bool isQux();
  inline bool hasQux();
  inline  ::uint16_t getQux();
  inline void setQux( ::uint16_t value);

  inline bool isCorge();
  inline bool hasCorge();
  inline Corge::Builder getCorge();
  inline Corge::Builder initCorge();

  inline bool hasWaldo();
  inline  ::capnp::Text::Builder getWaldo();
  inline void setWaldo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWaldo(unsigned int size);
  inline void adoptWaldo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWaldo();

  inline bool isFred();
  inline bool hasFred();
  inline  ::capnp::Text::Builder getFred();
  inline void setFred( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFred(unsigned int size);
  inline void adoptFred(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFred();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Builder builder) {
  return ::capnp::_::structString<TestInterleavedGroups::Group2>(builder._builder.asReader());
}

class TestInterleavedGroups::Group2::Corge::Reader {
public:
  typedef Corge Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasGrault() const;
  inline  ::uint64_t getGrault() const;

  inline bool hasGarply() const;
  inline  ::uint16_t getGarply() const;

  inline bool hasPlugh() const;
  inline  ::capnp::Text::Reader getPlugh() const;

  inline bool hasXyzzy() const;
  inline  ::capnp::Text::Reader getXyzzy() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Corge::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Corge::Reader reader) {
  return ::capnp::_::structString<TestInterleavedGroups::Group2::Corge>(reader._reader);
}

class TestInterleavedGroups::Group2::Corge::Builder {
public:
  typedef Corge Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasGrault();
  inline  ::uint64_t getGrault();
  inline void setGrault( ::uint64_t value);

  inline bool hasGarply();
  inline  ::uint16_t getGarply();
  inline void setGarply( ::uint16_t value);

  inline bool hasPlugh();
  inline  ::capnp::Text::Builder getPlugh();
  inline void setPlugh( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlugh(unsigned int size);
  inline void adoptPlugh(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlugh();

  inline bool hasXyzzy();
  inline  ::capnp::Text::Builder getXyzzy();
  inline void setXyzzy( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initXyzzy(unsigned int size);
  inline void adoptXyzzy(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownXyzzy();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Corge::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestInterleavedGroups::Group2::Corge::Builder builder) {
  return ::capnp::_::structString<TestInterleavedGroups::Group2::Corge>(builder._builder.asReader());
}

class TestUnionDefaults::Reader {
public:
  typedef TestUnionDefaults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasS16s8s64s8Set() const;
  inline  ::capnproto_test::capnp::test::TestUnion::Reader getS16s8s64s8Set() const;

  inline bool hasS0sps1s32Set() const;
  inline  ::capnproto_test::capnp::test::TestUnion::Reader getS0sps1s32Set() const;

  inline bool hasUnnamed1() const;
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Reader getUnnamed1() const;

  inline bool hasUnnamed2() const;
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Reader getUnnamed2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionDefaults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionDefaults::Reader reader) {
  return ::capnp::_::structString<TestUnionDefaults>(reader._reader);
}

class TestUnionDefaults::Builder {
public:
  typedef TestUnionDefaults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasS16s8s64s8Set();
  inline  ::capnproto_test::capnp::test::TestUnion::Builder getS16s8s64s8Set();
  inline void setS16s8s64s8Set( ::capnproto_test::capnp::test::TestUnion::Reader value);
  inline  ::capnproto_test::capnp::test::TestUnion::Builder initS16s8s64s8Set();
  inline void adoptS16s8s64s8Set(::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion> disownS16s8s64s8Set();

  inline bool hasS0sps1s32Set();
  inline  ::capnproto_test::capnp::test::TestUnion::Builder getS0sps1s32Set();
  inline void setS0sps1s32Set( ::capnproto_test::capnp::test::TestUnion::Reader value);
  inline  ::capnproto_test::capnp::test::TestUnion::Builder initS0sps1s32Set();
  inline void adoptS0sps1s32Set(::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion> disownS0sps1s32Set();

  inline bool hasUnnamed1();
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder getUnnamed1();
  inline void setUnnamed1( ::capnproto_test::capnp::test::TestUnnamedUnion::Reader value);
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder initUnnamed1();
  inline void adoptUnnamed1(::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion> disownUnnamed1();

  inline bool hasUnnamed2();
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder getUnnamed2();
  inline void setUnnamed2( ::capnproto_test::capnp::test::TestUnnamedUnion::Reader value);
  inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder initUnnamed2();
  inline void adoptUnnamed2(::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion> disownUnnamed2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUnionDefaults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUnionDefaults::Builder builder) {
  return ::capnp::_::structString<TestUnionDefaults>(builder._builder.asReader());
}

class TestNestedTypes::Reader {
public:
  typedef TestNestedTypes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasNestedStruct() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Reader getNestedStruct() const;

  inline bool hasOuterNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum() const;

  inline bool hasInnerNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::Reader reader) {
  return ::capnp::_::structString<TestNestedTypes>(reader._reader);
}

class TestNestedTypes::Builder {
public:
  typedef TestNestedTypes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasNestedStruct();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Builder getNestedStruct();
  inline void setNestedStruct( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Reader value);
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Builder initNestedStruct();
  inline void adoptNestedStruct(::capnp::Orphan< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct> disownNestedStruct();

  inline bool hasOuterNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum();
  inline void setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value);

  inline bool hasInnerNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum();
  inline void setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::Builder builder) {
  return ::capnp::_::structString<TestNestedTypes>(builder._builder.asReader());
}

class TestNestedTypes::NestedStruct::Reader {
public:
  typedef NestedStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasOuterNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum() const;

  inline bool hasInnerNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::NestedStruct::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::NestedStruct::Reader reader) {
  return ::capnp::_::structString<TestNestedTypes::NestedStruct>(reader._reader);
}

class TestNestedTypes::NestedStruct::Builder {
public:
  typedef NestedStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasOuterNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum();
  inline void setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value);

  inline bool hasInnerNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum();
  inline void setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::NestedStruct::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNestedTypes::NestedStruct::Builder builder) {
  return ::capnp::_::structString<TestNestedTypes::NestedStruct>(builder._builder.asReader());
}

class TestUsing::Reader {
public:
  typedef TestUsing Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasInnerNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum() const;

  inline bool hasOuterNestedEnum() const;
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUsing::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUsing::Reader reader) {
  return ::capnp::_::structString<TestUsing>(reader._reader);
}

class TestUsing::Builder {
public:
  typedef TestUsing Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasInnerNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum getInnerNestedEnum();
  inline void setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value);

  inline bool hasOuterNestedEnum();
  inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum getOuterNestedEnum();
  inline void setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestUsing::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestUsing::Builder builder) {
  return ::capnp::_::structString<TestUsing>(builder._builder.asReader());
}

class TestLists::Reader {
public:
  typedef TestLists Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasList0() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Reader getList0() const;

  inline bool hasList1() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Reader getList1() const;

  inline bool hasList8() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Reader getList8() const;

  inline bool hasList16() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Reader getList16() const;

  inline bool hasList32() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Reader getList32() const;

  inline bool hasList64() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Reader getList64() const;

  inline bool hasListP() const;
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Reader getListP() const;

  inline bool hasInt32ListList() const;
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader getInt32ListList() const;

  inline bool hasTextListList() const;
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader getTextListList() const;

  inline bool hasStructListList() const;
  inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Reader getStructListList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Reader reader) {
  return ::capnp::_::structString<TestLists>(reader._reader);
}

class TestLists::Builder {
public:
  typedef TestLists Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasList0();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Builder getList0();
  inline void setList0( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Builder initList0(unsigned int size);
  inline void adoptList0(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>> disownList0();

  inline bool hasList1();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Builder getList1();
  inline void setList1( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Builder initList1(unsigned int size);
  inline void adoptList1(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>> disownList1();

  inline bool hasList8();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Builder getList8();
  inline void setList8( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Builder initList8(unsigned int size);
  inline void adoptList8(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>> disownList8();

  inline bool hasList16();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Builder getList16();
  inline void setList16( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Builder initList16(unsigned int size);
  inline void adoptList16(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>> disownList16();

  inline bool hasList32();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Builder getList32();
  inline void setList32( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Builder initList32(unsigned int size);
  inline void adoptList32(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>> disownList32();

  inline bool hasList64();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Builder getList64();
  inline void setList64( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Builder initList64(unsigned int size);
  inline void adoptList64(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>> disownList64();

  inline bool hasListP();
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Builder getListP();
  inline void setListP( ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Reader value);
  inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Builder initListP(unsigned int size);
  inline void adoptListP(::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>> disownListP();

  inline bool hasInt32ListList();
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder getInt32ListList();
  inline void setInt32ListList( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value);
  inline void setInt32ListList(std::initializer_list< ::capnp::List< ::int32_t>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder initInt32ListList(unsigned int size);
  inline void adoptInt32ListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> disownInt32ListList();

  inline bool hasTextListList();
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder getTextListList();
  inline void setTextListList( ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader value);
  inline void setTextListList(std::initializer_list< ::capnp::List< ::capnp::Text>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder initTextListList(unsigned int size);
  inline void adoptTextListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>> disownTextListList();

  inline bool hasStructListList();
  inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Builder getStructListList();
  inline void setStructListList( ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Reader value);
  inline void setStructListList(std::initializer_list< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Builder initStructListList(unsigned int size);
  inline void adoptStructListList(::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>> disownStructListList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Builder builder) {
  return ::capnp::_::structString<TestLists>(builder._builder.asReader());
}

class TestLists::Struct0::Reader {
public:
  typedef Struct0 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::capnp::Void getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct0>(reader._reader);
}

class TestLists::Struct0::Builder {
public:
  typedef Struct0 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::capnp::Void getF();
  inline void setF( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct0>(builder._builder.asReader());
}

class TestLists::Struct1::Reader {
public:
  typedef Struct1 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline bool getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct1>(reader._reader);
}

class TestLists::Struct1::Builder {
public:
  typedef Struct1 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline bool getF();
  inline void setF(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct1>(builder._builder.asReader());
}

class TestLists::Struct8::Reader {
public:
  typedef Struct8 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint8_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct8>(reader._reader);
}

class TestLists::Struct8::Builder {
public:
  typedef Struct8 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint8_t getF();
  inline void setF( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct8>(builder._builder.asReader());
}

class TestLists::Struct16::Reader {
public:
  typedef Struct16 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint16_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct16>(reader._reader);
}

class TestLists::Struct16::Builder {
public:
  typedef Struct16 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint16_t getF();
  inline void setF( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct16>(builder._builder.asReader());
}

class TestLists::Struct32::Reader {
public:
  typedef Struct32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint32_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct32>(reader._reader);
}

class TestLists::Struct32::Builder {
public:
  typedef Struct32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint32_t getF();
  inline void setF( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct32>(builder._builder.asReader());
}

class TestLists::Struct64::Reader {
public:
  typedef Struct64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint64_t getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct64>(reader._reader);
}

class TestLists::Struct64::Builder {
public:
  typedef Struct64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint64_t getF();
  inline void setF( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct64>(builder._builder.asReader());
}

class TestLists::StructP::Reader {
public:
  typedef StructP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::capnp::Text::Reader getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::StructP::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::StructP::Reader reader) {
  return ::capnp::_::structString<TestLists::StructP>(reader._reader);
}

class TestLists::StructP::Builder {
public:
  typedef StructP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::capnp::Text::Builder getF();
  inline void setF( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownF();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::StructP::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::StructP::Builder builder) {
  return ::capnp::_::structString<TestLists::StructP>(builder._builder.asReader());
}

class TestLists::Struct0c::Reader {
public:
  typedef Struct0c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::capnp::Void getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct0c>(reader._reader);
}

class TestLists::Struct0c::Builder {
public:
  typedef Struct0c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::capnp::Void getF();
  inline void setF( ::capnp::Void value = ::capnp::VOID);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct0c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct0c>(builder._builder.asReader());
}

class TestLists::Struct1c::Reader {
public:
  typedef Struct1c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline bool getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct1c>(reader._reader);
}

class TestLists::Struct1c::Builder {
public:
  typedef Struct1c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline bool getF();
  inline void setF(bool value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct1c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct1c>(builder._builder.asReader());
}

class TestLists::Struct8c::Reader {
public:
  typedef Struct8c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint8_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct8c>(reader._reader);
}

class TestLists::Struct8c::Builder {
public:
  typedef Struct8c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint8_t getF();
  inline void setF( ::uint8_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct8c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct8c>(builder._builder.asReader());
}

class TestLists::Struct16c::Reader {
public:
  typedef Struct16c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint16_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct16c>(reader._reader);
}

class TestLists::Struct16c::Builder {
public:
  typedef Struct16c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint16_t getF();
  inline void setF( ::uint16_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct16c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct16c>(builder._builder.asReader());
}

class TestLists::Struct32c::Reader {
public:
  typedef Struct32c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint32_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct32c>(reader._reader);
}

class TestLists::Struct32c::Builder {
public:
  typedef Struct32c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint32_t getF();
  inline void setF( ::uint32_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct32c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct32c>(builder._builder.asReader());
}

class TestLists::Struct64c::Reader {
public:
  typedef Struct64c Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::uint64_t getF() const;

  inline bool hasPad() const;
  inline  ::capnp::Text::Reader getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64c::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64c::Reader reader) {
  return ::capnp::_::structString<TestLists::Struct64c>(reader._reader);
}

class TestLists::Struct64c::Builder {
public:
  typedef Struct64c Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::uint64_t getF();
  inline void setF( ::uint64_t value);

  inline bool hasPad();
  inline  ::capnp::Text::Builder getPad();
  inline void setPad( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPad(unsigned int size);
  inline void adoptPad(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPad();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64c::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::Struct64c::Builder builder) {
  return ::capnp::_::structString<TestLists::Struct64c>(builder._builder.asReader());
}

class TestLists::StructPc::Reader {
public:
  typedef StructPc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasF() const;
  inline  ::capnp::Text::Reader getF() const;

  inline bool hasPad() const;
  inline  ::uint64_t getPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::StructPc::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::StructPc::Reader reader) {
  return ::capnp::_::structString<TestLists::StructPc>(reader._reader);
}

class TestLists::StructPc::Builder {
public:
  typedef StructPc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasF();
  inline  ::capnp::Text::Builder getF();
  inline void setF( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownF();

  inline bool hasPad();
  inline  ::uint64_t getPad();
  inline void setPad( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLists::StructPc::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLists::StructPc::Builder builder) {
  return ::capnp::_::structString<TestLists::StructPc>(builder._builder.asReader());
}

class TestFieldZeroIsBit::Reader {
public:
  typedef TestFieldZeroIsBit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasBit() const;
  inline bool getBit() const;

  inline bool hasSecondBit() const;
  inline bool getSecondBit() const;

  inline bool hasThirdField() const;
  inline  ::uint8_t getThirdField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestFieldZeroIsBit::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestFieldZeroIsBit::Reader reader) {
  return ::capnp::_::structString<TestFieldZeroIsBit>(reader._reader);
}

class TestFieldZeroIsBit::Builder {
public:
  typedef TestFieldZeroIsBit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasBit();
  inline bool getBit();
  inline void setBit(bool value);

  inline bool hasSecondBit();
  inline bool getSecondBit();
  inline void setSecondBit(bool value);

  inline bool hasThirdField();
  inline  ::uint8_t getThirdField();
  inline void setThirdField( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestFieldZeroIsBit::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestFieldZeroIsBit::Builder builder) {
  return ::capnp::_::structString<TestFieldZeroIsBit>(builder._builder.asReader());
}

class TestListDefaults::Reader {
public:
  typedef TestListDefaults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasLists() const;
  inline  ::capnproto_test::capnp::test::TestLists::Reader getLists() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestListDefaults::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestListDefaults::Reader reader) {
  return ::capnp::_::structString<TestListDefaults>(reader._reader);
}

class TestListDefaults::Builder {
public:
  typedef TestListDefaults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasLists();
  inline  ::capnproto_test::capnp::test::TestLists::Builder getLists();
  inline void setLists( ::capnproto_test::capnp::test::TestLists::Reader value);
  inline  ::capnproto_test::capnp::test::TestLists::Builder initLists();
  inline void adoptLists(::capnp::Orphan< ::capnproto_test::capnp::test::TestLists>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestLists> disownLists();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestListDefaults::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestListDefaults::Builder builder) {
  return ::capnp::_::structString<TestListDefaults>(builder._builder.asReader());
}

class TestLateUnion::Reader {
public:
  typedef TestLateUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasFoo() const;
  inline  ::int32_t getFoo() const;

  inline bool hasBar() const;
  inline  ::capnp::Text::Reader getBar() const;

  inline bool hasBaz() const;
  inline  ::int16_t getBaz() const;

  inline bool hasTheUnion() const;
  inline TheUnion::Reader getTheUnion() const;

  inline bool hasAnotherUnion() const;
  inline AnotherUnion::Reader getAnotherUnion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::Reader reader) {
  return ::capnp::_::structString<TestLateUnion>(reader._reader);
}

class TestLateUnion::Builder {
public:
  typedef TestLateUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasFoo();
  inline  ::int32_t getFoo();
  inline void setFoo( ::int32_t value);

  inline bool hasBar();
  inline  ::capnp::Text::Builder getBar();
  inline void setBar( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBar();

  inline bool hasBaz();
  inline  ::int16_t getBaz();
  inline void setBaz( ::int16_t value);

  inline bool hasTheUnion();
  inline TheUnion::Builder getTheUnion();
  inline TheUnion::Builder initTheUnion();

  inline bool hasAnotherUnion();
  inline AnotherUnion::Builder getAnotherUnion();
  inline AnotherUnion::Builder initAnotherUnion();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::Builder builder) {
  return ::capnp::_::structString<TestLateUnion>(builder._builder.asReader());
}

class TestLateUnion::TheUnion::Reader {
public:
  typedef TheUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isQux() const;
  inline bool hasQux() const;
  inline  ::capnp::Text::Reader getQux() const;

  inline bool isCorge() const;
  inline bool hasCorge() const;
  inline  ::capnp::List< ::int32_t>::Reader getCorge() const;

  inline bool isGrault() const;
  inline bool hasGrault() const;
  inline float getGrault() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::TheUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::TheUnion::Reader reader) {
  return ::capnp::_::structString<TestLateUnion::TheUnion>(reader._reader);
}

class TestLateUnion::TheUnion::Builder {
public:
  typedef TheUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isQux();
  inline bool hasQux();
  inline  ::capnp::Text::Builder getQux();
  inline void setQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQux();

  inline bool isCorge();
  inline bool hasCorge();
  inline  ::capnp::List< ::int32_t>::Builder getCorge();
  inline void setCorge( ::capnp::List< ::int32_t>::Reader value);
  inline void setCorge(std::initializer_list< ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initCorge(unsigned int size);
  inline void adoptCorge(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownCorge();

  inline bool isGrault();
  inline bool hasGrault();
  inline float getGrault();
  inline void setGrault(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::TheUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::TheUnion::Builder builder) {
  return ::capnp::_::structString<TestLateUnion::TheUnion>(builder._builder.asReader());
}

class TestLateUnion::AnotherUnion::Reader {
public:
  typedef AnotherUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isQux() const;
  inline bool hasQux() const;
  inline  ::capnp::Text::Reader getQux() const;

  inline bool isCorge() const;
  inline bool hasCorge() const;
  inline  ::capnp::List< ::int32_t>::Reader getCorge() const;

  inline bool isGrault() const;
  inline bool hasGrault() const;
  inline float getGrault() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::AnotherUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::AnotherUnion::Reader reader) {
  return ::capnp::_::structString<TestLateUnion::AnotherUnion>(reader._reader);
}

class TestLateUnion::AnotherUnion::Builder {
public:
  typedef AnotherUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isQux();
  inline bool hasQux();
  inline  ::capnp::Text::Builder getQux();
  inline void setQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQux();

  inline bool isCorge();
  inline bool hasCorge();
  inline  ::capnp::List< ::int32_t>::Builder getCorge();
  inline void setCorge( ::capnp::List< ::int32_t>::Reader value);
  inline void setCorge(std::initializer_list< ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initCorge(unsigned int size);
  inline void adoptCorge(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownCorge();

  inline bool isGrault();
  inline bool hasGrault();
  inline float getGrault();
  inline void setGrault(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestLateUnion::AnotherUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestLateUnion::AnotherUnion::Builder builder) {
  return ::capnp::_::structString<TestLateUnion::AnotherUnion>(builder._builder.asReader());
}

class TestOldVersion::Reader {
public:
  typedef TestOldVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasOld1() const;
  inline  ::int64_t getOld1() const;

  inline bool hasOld2() const;
  inline  ::capnp::Text::Reader getOld2() const;

  inline bool hasOld3() const;
  inline  ::capnproto_test::capnp::test::TestOldVersion::Reader getOld3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestOldVersion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestOldVersion::Reader reader) {
  return ::capnp::_::structString<TestOldVersion>(reader._reader);
}

class TestOldVersion::Builder {
public:
  typedef TestOldVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasOld1();
  inline  ::int64_t getOld1();
  inline void setOld1( ::int64_t value);

  inline bool hasOld2();
  inline  ::capnp::Text::Builder getOld2();
  inline void setOld2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOld2(unsigned int size);
  inline void adoptOld2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOld2();

  inline bool hasOld3();
  inline  ::capnproto_test::capnp::test::TestOldVersion::Builder getOld3();
  inline void setOld3( ::capnproto_test::capnp::test::TestOldVersion::Reader value);
  inline  ::capnproto_test::capnp::test::TestOldVersion::Builder initOld3();
  inline void adoptOld3(::capnp::Orphan< ::capnproto_test::capnp::test::TestOldVersion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestOldVersion> disownOld3();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestOldVersion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestOldVersion::Builder builder) {
  return ::capnp::_::structString<TestOldVersion>(builder._builder.asReader());
}

class TestNewVersion::Reader {
public:
  typedef TestNewVersion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasOld1() const;
  inline  ::int64_t getOld1() const;

  inline bool hasOld2() const;
  inline  ::capnp::Text::Reader getOld2() const;

  inline bool hasOld3() const;
  inline  ::capnproto_test::capnp::test::TestNewVersion::Reader getOld3() const;

  inline bool hasNew1() const;
  inline  ::int64_t getNew1() const;

  inline bool hasNew2() const;
  inline  ::capnp::Text::Reader getNew2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNewVersion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNewVersion::Reader reader) {
  return ::capnp::_::structString<TestNewVersion>(reader._reader);
}

class TestNewVersion::Builder {
public:
  typedef TestNewVersion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasOld1();
  inline  ::int64_t getOld1();
  inline void setOld1( ::int64_t value);

  inline bool hasOld2();
  inline  ::capnp::Text::Builder getOld2();
  inline void setOld2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOld2(unsigned int size);
  inline void adoptOld2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOld2();

  inline bool hasOld3();
  inline  ::capnproto_test::capnp::test::TestNewVersion::Builder getOld3();
  inline void setOld3( ::capnproto_test::capnp::test::TestNewVersion::Reader value);
  inline  ::capnproto_test::capnp::test::TestNewVersion::Builder initOld3();
  inline void adoptOld3(::capnp::Orphan< ::capnproto_test::capnp::test::TestNewVersion>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestNewVersion> disownOld3();

  inline bool hasNew1();
  inline  ::int64_t getNew1();
  inline void setNew1( ::int64_t value);

  inline bool hasNew2();
  inline  ::capnp::Text::Builder getNew2();
  inline void setNew2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNew2(unsigned int size);
  inline void adoptNew2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNew2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestNewVersion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestNewVersion::Builder builder) {
  return ::capnp::_::structString<TestNewVersion>(builder._builder.asReader());
}

class TestStructUnion::Reader {
public:
  typedef TestStructUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline bool hasUn() const;
  inline Un::Reader getUn() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Reader reader) {
  return ::capnp::_::structString<TestStructUnion>(reader._reader);
}

class TestStructUnion::Builder {
public:
  typedef TestStructUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline bool hasUn();
  inline Un::Builder getUn();
  inline Un::Builder initUn();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Builder builder) {
  return ::capnp::_::structString<TestStructUnion>(builder._builder.asReader());
}

class TestStructUnion::Un::Reader {
public:
  typedef Un Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

  inline Which which() const;
  inline bool isAllTypes() const;
  inline bool hasAllTypes() const;
  inline  ::capnproto_test::capnp::test::TestAllTypes::Reader getAllTypes() const;

  inline bool isObject() const;
  inline bool hasObject() const;
  inline  ::capnproto_test::capnp::test::TestObject::Reader getObject() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Un::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Un::Reader reader) {
  return ::capnp::_::structString<TestStructUnion::Un>(reader._reader);
}

class TestStructUnion::Un::Builder {
public:
  typedef Un Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

  inline Which which();
  inline bool isAllTypes();
  inline bool hasAllTypes();
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder getAllTypes();
  inline void setAllTypes( ::capnproto_test::capnp::test::TestAllTypes::Reader value);
  inline  ::capnproto_test::capnp::test::TestAllTypes::Builder initAllTypes();
  inline void adoptAllTypes(::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> disownAllTypes();

  inline bool isObject();
  inline bool hasObject();
  inline  ::capnproto_test::capnp::test::TestObject::Builder getObject();
  inline void setObject( ::capnproto_test::capnp::test::TestObject::Reader value);
  inline  ::capnproto_test::capnp::test::TestObject::Builder initObject();
  inline void adoptObject(::capnp::Orphan< ::capnproto_test::capnp::test::TestObject>&& value);
  inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestObject> disownObject();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Un::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestStructUnion::Un::Builder builder) {
  return ::capnp::_::structString<TestStructUnion::Un>(builder._builder.asReader());
}

class TestEmptyStruct::Reader {
public:
  typedef TestEmptyStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestEmptyStruct::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestEmptyStruct::Reader reader) {
  return ::capnp::_::structString<TestEmptyStruct>(reader._reader);
}

class TestEmptyStruct::Builder {
public:
  typedef TestEmptyStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestEmptyStruct::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestEmptyStruct::Builder builder) {
  return ::capnp::_::structString<TestEmptyStruct>(builder._builder.asReader());
}

class TestConstants::Reader {
public:
  typedef TestConstants Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestConstants::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(TestConstants::Reader reader) {
  return ::capnp::_::structString<TestConstants>(reader._reader);
}

class TestConstants::Builder {
public:
  typedef TestConstants Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(TestConstants::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(TestConstants::Builder builder) {
  return ::capnp::_::structString<TestConstants>(builder._builder.asReader());
}

// =======================================================================================

inline bool TestAllTypes::Reader::hasVoidField() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasVoidField() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestAllTypes::Reader::getVoidField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestAllTypes::Builder::getVoidField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setVoidField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasBoolField() const {
  return _reader.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasBoolField() {
  return _builder.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}
inline bool TestAllTypes::Reader::getBoolField() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::getBoolField() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setBoolField(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasInt8Field() const {
  return _reader.hasDataField< ::int8_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasInt8Field() {
  return _builder.hasDataField< ::int8_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestAllTypes::Reader::getInt8Field() const {
  return _reader.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestAllTypes::Builder::getInt8Field() {
  return _builder.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt8Field( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasInt16Field() const {
  return _reader.hasDataField< ::int16_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasInt16Field() {
  return _builder.hasDataField< ::int16_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestAllTypes::Reader::getInt16Field() const {
  return _reader.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestAllTypes::Builder::getInt16Field() {
  return _builder.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt16Field( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasInt32Field() const {
  return _reader.hasDataField< ::int32_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasInt32Field() {
  return _builder.hasDataField< ::int32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestAllTypes::Reader::getInt32Field() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestAllTypes::Builder::getInt32Field() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt32Field( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasInt64Field() const {
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasInt64Field() {
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestAllTypes::Reader::getInt64Field() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestAllTypes::Builder::getInt64Field() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInt64Field( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasUInt8Field() const {
  return _reader.hasDataField< ::uint8_t>(16 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasUInt8Field() {
  return _builder.hasDataField< ::uint8_t>(16 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestAllTypes::Reader::getUInt8Field() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestAllTypes::Builder::getUInt8Field() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt8Field( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasUInt16Field() const {
  return _reader.hasDataField< ::uint16_t>(9 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasUInt16Field() {
  return _builder.hasDataField< ::uint16_t>(9 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestAllTypes::Reader::getUInt16Field() const {
  return _reader.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestAllTypes::Builder::getUInt16Field() {
  return _builder.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt16Field( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasUInt32Field() const {
  return _reader.hasDataField< ::uint32_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasUInt32Field() {
  return _builder.hasDataField< ::uint32_t>(5 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestAllTypes::Reader::getUInt32Field() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestAllTypes::Builder::getUInt32Field() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt32Field( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasUInt64Field() const {
  return _reader.hasDataField< ::uint64_t>(3 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasUInt64Field() {
  return _builder.hasDataField< ::uint64_t>(3 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestAllTypes::Reader::getUInt64Field() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestAllTypes::Builder::getUInt64Field() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setUInt64Field( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasFloat32Field() const {
  return _reader.hasDataField<float>(8 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasFloat32Field() {
  return _builder.hasDataField<float>(8 * ::capnp::ELEMENTS);
}
inline float TestAllTypes::Reader::getFloat32Field() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float TestAllTypes::Builder::getFloat32Field() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setFloat32Field(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasFloat64Field() const {
  return _reader.hasDataField<double>(5 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasFloat64Field() {
  return _builder.hasDataField<double>(5 * ::capnp::ELEMENTS);
}
inline double TestAllTypes::Reader::getFloat64Field() const {
  return _reader.getDataField<double>(
      5 * ::capnp::ELEMENTS);
}

inline double TestAllTypes::Builder::getFloat64Field() {
  return _builder.getDataField<double>(
      5 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setFloat64Field(double value) {
  _builder.setDataField<double>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasTextField() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasTextField() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestAllTypes::Reader::getTextField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestAllTypes::Builder::getTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setTextField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestAllTypes::Builder::initTextField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptTextField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestAllTypes::Builder::disownTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasDataField() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasDataField() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Data::Reader TestAllTypes::Reader::getDataField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Data::Builder TestAllTypes::Builder::getDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setDataField( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Data::Builder TestAllTypes::Builder::initDataField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptDataField(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestAllTypes::Builder::disownDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasStructField() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasStructField() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Reader TestAllTypes::Reader::getStructField() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestAllTypes::Builder::getStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setStructField( ::capnproto_test::capnp::test::TestAllTypes::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestAllTypes::Builder::initStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::init(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::adoptStructField(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> TestAllTypes::Builder::disownStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasEnumField() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestEnum>(18 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasEnumField() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestEnum>(18 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestEnum TestAllTypes::Reader::getEnumField() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS);
}

inline  ::capnproto_test::capnp::test::TestEnum TestAllTypes::Builder::getEnumField() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setEnumField( ::capnproto_test::capnp::test::TestEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasInterfaceField() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestAllTypes::Builder::hasInterfaceField() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestAllTypes::Reader::getInterfaceField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestAllTypes::Builder::getInterfaceField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestAllTypes::Builder::setInterfaceField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestAllTypes::Reader::hasVoidList() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasVoidList() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Reader TestAllTypes::Reader::getVoidList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::getVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setVoidList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setVoidList(std::initializer_list< ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::initVoidList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptVoidList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestAllTypes::Builder::disownVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasBoolList() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasBoolList() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::List<bool>::Reader TestAllTypes::Reader::getBoolList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader, 4 * ::capnp::POINTERS);
}
inline  ::capnp::List<bool>::Builder TestAllTypes::Builder::getBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder, 4 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setBoolList( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setBoolList(std::initializer_list<bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<bool>::Builder TestAllTypes::Builder::initBoolList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptBoolList(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> TestAllTypes::Builder::disownBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasInt8List() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasInt8List() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int8_t>::Reader TestAllTypes::Reader::getInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int8_t>::Builder TestAllTypes::Builder::getInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setInt8List( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setInt8List(std::initializer_list< ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int8_t>::Builder TestAllTypes::Builder::initInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptInt8List(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> TestAllTypes::Builder::disownInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasInt16List() const {
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasInt16List() {
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int16_t>::Reader TestAllTypes::Reader::getInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int16_t>::Builder TestAllTypes::Builder::getInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setInt16List( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setInt16List(std::initializer_list< ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int16_t>::Builder TestAllTypes::Builder::initInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(
      _builder, 6 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptInt16List(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> TestAllTypes::Builder::disownInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasInt32List() const {
  return !_reader.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasInt32List() {
  return !_builder.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Reader TestAllTypes::Reader::getInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader, 7 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Builder TestAllTypes::Builder::getInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder, 7 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setInt32List( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setInt32List(std::initializer_list< ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int32_t>::Builder TestAllTypes::Builder::initInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder, 7 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptInt32List(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder, 7 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestAllTypes::Builder::disownInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder, 7 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasInt64List() const {
  return !_reader.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasInt64List() {
  return !_builder.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int64_t>::Reader TestAllTypes::Reader::getInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader, 8 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int64_t>::Builder TestAllTypes::Builder::getInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder, 8 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setInt64List( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setInt64List(std::initializer_list< ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int64_t>::Builder TestAllTypes::Builder::initInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder, 8 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptInt64List(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder, 8 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> TestAllTypes::Builder::disownInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder, 8 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasUInt8List() const {
  return !_reader.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasUInt8List() {
  return !_builder.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint8_t>::Reader TestAllTypes::Reader::getUInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader, 9 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint8_t>::Builder TestAllTypes::Builder::getUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder, 9 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setUInt8List( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setUInt8List(std::initializer_list< ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint8_t>::Builder TestAllTypes::Builder::initUInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder, 9 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptUInt8List(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder, 9 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> TestAllTypes::Builder::disownUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder, 9 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasUInt16List() const {
  return !_reader.isPointerFieldNull(10 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasUInt16List() {
  return !_builder.isPointerFieldNull(10 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint16_t>::Reader TestAllTypes::Reader::getUInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _reader, 10 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint16_t>::Builder TestAllTypes::Builder::getUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _builder, 10 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setUInt16List( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder, 10 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setUInt16List(std::initializer_list< ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder, 10 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint16_t>::Builder TestAllTypes::Builder::initUInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(
      _builder, 10 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptUInt16List(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(
      _builder, 10 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> TestAllTypes::Builder::disownUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(
      _builder, 10 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasUInt32List() const {
  return !_reader.isPointerFieldNull(11 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasUInt32List() {
  return !_builder.isPointerFieldNull(11 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint32_t>::Reader TestAllTypes::Reader::getUInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader, 11 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint32_t>::Builder TestAllTypes::Builder::getUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder, 11 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setUInt32List( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder, 11 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setUInt32List(std::initializer_list< ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder, 11 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint32_t>::Builder TestAllTypes::Builder::initUInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder, 11 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptUInt32List(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder, 11 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> TestAllTypes::Builder::disownUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder, 11 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasUInt64List() const {
  return !_reader.isPointerFieldNull(12 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasUInt64List() {
  return !_builder.isPointerFieldNull(12 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint64_t>::Reader TestAllTypes::Reader::getUInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader, 12 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint64_t>::Builder TestAllTypes::Builder::getUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder, 12 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setUInt64List( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder, 12 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setUInt64List(std::initializer_list< ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder, 12 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint64_t>::Builder TestAllTypes::Builder::initUInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder, 12 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptUInt64List(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder, 12 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> TestAllTypes::Builder::disownUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder, 12 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasFloat32List() const {
  return !_reader.isPointerFieldNull(13 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasFloat32List() {
  return !_builder.isPointerFieldNull(13 * ::capnp::POINTERS);
}
inline  ::capnp::List<float>::Reader TestAllTypes::Reader::getFloat32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader, 13 * ::capnp::POINTERS);
}
inline  ::capnp::List<float>::Builder TestAllTypes::Builder::getFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder, 13 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setFloat32List( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder, 13 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setFloat32List(std::initializer_list<float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder, 13 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<float>::Builder TestAllTypes::Builder::initFloat32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder, 13 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptFloat32List(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder, 13 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> TestAllTypes::Builder::disownFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder, 13 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasFloat64List() const {
  return !_reader.isPointerFieldNull(14 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasFloat64List() {
  return !_builder.isPointerFieldNull(14 * ::capnp::POINTERS);
}
inline  ::capnp::List<double>::Reader TestAllTypes::Reader::getFloat64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader, 14 * ::capnp::POINTERS);
}
inline  ::capnp::List<double>::Builder TestAllTypes::Builder::getFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder, 14 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setFloat64List( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder, 14 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setFloat64List(std::initializer_list<double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder, 14 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<double>::Builder TestAllTypes::Builder::initFloat64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder, 14 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptFloat64List(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder, 14 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TestAllTypes::Builder::disownFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder, 14 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasTextList() const {
  return !_reader.isPointerFieldNull(15 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasTextList() {
  return !_builder.isPointerFieldNull(15 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Text>::Reader TestAllTypes::Reader::getTextList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader, 15 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestAllTypes::Builder::getTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder, 15 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setTextList( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder, 15 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setTextList(std::initializer_list< ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder, 15 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestAllTypes::Builder::initTextList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder, 15 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptTextList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder, 15 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> TestAllTypes::Builder::disownTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder, 15 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasDataList() const {
  return !_reader.isPointerFieldNull(16 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasDataList() {
  return !_builder.isPointerFieldNull(16 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Data>::Reader TestAllTypes::Reader::getDataList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _reader, 16 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestAllTypes::Builder::getDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _builder, 16 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setDataList( ::capnp::List< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder, 16 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setDataList(std::initializer_list< ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder, 16 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestAllTypes::Builder::initDataList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::init(
      _builder, 16 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptDataList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::adopt(
      _builder, 16 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> TestAllTypes::Builder::disownDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::disown(
      _builder, 16 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasStructList() const {
  return !_reader.isPointerFieldNull(17 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasStructList() {
  return !_builder.isPointerFieldNull(17 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader TestAllTypes::Reader::getStructList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::get(
      _reader, 17 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder TestAllTypes::Builder::getStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::get(
      _builder, 17 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setStructList( ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::set(
      _builder, 17 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder TestAllTypes::Builder::initStructList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::init(
      _builder, 17 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptStructList(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::adopt(
      _builder, 17 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>> TestAllTypes::Builder::disownStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::disown(
      _builder, 17 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasEnumList() const {
  return !_reader.isPointerFieldNull(18 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasEnumList() {
  return !_builder.isPointerFieldNull(18 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader TestAllTypes::Reader::getEnumList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::get(
      _reader, 18 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder TestAllTypes::Builder::getEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::get(
      _builder, 18 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setEnumList( ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::set(
      _builder, 18 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setEnumList(std::initializer_list< ::capnproto_test::capnp::test::TestEnum> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::set(
      _builder, 18 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder TestAllTypes::Builder::initEnumList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::init(
      _builder, 18 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptEnumList(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::adopt(
      _builder, 18 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>> TestAllTypes::Builder::disownEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::disown(
      _builder, 18 * ::capnp::POINTERS);
}

inline bool TestAllTypes::Reader::hasInterfaceList() const {
  return !_reader.isPointerFieldNull(19 * ::capnp::POINTERS);
}
inline bool TestAllTypes::Builder::hasInterfaceList() {
  return !_builder.isPointerFieldNull(19 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Reader TestAllTypes::Reader::getInterfaceList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader, 19 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::getInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder, 19 * ::capnp::POINTERS);
}
inline void TestAllTypes::Builder::setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 19 * ::capnp::POINTERS, value);
}
inline void TestAllTypes::Builder::setInterfaceList(std::initializer_list< ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 19 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestAllTypes::Builder::initInterfaceList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder, 19 * ::capnp::POINTERS, size);
}
inline void TestAllTypes::Builder::adoptInterfaceList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder, 19 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestAllTypes::Builder::disownInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder, 19 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasVoidField() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasVoidField() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestDefaults::Reader::getVoidField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestDefaults::Builder::getVoidField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestDefaults::Builder::setVoidField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestDefaults::Reader::hasBoolField() const {
  return _reader.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasBoolField() {
  return _builder.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}
inline bool TestDefaults::Reader::getBoolField() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS, true);
}

inline bool TestDefaults::Builder::getBoolField() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS, true);
}
inline void TestDefaults::Builder::setBoolField(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value, true);
}

inline bool TestDefaults::Reader::hasInt8Field() const {
  return _reader.hasDataField< ::int8_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasInt8Field() {
  return _builder.hasDataField< ::int8_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestDefaults::Reader::getInt8Field() const {
  return _reader.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, -123);
}

inline  ::int8_t TestDefaults::Builder::getInt8Field() {
  return _builder.getDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, -123);
}
inline void TestDefaults::Builder::setInt8Field( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      1 * ::capnp::ELEMENTS, value, -123);
}

inline bool TestDefaults::Reader::hasInt16Field() const {
  return _reader.hasDataField< ::int16_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasInt16Field() {
  return _builder.hasDataField< ::int16_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestDefaults::Reader::getInt16Field() const {
  return _reader.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, -12345);
}

inline  ::int16_t TestDefaults::Builder::getInt16Field() {
  return _builder.getDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, -12345);
}
inline void TestDefaults::Builder::setInt16Field( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      1 * ::capnp::ELEMENTS, value, -12345);
}

inline bool TestDefaults::Reader::hasInt32Field() const {
  return _reader.hasDataField< ::int32_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasInt32Field() {
  return _builder.hasDataField< ::int32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestDefaults::Reader::getInt32Field() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, -12345678);
}

inline  ::int32_t TestDefaults::Builder::getInt32Field() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, -12345678);
}
inline void TestDefaults::Builder::setInt32Field( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value, -12345678);
}

inline bool TestDefaults::Reader::hasInt64Field() const {
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasInt64Field() {
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestDefaults::Reader::getInt64Field() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, -123456789012345ll);
}

inline  ::int64_t TestDefaults::Builder::getInt64Field() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, -123456789012345ll);
}
inline void TestDefaults::Builder::setInt64Field( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value, -123456789012345ll);
}

inline bool TestDefaults::Reader::hasUInt8Field() const {
  return _reader.hasDataField< ::uint8_t>(16 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasUInt8Field() {
  return _builder.hasDataField< ::uint8_t>(16 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestDefaults::Reader::getUInt8Field() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, 234u);
}

inline  ::uint8_t TestDefaults::Builder::getUInt8Field() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, 234u);
}
inline void TestDefaults::Builder::setUInt8Field( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value, 234u);
}

inline bool TestDefaults::Reader::hasUInt16Field() const {
  return _reader.hasDataField< ::uint16_t>(9 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasUInt16Field() {
  return _builder.hasDataField< ::uint16_t>(9 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestDefaults::Reader::getUInt16Field() const {
  return _reader.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, 45678u);
}

inline  ::uint16_t TestDefaults::Builder::getUInt16Field() {
  return _builder.getDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, 45678u);
}
inline void TestDefaults::Builder::setUInt16Field( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      9 * ::capnp::ELEMENTS, value, 45678u);
}

inline bool TestDefaults::Reader::hasUInt32Field() const {
  return _reader.hasDataField< ::uint32_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasUInt32Field() {
  return _builder.hasDataField< ::uint32_t>(5 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestDefaults::Reader::getUInt32Field() const {
  return _reader.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, 3456789012u);
}

inline  ::uint32_t TestDefaults::Builder::getUInt32Field() {
  return _builder.getDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, 3456789012u);
}
inline void TestDefaults::Builder::setUInt32Field( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      5 * ::capnp::ELEMENTS, value, 3456789012u);
}

inline bool TestDefaults::Reader::hasUInt64Field() const {
  return _reader.hasDataField< ::uint64_t>(3 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasUInt64Field() {
  return _builder.hasDataField< ::uint64_t>(3 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestDefaults::Reader::getUInt64Field() const {
  return _reader.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, 12345678901234567890ull);
}

inline  ::uint64_t TestDefaults::Builder::getUInt64Field() {
  return _builder.getDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, 12345678901234567890ull);
}
inline void TestDefaults::Builder::setUInt64Field( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      3 * ::capnp::ELEMENTS, value, 12345678901234567890ull);
}

inline bool TestDefaults::Reader::hasFloat32Field() const {
  return _reader.hasDataField<float>(8 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasFloat32Field() {
  return _builder.hasDataField<float>(8 * ::capnp::ELEMENTS);
}
inline float TestDefaults::Reader::getFloat32Field() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS, 1150963712u);
}

inline float TestDefaults::Builder::getFloat32Field() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS, 1150963712u);
}
inline void TestDefaults::Builder::setFloat32Field(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value, 1150963712u);
}

inline bool TestDefaults::Reader::hasFloat64Field() const {
  return _reader.hasDataField<double>(5 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasFloat64Field() {
  return _builder.hasDataField<double>(5 * ::capnp::ELEMENTS);
}
inline double TestDefaults::Reader::getFloat64Field() const {
  return _reader.getDataField<double>(
      5 * ::capnp::ELEMENTS, 14534676766106106624ull);
}

inline double TestDefaults::Builder::getFloat64Field() {
  return _builder.getDataField<double>(
      5 * ::capnp::ELEMENTS, 14534676766106106624ull);
}
inline void TestDefaults::Builder::setFloat64Field(double value) {
  _builder.setDataField<double>(
      5 * ::capnp::ELEMENTS, value, 14534676766106106624ull);
}

inline bool TestDefaults::Reader::hasTextField() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasTextField() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestDefaults::Reader::getTextField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 358, 3);
}
inline  ::capnp::Text::Builder TestDefaults::Builder::getTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 358, 3);
}
inline void TestDefaults::Builder::setTextField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestDefaults::Builder::initTextField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptTextField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestDefaults::Builder::disownTextField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasDataField() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasDataField() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Data::Reader TestDefaults::Reader::getDataField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader, 1 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 367, 3);
}
inline  ::capnp::Data::Builder TestDefaults::Builder::getDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder, 1 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 367, 3);
}
inline void TestDefaults::Builder::setDataField( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Data::Builder TestDefaults::Builder::initDataField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptDataField(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestDefaults::Builder::disownDataField() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasStructField() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasStructField() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Reader TestDefaults::Reader::getStructField() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _reader, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 375);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestDefaults::Builder::getStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _builder, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 375);
}
inline void TestDefaults::Builder::setStructField( ::capnproto_test::capnp::test::TestAllTypes::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestDefaults::Builder::initStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::init(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestDefaults::Builder::adoptStructField(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> TestDefaults::Builder::disownStructField() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasEnumField() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestEnum>(18 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasEnumField() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestEnum>(18 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestEnum TestDefaults::Reader::getEnumField() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS, 5u);
}

inline  ::capnproto_test::capnp::test::TestEnum TestDefaults::Builder::getEnumField() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS, 5u);
}
inline void TestDefaults::Builder::setEnumField( ::capnproto_test::capnp::test::TestEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestEnum>(
      18 * ::capnp::ELEMENTS, value, 5u);
}

inline bool TestDefaults::Reader::hasInterfaceField() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestDefaults::Builder::hasInterfaceField() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestDefaults::Reader::getInterfaceField() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestDefaults::Builder::getInterfaceField() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestDefaults::Builder::setInterfaceField( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestDefaults::Reader::hasVoidList() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasVoidList() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Reader TestDefaults::Reader::getVoidList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader, 3 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 609);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::getVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder, 3 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 609);
}
inline void TestDefaults::Builder::setVoidList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setVoidList(std::initializer_list< ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::initVoidList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptVoidList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestDefaults::Builder::disownVoidList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasBoolList() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasBoolList() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::List<bool>::Reader TestDefaults::Reader::getBoolList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader, 4 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 620);
}
inline  ::capnp::List<bool>::Builder TestDefaults::Builder::getBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder, 4 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 620);
}
inline void TestDefaults::Builder::setBoolList( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setBoolList(std::initializer_list<bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<bool>::Builder TestDefaults::Builder::initBoolList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptBoolList(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> TestDefaults::Builder::disownBoolList() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasInt8List() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasInt8List() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int8_t>::Reader TestDefaults::Reader::getInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _reader, 5 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 632);
}
inline  ::capnp::List< ::int8_t>::Builder TestDefaults::Builder::getInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::get(
      _builder, 5 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 632);
}
inline void TestDefaults::Builder::setInt8List( ::capnp::List< ::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setInt8List(std::initializer_list< ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int8_t>::Builder TestDefaults::Builder::initInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptInt8List(
    ::capnp::Orphan< ::capnp::List< ::int8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t>> TestDefaults::Builder::disownInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t>>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasInt16List() const {
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasInt16List() {
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int16_t>::Reader TestDefaults::Reader::getInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _reader, 6 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 644);
}
inline  ::capnp::List< ::int16_t>::Builder TestDefaults::Builder::getInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::get(
      _builder, 6 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 644);
}
inline void TestDefaults::Builder::setInt16List( ::capnp::List< ::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setInt16List(std::initializer_list< ::int16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int16_t>::Builder TestDefaults::Builder::initInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::init(
      _builder, 6 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptInt16List(
    ::capnp::Orphan< ::capnp::List< ::int16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t>> TestDefaults::Builder::disownInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t>>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasInt32List() const {
  return !_reader.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasInt32List() {
  return !_builder.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Reader TestDefaults::Reader::getInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader, 7 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 656);
}
inline  ::capnp::List< ::int32_t>::Builder TestDefaults::Builder::getInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder, 7 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 656);
}
inline void TestDefaults::Builder::setInt32List( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setInt32List(std::initializer_list< ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int32_t>::Builder TestDefaults::Builder::initInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder, 7 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptInt32List(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder, 7 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestDefaults::Builder::disownInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder, 7 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasInt64List() const {
  return !_reader.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasInt64List() {
  return !_builder.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int64_t>::Reader TestDefaults::Reader::getInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader, 8 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 668);
}
inline  ::capnp::List< ::int64_t>::Builder TestDefaults::Builder::getInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder, 8 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 668);
}
inline void TestDefaults::Builder::setInt64List( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setInt64List(std::initializer_list< ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int64_t>::Builder TestDefaults::Builder::initInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder, 8 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptInt64List(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder, 8 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> TestDefaults::Builder::disownInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder, 8 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasUInt8List() const {
  return !_reader.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasUInt8List() {
  return !_builder.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint8_t>::Reader TestDefaults::Reader::getUInt8List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader, 9 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 681);
}
inline  ::capnp::List< ::uint8_t>::Builder TestDefaults::Builder::getUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder, 9 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 681);
}
inline void TestDefaults::Builder::setUInt8List( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setUInt8List(std::initializer_list< ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint8_t>::Builder TestDefaults::Builder::initUInt8List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder, 9 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptUInt8List(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder, 9 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> TestDefaults::Builder::disownUInt8List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder, 9 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasUInt16List() const {
  return !_reader.isPointerFieldNull(10 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasUInt16List() {
  return !_builder.isPointerFieldNull(10 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint16_t>::Reader TestDefaults::Reader::getUInt16List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _reader, 10 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 693);
}
inline  ::capnp::List< ::uint16_t>::Builder TestDefaults::Builder::getUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::get(
      _builder, 10 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 693);
}
inline void TestDefaults::Builder::setUInt16List( ::capnp::List< ::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder, 10 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setUInt16List(std::initializer_list< ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::set(
      _builder, 10 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint16_t>::Builder TestDefaults::Builder::initUInt16List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::init(
      _builder, 10 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptUInt16List(
    ::capnp::Orphan< ::capnp::List< ::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::adopt(
      _builder, 10 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t>> TestDefaults::Builder::disownUInt16List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t>>::disown(
      _builder, 10 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasUInt32List() const {
  return !_reader.isPointerFieldNull(11 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasUInt32List() {
  return !_builder.isPointerFieldNull(11 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint32_t>::Reader TestDefaults::Reader::getUInt32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader, 11 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 705);
}
inline  ::capnp::List< ::uint32_t>::Builder TestDefaults::Builder::getUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder, 11 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 705);
}
inline void TestDefaults::Builder::setUInt32List( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder, 11 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setUInt32List(std::initializer_list< ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder, 11 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint32_t>::Builder TestDefaults::Builder::initUInt32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder, 11 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptUInt32List(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder, 11 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> TestDefaults::Builder::disownUInt32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder, 11 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasUInt64List() const {
  return !_reader.isPointerFieldNull(12 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasUInt64List() {
  return !_builder.isPointerFieldNull(12 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::uint64_t>::Reader TestDefaults::Reader::getUInt64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader, 12 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 717);
}
inline  ::capnp::List< ::uint64_t>::Builder TestDefaults::Builder::getUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder, 12 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 717);
}
inline void TestDefaults::Builder::setUInt64List( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder, 12 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setUInt64List(std::initializer_list< ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder, 12 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::uint64_t>::Builder TestDefaults::Builder::initUInt64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder, 12 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptUInt64List(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder, 12 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> TestDefaults::Builder::disownUInt64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder, 12 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasFloat32List() const {
  return !_reader.isPointerFieldNull(13 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasFloat32List() {
  return !_builder.isPointerFieldNull(13 * ::capnp::POINTERS);
}
inline  ::capnp::List<float>::Reader TestDefaults::Reader::getFloat32List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader, 13 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 729);
}
inline  ::capnp::List<float>::Builder TestDefaults::Builder::getFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder, 13 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 729);
}
inline void TestDefaults::Builder::setFloat32List( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder, 13 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setFloat32List(std::initializer_list<float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder, 13 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<float>::Builder TestDefaults::Builder::initFloat32List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder, 13 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptFloat32List(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder, 13 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> TestDefaults::Builder::disownFloat32List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder, 13 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasFloat64List() const {
  return !_reader.isPointerFieldNull(14 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasFloat64List() {
  return !_builder.isPointerFieldNull(14 * ::capnp::POINTERS);
}
inline  ::capnp::List<double>::Reader TestDefaults::Reader::getFloat64List() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader, 14 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 742);
}
inline  ::capnp::List<double>::Builder TestDefaults::Builder::getFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder, 14 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 742);
}
inline void TestDefaults::Builder::setFloat64List( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder, 14 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setFloat64List(std::initializer_list<double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder, 14 * ::capnp::POINTERS, value);
}
inline  ::capnp::List<double>::Builder TestDefaults::Builder::initFloat64List(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder, 14 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptFloat64List(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder, 14 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> TestDefaults::Builder::disownFloat64List() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder, 14 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasTextList() const {
  return !_reader.isPointerFieldNull(15 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasTextList() {
  return !_builder.isPointerFieldNull(15 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Text>::Reader TestDefaults::Reader::getTextList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader, 15 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 757);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestDefaults::Builder::getTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder, 15 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 757);
}
inline void TestDefaults::Builder::setTextList( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder, 15 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setTextList(std::initializer_list< ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder, 15 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Text>::Builder TestDefaults::Builder::initTextList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder, 15 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptTextList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder, 15 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> TestDefaults::Builder::disownTextList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder, 15 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasDataList() const {
  return !_reader.isPointerFieldNull(16 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasDataList() {
  return !_builder.isPointerFieldNull(16 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Data>::Reader TestDefaults::Reader::getDataList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _reader, 16 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 774);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestDefaults::Builder::getDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::get(
      _builder, 16 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 774);
}
inline void TestDefaults::Builder::setDataList( ::capnp::List< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder, 16 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setDataList(std::initializer_list< ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::set(
      _builder, 16 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Data>::Builder TestDefaults::Builder::initDataList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::init(
      _builder, 16 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptDataList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::adopt(
      _builder, 16 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data>> TestDefaults::Builder::disownDataList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data>>::disown(
      _builder, 16 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasStructList() const {
  return !_reader.isPointerFieldNull(17 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasStructList() {
  return !_builder.isPointerFieldNull(17 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader TestDefaults::Reader::getStructList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::get(
      _reader, 17 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 792);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder TestDefaults::Builder::getStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::get(
      _builder, 17 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 792);
}
inline void TestDefaults::Builder::setStructList( ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::set(
      _builder, 17 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Builder TestDefaults::Builder::initStructList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::init(
      _builder, 17 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptStructList(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::adopt(
      _builder, 17 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>> TestDefaults::Builder::disownStructList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::disown(
      _builder, 17 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasEnumList() const {
  return !_reader.isPointerFieldNull(18 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasEnumList() {
  return !_builder.isPointerFieldNull(18 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader TestDefaults::Reader::getEnumList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::get(
      _reader, 18 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 888);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder TestDefaults::Builder::getEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::get(
      _builder, 18 * ::capnp::POINTERS,
        ::capnp::schemas::s_eb3f9ebe98c73cb6.encodedNode + 888);
}
inline void TestDefaults::Builder::setEnumList( ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::set(
      _builder, 18 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setEnumList(std::initializer_list< ::capnproto_test::capnp::test::TestEnum> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::set(
      _builder, 18 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestEnum>::Builder TestDefaults::Builder::initEnumList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::init(
      _builder, 18 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptEnumList(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::adopt(
      _builder, 18 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>> TestDefaults::Builder::disownEnumList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestEnum>>::disown(
      _builder, 18 * ::capnp::POINTERS);
}

inline bool TestDefaults::Reader::hasInterfaceList() const {
  return !_reader.isPointerFieldNull(19 * ::capnp::POINTERS);
}
inline bool TestDefaults::Builder::hasInterfaceList() {
  return !_builder.isPointerFieldNull(19 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Reader TestDefaults::Reader::getInterfaceList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _reader, 19 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::getInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::get(
      _builder, 19 * ::capnp::POINTERS);
}
inline void TestDefaults::Builder::setInterfaceList( ::capnp::List< ::capnp::Void>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 19 * ::capnp::POINTERS, value);
}
inline void TestDefaults::Builder::setInterfaceList(std::initializer_list< ::capnp::Void> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::set(
      _builder, 19 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::Void>::Builder TestDefaults::Builder::initInterfaceList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::init(
      _builder, 19 * ::capnp::POINTERS, size);
}
inline void TestDefaults::Builder::adoptInterfaceList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Void>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::adopt(
      _builder, 19 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Void>> TestDefaults::Builder::disownInterfaceList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Void>>::disown(
      _builder, 19 * ::capnp::POINTERS);
}

inline bool TestObject::Reader::hasObjectField() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestObject::Builder::hasObjectField() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
template <typename T>
inline typename T::Reader TestObject::Reader::getObjectField() const {
  return ::capnp::_::PointerHelpers<T>::get(
      _reader, 0 * ::capnp::POINTERS);
}
template <typename T>
inline typename T::Builder TestObject::Builder::getObjectField() {
  return ::capnp::_::PointerHelpers<T>::get(
      _builder, 0 * ::capnp::POINTERS);
}
template <typename T, typename Param>
inline typename T::Reader TestObject::Reader::getObjectField(Param&& param) const {
  return ::capnp::_::PointerHelpers<T>::getDynamic(
      _reader, 0 * ::capnp::POINTERS, ::kj::fwd<Param>(param));
}
template <typename T, typename Param>
inline typename T::Builder TestObject::Builder::getObjectField(Param&& param) {
  return ::capnp::_::PointerHelpers<T>::getDynamic(
      _builder, 0 * ::capnp::POINTERS, ::kj::fwd<Param>(param));
}
template <typename T>
inline void TestObject::Builder::setObjectField(typename T::Reader value) {
  ::capnp::_::PointerHelpers<T>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
template <typename T, typename U>inline void TestObject::Builder::setObjectField(std::initializer_list<U> value) {
  ::capnp::_::PointerHelpers<T>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
template <typename T, typename... Params>
inline typename T::Builder TestObject::Builder::initObjectField(Params&&... params) {
  return ::capnp::_::PointerHelpers<T>::init(
      _builder, 0 * ::capnp::POINTERS, ::kj::fwd<Params>(params)...);
}
template <typename T>
inline void TestObject::Builder::adoptObjectField(::capnp::Orphan<T>&& value) {
  ::capnp::_::PointerHelpers<T>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
template <typename T, typename... Params>
inline ::capnp::Orphan<T> TestObject::Builder::disownObjectField(Params&&... params) {
  return ::capnp::_::PointerHelpers<T>::disown(
      _builder, 0 * ::capnp::POINTERS, ::kj::fwd<Params>(params)...);
}

inline bool TestOutOfOrder::Reader::hasQux() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasQux() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getQux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setQux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initQux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasGrault() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasGrault() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasBar() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasBar() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getBar() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setBar( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptBar(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasFoo() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasFoo() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setFoo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasCorge() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasCorge() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getCorge() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getCorge() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 4 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setCorge( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initCorge(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptCorge(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownCorge() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasWaldo() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasWaldo() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getWaldo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setWaldo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initWaldo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptWaldo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasQuux() const {
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasQuux() {
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getQuux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getQuux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setQuux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initQuux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 6 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptQuux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownQuux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasGarply() const {
  return !_reader.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasGarply() {
  return !_builder.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 7 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 7 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 7 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 7 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 7 * ::capnp::POINTERS);
}

inline bool TestOutOfOrder::Reader::hasBaz() const {
  return !_reader.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline bool TestOutOfOrder::Builder::hasBaz() {
  return !_builder.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOutOfOrder::Reader::getBaz() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 8 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::getBaz() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 8 * ::capnp::POINTERS);
}
inline void TestOutOfOrder::Builder::setBaz( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOutOfOrder::Builder::initBaz(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 8 * ::capnp::POINTERS, size);
}
inline void TestOutOfOrder::Builder::adoptBaz(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 8 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOutOfOrder::Builder::disownBaz() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 8 * ::capnp::POINTERS);
}

inline bool TestUnion::Reader::hasUnion0() const {
  return _reader.getDataField< ::uint16_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestUnion::Builder::hasUnion0() {
  return _builder.getDataField< ::uint16_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline TestUnion::Union0::Reader TestUnion::Reader::getUnion0() const {
  return TestUnion::Union0::Reader(_reader);
}
inline TestUnion::Union0::Builder TestUnion::Builder::getUnion0() {
  return TestUnion::Union0::Builder(_builder);
}
inline TestUnion::Union0::Builder TestUnion::Builder::initUnion0() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  return TestUnion::Union0::Builder(_builder);
}
inline bool TestUnion::Reader::hasUnion1() const {
  return _reader.getDataField< ::uint16_t>(1 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField<bool>(129 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint8_t>(17 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(9 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint32_t>(5 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(3 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnion::Builder::hasUnion1() {
  return _builder.getDataField< ::uint16_t>(1 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField<bool>(129 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint8_t>(17 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(9 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint32_t>(5 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(3 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline TestUnion::Union1::Reader TestUnion::Reader::getUnion1() const {
  return TestUnion::Union1::Reader(_reader);
}
inline TestUnion::Union1::Builder TestUnion::Builder::getUnion1() {
  return TestUnion::Union1::Builder(_builder);
}
inline TestUnion::Union1::Builder TestUnion::Builder::initUnion1() {
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(129 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(17 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(9 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(5 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return TestUnion::Union1::Builder(_builder);
}
inline bool TestUnion::Reader::hasUnion2() const {
  return _reader.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField<bool>(256 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint8_t>(33 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(18 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint32_t>(10 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(6 * ::capnp::ELEMENTS) != 0;
}
inline bool TestUnion::Builder::hasUnion2() {
  return _builder.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField<bool>(256 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint8_t>(33 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(18 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint32_t>(10 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(6 * ::capnp::ELEMENTS) != 0;
}
inline TestUnion::Union2::Reader TestUnion::Reader::getUnion2() const {
  return TestUnion::Union2::Reader(_reader);
}
inline TestUnion::Union2::Builder TestUnion::Builder::getUnion2() {
  return TestUnion::Union2::Builder(_builder);
}
inline TestUnion::Union2::Builder TestUnion::Builder::initUnion2() {
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(256 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(33 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(18 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(10 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(6 * ::capnp::ELEMENTS, 0);
  return TestUnion::Union2::Builder(_builder);
}
inline bool TestUnion::Reader::hasUnion3() const {
  return _reader.getDataField< ::uint16_t>(3 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField<bool>(257 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint8_t>(34 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(19 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint32_t>(11 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(7 * ::capnp::ELEMENTS) != 0;
}
inline bool TestUnion::Builder::hasUnion3() {
  return _builder.getDataField< ::uint16_t>(3 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField<bool>(257 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint8_t>(34 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(19 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint32_t>(11 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(7 * ::capnp::ELEMENTS) != 0;
}
inline TestUnion::Union3::Reader TestUnion::Reader::getUnion3() const {
  return TestUnion::Union3::Reader(_reader);
}
inline TestUnion::Union3::Builder TestUnion::Builder::getUnion3() {
  return TestUnion::Union3::Builder(_builder);
}
inline TestUnion::Union3::Builder TestUnion::Builder::initUnion3() {
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(257 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint8_t>(34 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(19 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(11 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(7 * ::capnp::ELEMENTS, 0);
  return TestUnion::Union3::Builder(_builder);
}
inline bool TestUnion::Reader::hasBit0() const {
  return _reader.hasDataField<bool>(128 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit0() {
  return _builder.hasDataField<bool>(128 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit0() const {
  return _reader.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit0() {
  return _builder.getDataField<bool>(
      128 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit0(bool value) {
  _builder.setDataField<bool>(
      128 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit2() const {
  return _reader.hasDataField<bool>(130 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit2() {
  return _builder.hasDataField<bool>(130 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit2() const {
  return _reader.getDataField<bool>(
      130 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit2() {
  return _builder.getDataField<bool>(
      130 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit2(bool value) {
  _builder.setDataField<bool>(
      130 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit3() const {
  return _reader.hasDataField<bool>(131 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit3() {
  return _builder.hasDataField<bool>(131 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit3() const {
  return _reader.getDataField<bool>(
      131 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit3() {
  return _builder.getDataField<bool>(
      131 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit3(bool value) {
  _builder.setDataField<bool>(
      131 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit4() const {
  return _reader.hasDataField<bool>(132 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit4() {
  return _builder.hasDataField<bool>(132 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit4() const {
  return _reader.getDataField<bool>(
      132 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit4() {
  return _builder.getDataField<bool>(
      132 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit4(bool value) {
  _builder.setDataField<bool>(
      132 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit5() const {
  return _reader.hasDataField<bool>(133 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit5() {
  return _builder.hasDataField<bool>(133 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit5() const {
  return _reader.getDataField<bool>(
      133 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit5() {
  return _builder.getDataField<bool>(
      133 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit5(bool value) {
  _builder.setDataField<bool>(
      133 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit6() const {
  return _reader.hasDataField<bool>(134 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit6() {
  return _builder.hasDataField<bool>(134 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit6() const {
  return _reader.getDataField<bool>(
      134 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit6() {
  return _builder.getDataField<bool>(
      134 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit6(bool value) {
  _builder.setDataField<bool>(
      134 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasBit7() const {
  return _reader.hasDataField<bool>(135 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasBit7() {
  return _builder.hasDataField<bool>(135 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Reader::getBit7() const {
  return _reader.getDataField<bool>(
      135 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::getBit7() {
  return _builder.getDataField<bool>(
      135 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setBit7(bool value) {
  _builder.setDataField<bool>(
      135 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Reader::hasByte0() const {
  return _reader.hasDataField< ::uint8_t>(35 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Builder::hasByte0() {
  return _builder.hasDataField< ::uint8_t>(35 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestUnion::Reader::getByte0() const {
  return _reader.getDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestUnion::Builder::getByte0() {
  return _builder.getDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS);
}
inline void TestUnion::Builder::setByte0( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      35 * ::capnp::ELEMENTS, value);
}

inline TestUnion::Union0::Which TestUnion::Union0::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline TestUnion::Union0::Which TestUnion::Union0::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Reader::isU0f0s0() const {
  return which() == TestUnion::Union0::U0F0S0;
}
inline bool TestUnion::Union0::Builder::isU0f0s0() {
  return which() == TestUnion::Union0::U0F0S0;
}
inline bool TestUnion::Union0::Reader::hasU0f0s0() const {
  if (which() != TestUnion::Union0::U0F0S0) return false;
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s0() {
  if (which() != TestUnion::Union0::U0F0S0) return false;
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestUnion::Union0::Reader::getU0f0s0() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S0,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union0::Builder::getU0f0s0() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S0,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s1() const {
  return which() == TestUnion::Union0::U0F0S1;
}
inline bool TestUnion::Union0::Builder::isU0f0s1() {
  return which() == TestUnion::Union0::U0F0S1;
}
inline bool TestUnion::Union0::Reader::hasU0f0s1() const {
  if (which() != TestUnion::Union0::U0F0S1) return false;
  return _reader.hasDataField<bool>(64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s1() {
  if (which() != TestUnion::Union0::U0F0S1) return false;
  return _builder.hasDataField<bool>(64 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union0::Reader::getU0f0s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::getU0f0s1() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s1(bool value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S1);
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s8() const {
  return which() == TestUnion::Union0::U0F0S8;
}
inline bool TestUnion::Union0::Builder::isU0f0s8() {
  return which() == TestUnion::Union0::U0F0S8;
}
inline bool TestUnion::Union0::Reader::hasU0f0s8() const {
  if (which() != TestUnion::Union0::U0F0S8) return false;
  return _reader.hasDataField< ::int8_t>(8 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s8() {
  if (which() != TestUnion::Union0::U0F0S8) return false;
  return _builder.hasDataField< ::int8_t>(8 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union0::Reader::getU0f0s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union0::Builder::getU0f0s8() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S8);
  _builder.setDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s16() const {
  return which() == TestUnion::Union0::U0F0S16;
}
inline bool TestUnion::Union0::Builder::isU0f0s16() {
  return which() == TestUnion::Union0::U0F0S16;
}
inline bool TestUnion::Union0::Reader::hasU0f0s16() const {
  if (which() != TestUnion::Union0::U0F0S16) return false;
  return _reader.hasDataField< ::int16_t>(4 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s16() {
  if (which() != TestUnion::Union0::U0F0S16) return false;
  return _builder.hasDataField< ::int16_t>(4 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union0::Reader::getU0f0s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union0::Builder::getU0f0s16() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S16);
  _builder.setDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s32() const {
  return which() == TestUnion::Union0::U0F0S32;
}
inline bool TestUnion::Union0::Builder::isU0f0s32() {
  return which() == TestUnion::Union0::U0F0S32;
}
inline bool TestUnion::Union0::Reader::hasU0f0s32() const {
  if (which() != TestUnion::Union0::U0F0S32) return false;
  return _reader.hasDataField< ::int32_t>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s32() {
  if (which() != TestUnion::Union0::U0F0S32) return false;
  return _builder.hasDataField< ::int32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union0::Reader::getU0f0s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union0::Builder::getU0f0s32() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S32);
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0s64() const {
  return which() == TestUnion::Union0::U0F0S64;
}
inline bool TestUnion::Union0::Builder::isU0f0s64() {
  return which() == TestUnion::Union0::U0F0S64;
}
inline bool TestUnion::Union0::Reader::hasU0f0s64() const {
  if (which() != TestUnion::Union0::U0F0S64) return false;
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f0s64() {
  if (which() != TestUnion::Union0::U0F0S64) return false;
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union0::Reader::getU0f0s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union0::Builder::getU0f0s64() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0S64);
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f0sp() const {
  return which() == TestUnion::Union0::U0F0SP;
}
inline bool TestUnion::Union0::Builder::isU0f0sp() {
  return which() == TestUnion::Union0::U0F0SP;
}
inline bool TestUnion::Union0::Reader::hasU0f0sp() const {
  if (which() != TestUnion::Union0::U0F0SP) return false;
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestUnion::Union0::Builder::hasU0f0sp() {
  if (which() != TestUnion::Union0::U0F0SP) return false;
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnion::Union0::Reader::getU0f0sp() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::getU0f0sp() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestUnion::Union0::Builder::setU0f0sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::initU0f0sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0SP);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestUnion::Union0::Builder::adoptU0f0sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F0SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union0::Builder::disownU0f0sp() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestUnion::Union0::Reader::isU0f1s0() const {
  return which() == TestUnion::Union0::U0F1S0;
}
inline bool TestUnion::Union0::Builder::isU0f1s0() {
  return which() == TestUnion::Union0::U0F1S0;
}
inline bool TestUnion::Union0::Reader::hasU0f1s0() const {
  if (which() != TestUnion::Union0::U0F1S0) return false;
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s0() {
  if (which() != TestUnion::Union0::U0F1S0) return false;
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestUnion::Union0::Reader::getU0f1s0() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S0,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union0::Builder::getU0f1s0() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S0,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s1() const {
  return which() == TestUnion::Union0::U0F1S1;
}
inline bool TestUnion::Union0::Builder::isU0f1s1() {
  return which() == TestUnion::Union0::U0F1S1;
}
inline bool TestUnion::Union0::Reader::hasU0f1s1() const {
  if (which() != TestUnion::Union0::U0F1S1) return false;
  return _reader.hasDataField<bool>(64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s1() {
  if (which() != TestUnion::Union0::U0F1S1) return false;
  return _builder.hasDataField<bool>(64 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union0::Reader::getU0f1s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::getU0f1s1() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s1(bool value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S1);
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s8() const {
  return which() == TestUnion::Union0::U0F1S8;
}
inline bool TestUnion::Union0::Builder::isU0f1s8() {
  return which() == TestUnion::Union0::U0F1S8;
}
inline bool TestUnion::Union0::Reader::hasU0f1s8() const {
  if (which() != TestUnion::Union0::U0F1S8) return false;
  return _reader.hasDataField< ::int8_t>(8 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s8() {
  if (which() != TestUnion::Union0::U0F1S8) return false;
  return _builder.hasDataField< ::int8_t>(8 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union0::Reader::getU0f1s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union0::Builder::getU0f1s8() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S8);
  _builder.setDataField< ::int8_t>(
      8 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s16() const {
  return which() == TestUnion::Union0::U0F1S16;
}
inline bool TestUnion::Union0::Builder::isU0f1s16() {
  return which() == TestUnion::Union0::U0F1S16;
}
inline bool TestUnion::Union0::Reader::hasU0f1s16() const {
  if (which() != TestUnion::Union0::U0F1S16) return false;
  return _reader.hasDataField< ::int16_t>(4 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s16() {
  if (which() != TestUnion::Union0::U0F1S16) return false;
  return _builder.hasDataField< ::int16_t>(4 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union0::Reader::getU0f1s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union0::Builder::getU0f1s16() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S16);
  _builder.setDataField< ::int16_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s32() const {
  return which() == TestUnion::Union0::U0F1S32;
}
inline bool TestUnion::Union0::Builder::isU0f1s32() {
  return which() == TestUnion::Union0::U0F1S32;
}
inline bool TestUnion::Union0::Reader::hasU0f1s32() const {
  if (which() != TestUnion::Union0::U0F1S32) return false;
  return _reader.hasDataField< ::int32_t>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s32() {
  if (which() != TestUnion::Union0::U0F1S32) return false;
  return _builder.hasDataField< ::int32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union0::Reader::getU0f1s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union0::Builder::getU0f1s32() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S32);
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1s64() const {
  return which() == TestUnion::Union0::U0F1S64;
}
inline bool TestUnion::Union0::Builder::isU0f1s64() {
  return which() == TestUnion::Union0::U0F1S64;
}
inline bool TestUnion::Union0::Reader::hasU0f1s64() const {
  if (which() != TestUnion::Union0::U0F1S64) return false;
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union0::Builder::hasU0f1s64() {
  if (which() != TestUnion::Union0::U0F1S64) return false;
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union0::Reader::getU0f1s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union0::Builder::getU0f1s64() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union0::Builder::setU0f1s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1S64);
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union0::Reader::isU0f1sp() const {
  return which() == TestUnion::Union0::U0F1SP;
}
inline bool TestUnion::Union0::Builder::isU0f1sp() {
  return which() == TestUnion::Union0::U0F1SP;
}
inline bool TestUnion::Union0::Reader::hasU0f1sp() const {
  if (which() != TestUnion::Union0::U0F1SP) return false;
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestUnion::Union0::Builder::hasU0f1sp() {
  if (which() != TestUnion::Union0::U0F1SP) return false;
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnion::Union0::Reader::getU0f1sp() const {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::getU0f1sp() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestUnion::Union0::Builder::setU0f1sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnion::Union0::Builder::initU0f1sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1SP);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestUnion::Union0::Builder::adoptU0f1sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union0::Which>(
      0 * ::capnp::ELEMENTS, TestUnion::Union0::U0F1SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union0::Builder::disownU0f1sp() {
  KJ_IREQUIRE(which() == TestUnion::Union0::U0F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline TestUnion::Union1::Which TestUnion::Union1::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline TestUnion::Union1::Which TestUnion::Union1::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Reader::isU1f0s0() const {
  return which() == TestUnion::Union1::U1F0S0;
}
inline bool TestUnion::Union1::Builder::isU1f0s0() {
  return which() == TestUnion::Union1::U1F0S0;
}
inline bool TestUnion::Union1::Reader::hasU1f0s0() const {
  if (which() != TestUnion::Union1::U1F0S0) return false;
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s0() {
  if (which() != TestUnion::Union1::U1F0S0) return false;
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestUnion::Union1::Reader::getU1f0s0() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S0,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union1::Builder::getU1f0s0() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S0,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s1() const {
  return which() == TestUnion::Union1::U1F0S1;
}
inline bool TestUnion::Union1::Builder::isU1f0s1() {
  return which() == TestUnion::Union1::U1F0S1;
}
inline bool TestUnion::Union1::Reader::hasU1f0s1() const {
  if (which() != TestUnion::Union1::U1F0S1) return false;
  return _reader.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s1() {
  if (which() != TestUnion::Union1::U1F0S1) return false;
  return _builder.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union1::Reader::getU1f0s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f0s1() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s1() const {
  return which() == TestUnion::Union1::U1F1S1;
}
inline bool TestUnion::Union1::Builder::isU1f1s1() {
  return which() == TestUnion::Union1::U1F1S1;
}
inline bool TestUnion::Union1::Reader::hasU1f1s1() const {
  if (which() != TestUnion::Union1::U1F1S1) return false;
  return _reader.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f1s1() {
  if (which() != TestUnion::Union1::U1F1S1) return false;
  return _builder.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union1::Reader::getU1f1s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f1s1() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1S1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s8() const {
  return which() == TestUnion::Union1::U1F0S8;
}
inline bool TestUnion::Union1::Builder::isU1f0s8() {
  return which() == TestUnion::Union1::U1F0S8;
}
inline bool TestUnion::Union1::Reader::hasU1f0s8() const {
  if (which() != TestUnion::Union1::U1F0S8) return false;
  return _reader.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s8() {
  if (which() != TestUnion::Union1::U1F0S8) return false;
  return _builder.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f0s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f0s8() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s8() const {
  return which() == TestUnion::Union1::U1F1S8;
}
inline bool TestUnion::Union1::Builder::isU1f1s8() {
  return which() == TestUnion::Union1::U1F1S8;
}
inline bool TestUnion::Union1::Reader::hasU1f1s8() const {
  if (which() != TestUnion::Union1::U1F1S8) return false;
  return _reader.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f1s8() {
  if (which() != TestUnion::Union1::U1F1S8) return false;
  return _builder.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f1s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f1s8() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1S8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s16() const {
  return which() == TestUnion::Union1::U1F0S16;
}
inline bool TestUnion::Union1::Builder::isU1f0s16() {
  return which() == TestUnion::Union1::U1F0S16;
}
inline bool TestUnion::Union1::Reader::hasU1f0s16() const {
  if (which() != TestUnion::Union1::U1F0S16) return false;
  return _reader.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s16() {
  if (which() != TestUnion::Union1::U1F0S16) return false;
  return _builder.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f0s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f0s16() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s16() const {
  return which() == TestUnion::Union1::U1F1S16;
}
inline bool TestUnion::Union1::Builder::isU1f1s16() {
  return which() == TestUnion::Union1::U1F1S16;
}
inline bool TestUnion::Union1::Reader::hasU1f1s16() const {
  if (which() != TestUnion::Union1::U1F1S16) return false;
  return _reader.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f1s16() {
  if (which() != TestUnion::Union1::U1F1S16) return false;
  return _builder.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f1s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f1s16() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1S16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s32() const {
  return which() == TestUnion::Union1::U1F0S32;
}
inline bool TestUnion::Union1::Builder::isU1f0s32() {
  return which() == TestUnion::Union1::U1F0S32;
}
inline bool TestUnion::Union1::Reader::hasU1f0s32() const {
  if (which() != TestUnion::Union1::U1F0S32) return false;
  return _reader.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s32() {
  if (which() != TestUnion::Union1::U1F0S32) return false;
  return _builder.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f0s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f0s32() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s32() const {
  return which() == TestUnion::Union1::U1F1S32;
}
inline bool TestUnion::Union1::Builder::isU1f1s32() {
  return which() == TestUnion::Union1::U1F1S32;
}
inline bool TestUnion::Union1::Reader::hasU1f1s32() const {
  if (which() != TestUnion::Union1::U1F1S32) return false;
  return _reader.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f1s32() {
  if (which() != TestUnion::Union1::U1F1S32) return false;
  return _builder.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f1s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f1s32() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1S32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0s64() const {
  return which() == TestUnion::Union1::U1F0S64;
}
inline bool TestUnion::Union1::Builder::isU1f0s64() {
  return which() == TestUnion::Union1::U1F0S64;
}
inline bool TestUnion::Union1::Reader::hasU1f0s64() const {
  if (which() != TestUnion::Union1::U1F0S64) return false;
  return _reader.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f0s64() {
  if (which() != TestUnion::Union1::U1F0S64) return false;
  return _builder.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f0s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f0s64() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0S64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f1s64() const {
  return which() == TestUnion::Union1::U1F1S64;
}
inline bool TestUnion::Union1::Builder::isU1f1s64() {
  return which() == TestUnion::Union1::U1F1S64;
}
inline bool TestUnion::Union1::Reader::hasU1f1s64() const {
  if (which() != TestUnion::Union1::U1F1S64) return false;
  return _reader.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f1s64() {
  if (which() != TestUnion::Union1::U1F1S64) return false;
  return _builder.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f1s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f1s64() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f1s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1S64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f0sp() const {
  return which() == TestUnion::Union1::U1F0SP;
}
inline bool TestUnion::Union1::Builder::isU1f0sp() {
  return which() == TestUnion::Union1::U1F0SP;
}
inline bool TestUnion::Union1::Reader::hasU1f0sp() const {
  if (which() != TestUnion::Union1::U1F0SP) return false;
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnion::Union1::Builder::hasU1f0sp() {
  if (which() != TestUnion::Union1::U1F0SP) return false;
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f0sp() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f0sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestUnion::Union1::Builder::setU1f0sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f0sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0SP);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestUnion::Union1::Builder::adoptU1f0sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F0SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f0sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F0SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestUnion::Union1::Reader::isU1f1sp() const {
  return which() == TestUnion::Union1::U1F1SP;
}
inline bool TestUnion::Union1::Builder::isU1f1sp() {
  return which() == TestUnion::Union1::U1F1SP;
}
inline bool TestUnion::Union1::Reader::hasU1f1sp() const {
  if (which() != TestUnion::Union1::U1F1SP) return false;
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnion::Union1::Builder::hasU1f1sp() {
  if (which() != TestUnion::Union1::U1F1SP) return false;
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f1sp() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f1sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestUnion::Union1::Builder::setU1f1sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f1sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1SP);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestUnion::Union1::Builder::adoptU1f1sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F1SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f1sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F1SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestUnion::Union1::Reader::isU1f2s0() const {
  return which() == TestUnion::Union1::U1F2S0;
}
inline bool TestUnion::Union1::Builder::isU1f2s0() {
  return which() == TestUnion::Union1::U1F2S0;
}
inline bool TestUnion::Union1::Reader::hasU1f2s0() const {
  if (which() != TestUnion::Union1::U1F2S0) return false;
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s0() {
  if (which() != TestUnion::Union1::U1F2S0) return false;
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestUnion::Union1::Reader::getU1f2s0() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S0,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestUnion::Union1::Builder::getU1f2s0() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S0,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s0( ::capnp::Void value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S0);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s1() const {
  return which() == TestUnion::Union1::U1F2S1;
}
inline bool TestUnion::Union1::Builder::isU1f2s1() {
  return which() == TestUnion::Union1::U1F2S1;
}
inline bool TestUnion::Union1::Reader::hasU1f2s1() const {
  if (which() != TestUnion::Union1::U1F2S1) return false;
  return _reader.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s1() {
  if (which() != TestUnion::Union1::U1F2S1) return false;
  return _builder.hasDataField<bool>(129 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union1::Reader::getU1f2s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::getU1f2s1() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      129 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s1(bool value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S1);
  _builder.setDataField<bool>(
      129 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s8() const {
  return which() == TestUnion::Union1::U1F2S8;
}
inline bool TestUnion::Union1::Builder::isU1f2s8() {
  return which() == TestUnion::Union1::U1F2S8;
}
inline bool TestUnion::Union1::Reader::hasU1f2s8() const {
  if (which() != TestUnion::Union1::U1F2S8) return false;
  return _reader.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s8() {
  if (which() != TestUnion::Union1::U1F2S8) return false;
  return _builder.hasDataField< ::int8_t>(17 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union1::Reader::getU1f2s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union1::Builder::getU1f2s8() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S8);
  _builder.setDataField< ::int8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s16() const {
  return which() == TestUnion::Union1::U1F2S16;
}
inline bool TestUnion::Union1::Builder::isU1f2s16() {
  return which() == TestUnion::Union1::U1F2S16;
}
inline bool TestUnion::Union1::Reader::hasU1f2s16() const {
  if (which() != TestUnion::Union1::U1F2S16) return false;
  return _reader.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s16() {
  if (which() != TestUnion::Union1::U1F2S16) return false;
  return _builder.hasDataField< ::int16_t>(9 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union1::Reader::getU1f2s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union1::Builder::getU1f2s16() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S16);
  _builder.setDataField< ::int16_t>(
      9 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s32() const {
  return which() == TestUnion::Union1::U1F2S32;
}
inline bool TestUnion::Union1::Builder::isU1f2s32() {
  return which() == TestUnion::Union1::U1F2S32;
}
inline bool TestUnion::Union1::Reader::hasU1f2s32() const {
  if (which() != TestUnion::Union1::U1F2S32) return false;
  return _reader.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s32() {
  if (which() != TestUnion::Union1::U1F2S32) return false;
  return _builder.hasDataField< ::int32_t>(5 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union1::Reader::getU1f2s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union1::Builder::getU1f2s32() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S32);
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2s64() const {
  return which() == TestUnion::Union1::U1F2S64;
}
inline bool TestUnion::Union1::Builder::isU1f2s64() {
  return which() == TestUnion::Union1::U1F2S64;
}
inline bool TestUnion::Union1::Reader::hasU1f2s64() const {
  if (which() != TestUnion::Union1::U1F2S64) return false;
  return _reader.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union1::Builder::hasU1f2s64() {
  if (which() != TestUnion::Union1::U1F2S64) return false;
  return _builder.hasDataField< ::int64_t>(3 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union1::Reader::getU1f2s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union1::Builder::getU1f2s64() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union1::Builder::setU1f2s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2S64);
  _builder.setDataField< ::int64_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union1::Reader::isU1f2sp() const {
  return which() == TestUnion::Union1::U1F2SP;
}
inline bool TestUnion::Union1::Builder::isU1f2sp() {
  return which() == TestUnion::Union1::U1F2SP;
}
inline bool TestUnion::Union1::Reader::hasU1f2sp() const {
  if (which() != TestUnion::Union1::U1F2SP) return false;
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnion::Union1::Builder::hasU1f2sp() {
  if (which() != TestUnion::Union1::U1F2SP) return false;
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnion::Union1::Reader::getU1f2sp() const {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::getU1f2sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestUnion::Union1::Builder::setU1f2sp( ::capnp::Text::Reader value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnion::Union1::Builder::initU1f2sp(unsigned int size) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2SP);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestUnion::Union1::Builder::adoptU1f2sp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestUnion::Union1::Which>(
      1 * ::capnp::ELEMENTS, TestUnion::Union1::U1F2SP);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnion::Union1::Builder::disownU1f2sp() {
  KJ_IREQUIRE(which() == TestUnion::Union1::U1F2SP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline TestUnion::Union2::Which TestUnion::Union2::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline TestUnion::Union2::Which TestUnion::Union2::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Reader::isU2f0s1() const {
  return which() == TestUnion::Union2::U2F0S1;
}
inline bool TestUnion::Union2::Builder::isU2f0s1() {
  return which() == TestUnion::Union2::U2F0S1;
}
inline bool TestUnion::Union2::Reader::hasU2f0s1() const {
  if (which() != TestUnion::Union2::U2F0S1) return false;
  return _reader.hasDataField<bool>(256 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::hasU2f0s1() {
  if (which() != TestUnion::Union2::U2F0S1) return false;
  return _builder.hasDataField<bool>(256 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union2::Reader::getU2f0s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::getU2f0s1() {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      256 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s1(bool value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2F0S1);
  _builder.setDataField<bool>(
      256 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s8() const {
  return which() == TestUnion::Union2::U2F0S8;
}
inline bool TestUnion::Union2::Builder::isU2f0s8() {
  return which() == TestUnion::Union2::U2F0S8;
}
inline bool TestUnion::Union2::Reader::hasU2f0s8() const {
  if (which() != TestUnion::Union2::U2F0S8) return false;
  return _reader.hasDataField< ::int8_t>(33 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::hasU2f0s8() {
  if (which() != TestUnion::Union2::U2F0S8) return false;
  return _builder.hasDataField< ::int8_t>(33 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union2::Reader::getU2f0s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union2::Builder::getU2f0s8() {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2F0S8);
  _builder.setDataField< ::int8_t>(
      33 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s16() const {
  return which() == TestUnion::Union2::U2F0S16;
}
inline bool TestUnion::Union2::Builder::isU2f0s16() {
  return which() == TestUnion::Union2::U2F0S16;
}
inline bool TestUnion::Union2::Reader::hasU2f0s16() const {
  if (which() != TestUnion::Union2::U2F0S16) return false;
  return _reader.hasDataField< ::int16_t>(18 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::hasU2f0s16() {
  if (which() != TestUnion::Union2::U2F0S16) return false;
  return _builder.hasDataField< ::int16_t>(18 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union2::Reader::getU2f0s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union2::Builder::getU2f0s16() {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2F0S16);
  _builder.setDataField< ::int16_t>(
      18 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s32() const {
  return which() == TestUnion::Union2::U2F0S32;
}
inline bool TestUnion::Union2::Builder::isU2f0s32() {
  return which() == TestUnion::Union2::U2F0S32;
}
inline bool TestUnion::Union2::Reader::hasU2f0s32() const {
  if (which() != TestUnion::Union2::U2F0S32) return false;
  return _reader.hasDataField< ::int32_t>(10 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::hasU2f0s32() {
  if (which() != TestUnion::Union2::U2F0S32) return false;
  return _builder.hasDataField< ::int32_t>(10 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union2::Reader::getU2f0s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union2::Builder::getU2f0s32() {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2F0S32);
  _builder.setDataField< ::int32_t>(
      10 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union2::Reader::isU2f0s64() const {
  return which() == TestUnion::Union2::U2F0S64;
}
inline bool TestUnion::Union2::Builder::isU2f0s64() {
  return which() == TestUnion::Union2::U2F0S64;
}
inline bool TestUnion::Union2::Reader::hasU2f0s64() const {
  if (which() != TestUnion::Union2::U2F0S64) return false;
  return _reader.hasDataField< ::int64_t>(6 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union2::Builder::hasU2f0s64() {
  if (which() != TestUnion::Union2::U2F0S64) return false;
  return _builder.hasDataField< ::int64_t>(6 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union2::Reader::getU2f0s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union2::Builder::getU2f0s64() {
  KJ_IREQUIRE(which() == TestUnion::Union2::U2F0S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union2::Builder::setU2f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union2::Which>(
      2 * ::capnp::ELEMENTS, TestUnion::Union2::U2F0S64);
  _builder.setDataField< ::int64_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline TestUnion::Union3::Which TestUnion::Union3::Reader::which() const {
  return _reader.getDataField<Which>(3 * ::capnp::ELEMENTS);
}
inline TestUnion::Union3::Which TestUnion::Union3::Builder::which() {
  return _builder.getDataField<Which>(3 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Reader::isU3f0s1() const {
  return which() == TestUnion::Union3::U3F0S1;
}
inline bool TestUnion::Union3::Builder::isU3f0s1() {
  return which() == TestUnion::Union3::U3F0S1;
}
inline bool TestUnion::Union3::Reader::hasU3f0s1() const {
  if (which() != TestUnion::Union3::U3F0S1) return false;
  return _reader.hasDataField<bool>(257 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::hasU3f0s1() {
  if (which() != TestUnion::Union3::U3F0S1) return false;
  return _builder.hasDataField<bool>(257 * ::capnp::ELEMENTS);
}
inline bool TestUnion::Union3::Reader::getU3f0s1() const {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S1,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::getU3f0s1() {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S1,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      257 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s1(bool value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3F0S1);
  _builder.setDataField<bool>(
      257 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s8() const {
  return which() == TestUnion::Union3::U3F0S8;
}
inline bool TestUnion::Union3::Builder::isU3f0s8() {
  return which() == TestUnion::Union3::U3F0S8;
}
inline bool TestUnion::Union3::Reader::hasU3f0s8() const {
  if (which() != TestUnion::Union3::U3F0S8) return false;
  return _reader.hasDataField< ::int8_t>(34 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::hasU3f0s8() {
  if (which() != TestUnion::Union3::U3F0S8) return false;
  return _builder.hasDataField< ::int8_t>(34 * ::capnp::ELEMENTS);
}
inline  ::int8_t TestUnion::Union3::Reader::getU3f0s8() const {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S8,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS);
}

inline  ::int8_t TestUnion::Union3::Builder::getU3f0s8() {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S8,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s8( ::int8_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3F0S8);
  _builder.setDataField< ::int8_t>(
      34 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s16() const {
  return which() == TestUnion::Union3::U3F0S16;
}
inline bool TestUnion::Union3::Builder::isU3f0s16() {
  return which() == TestUnion::Union3::U3F0S16;
}
inline bool TestUnion::Union3::Reader::hasU3f0s16() const {
  if (which() != TestUnion::Union3::U3F0S16) return false;
  return _reader.hasDataField< ::int16_t>(19 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::hasU3f0s16() {
  if (which() != TestUnion::Union3::U3F0S16) return false;
  return _builder.hasDataField< ::int16_t>(19 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestUnion::Union3::Reader::getU3f0s16() const {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S16,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestUnion::Union3::Builder::getU3f0s16() {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S16,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s16( ::int16_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3F0S16);
  _builder.setDataField< ::int16_t>(
      19 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s32() const {
  return which() == TestUnion::Union3::U3F0S32;
}
inline bool TestUnion::Union3::Builder::isU3f0s32() {
  return which() == TestUnion::Union3::U3F0S32;
}
inline bool TestUnion::Union3::Reader::hasU3f0s32() const {
  if (which() != TestUnion::Union3::U3F0S32) return false;
  return _reader.hasDataField< ::int32_t>(11 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::hasU3f0s32() {
  if (which() != TestUnion::Union3::U3F0S32) return false;
  return _builder.hasDataField< ::int32_t>(11 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnion::Union3::Reader::getU3f0s32() const {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S32,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnion::Union3::Builder::getU3f0s32() {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S32,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s32( ::int32_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3F0S32);
  _builder.setDataField< ::int32_t>(
      11 * ::capnp::ELEMENTS, value);
}

inline bool TestUnion::Union3::Reader::isU3f0s64() const {
  return which() == TestUnion::Union3::U3F0S64;
}
inline bool TestUnion::Union3::Builder::isU3f0s64() {
  return which() == TestUnion::Union3::U3F0S64;
}
inline bool TestUnion::Union3::Reader::hasU3f0s64() const {
  if (which() != TestUnion::Union3::U3F0S64) return false;
  return _reader.hasDataField< ::int64_t>(7 * ::capnp::ELEMENTS);
}

inline bool TestUnion::Union3::Builder::hasU3f0s64() {
  if (which() != TestUnion::Union3::U3F0S64) return false;
  return _builder.hasDataField< ::int64_t>(7 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestUnion::Union3::Reader::getU3f0s64() const {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S64,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestUnion::Union3::Builder::getU3f0s64() {
  KJ_IREQUIRE(which() == TestUnion::Union3::U3F0S64,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS);
}
inline void TestUnion::Union3::Builder::setU3f0s64( ::int64_t value) {
  _builder.setDataField<TestUnion::Union3::Which>(
      3 * ::capnp::ELEMENTS, TestUnion::Union3::U3F0S64);
  _builder.setDataField< ::int64_t>(
      7 * ::capnp::ELEMENTS, value);
}

inline TestUnnamedUnion::Which TestUnnamedUnion::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline TestUnnamedUnion::Which TestUnnamedUnion::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnnamedUnion::Reader::hasBefore() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestUnnamedUnion::Builder::hasBefore() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnnamedUnion::Reader::getBefore() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnnamedUnion::Builder::getBefore() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestUnnamedUnion::Builder::setBefore( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnnamedUnion::Builder::initBefore(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestUnnamedUnion::Builder::adoptBefore(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnnamedUnion::Builder::disownBefore() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestUnnamedUnion::Reader::isFoo() const {
  return which() == TestUnnamedUnion::FOO;
}
inline bool TestUnnamedUnion::Builder::isFoo() {
  return which() == TestUnnamedUnion::FOO;
}
inline bool TestUnnamedUnion::Reader::hasFoo() const {
  if (which() != TestUnnamedUnion::FOO) return false;
  return _reader.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnnamedUnion::Builder::hasFoo() {
  if (which() != TestUnnamedUnion::FOO) return false;
  return _builder.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestUnnamedUnion::Reader::getFoo() const {
  KJ_IREQUIRE(which() == TestUnnamedUnion::FOO,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestUnnamedUnion::Builder::getFoo() {
  KJ_IREQUIRE(which() == TestUnnamedUnion::FOO,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnnamedUnion::Builder::setFoo( ::uint16_t value) {
  _builder.setDataField<TestUnnamedUnion::Which>(
      2 * ::capnp::ELEMENTS, TestUnnamedUnion::FOO);
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnnamedUnion::Reader::hasMiddle() const {
  return _reader.hasDataField< ::uint16_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestUnnamedUnion::Builder::hasMiddle() {
  return _builder.hasDataField< ::uint16_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestUnnamedUnion::Reader::getMiddle() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestUnnamedUnion::Builder::getMiddle() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestUnnamedUnion::Builder::setMiddle( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestUnnamedUnion::Reader::isBar() const {
  return which() == TestUnnamedUnion::BAR;
}
inline bool TestUnnamedUnion::Builder::isBar() {
  return which() == TestUnnamedUnion::BAR;
}
inline bool TestUnnamedUnion::Reader::hasBar() const {
  if (which() != TestUnnamedUnion::BAR) return false;
  return _reader.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnnamedUnion::Builder::hasBar() {
  if (which() != TestUnnamedUnion::BAR) return false;
  return _builder.hasDataField< ::uint32_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestUnnamedUnion::Reader::getBar() const {
  KJ_IREQUIRE(which() == TestUnnamedUnion::BAR,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestUnnamedUnion::Builder::getBar() {
  KJ_IREQUIRE(which() == TestUnnamedUnion::BAR,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestUnnamedUnion::Builder::setBar( ::uint32_t value) {
  _builder.setDataField<TestUnnamedUnion::Which>(
      2 * ::capnp::ELEMENTS, TestUnnamedUnion::BAR);
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestUnnamedUnion::Reader::hasAfter() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnnamedUnion::Builder::hasAfter() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestUnnamedUnion::Reader::getAfter() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestUnnamedUnion::Builder::getAfter() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestUnnamedUnion::Builder::setAfter( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestUnnamedUnion::Builder::initAfter(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestUnnamedUnion::Builder::adoptAfter(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestUnnamedUnion::Builder::disownAfter() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestUnionInUnion::Reader::hasOuter() const {
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(4 * ::capnp::ELEMENTS) != 0;
}
inline bool TestUnionInUnion::Builder::hasOuter() {
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(4 * ::capnp::ELEMENTS) != 0;
}
inline TestUnionInUnion::Outer::Reader TestUnionInUnion::Reader::getOuter() const {
  return TestUnionInUnion::Outer::Reader(_reader);
}
inline TestUnionInUnion::Outer::Builder TestUnionInUnion::Builder::getOuter() {
  return TestUnionInUnion::Outer::Builder(_builder);
}
inline TestUnionInUnion::Outer::Builder TestUnionInUnion::Builder::initOuter() {
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(4 * ::capnp::ELEMENTS, 0);
  return TestUnionInUnion::Outer::Builder(_builder);
}
inline TestUnionInUnion::Outer::Which TestUnionInUnion::Outer::Reader::which() const {
  return _reader.getDataField<Which>(4 * ::capnp::ELEMENTS);
}
inline TestUnionInUnion::Outer::Which TestUnionInUnion::Outer::Builder::which() {
  return _builder.getDataField<Which>(4 * ::capnp::ELEMENTS);
}

inline bool TestUnionInUnion::Outer::Reader::isInner() const {
  return which() == TestUnionInUnion::Outer::INNER;
}
inline bool TestUnionInUnion::Outer::Builder::isInner() {
  return which() == TestUnionInUnion::Outer::INNER;
}
inline bool TestUnionInUnion::Outer::Reader::hasInner() const {
  if (which() != TestUnionInUnion::Outer::INNER) return false;
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0;
}
inline bool TestUnionInUnion::Outer::Builder::hasInner() {
  if (which() != TestUnionInUnion::Outer::INNER) return false;
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0;
}
inline TestUnionInUnion::Outer::Inner::Reader TestUnionInUnion::Outer::Reader::getInner() const {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::INNER,
              "Must check which() before get()ing a union member.");
  return TestUnionInUnion::Outer::Inner::Reader(_reader);
}
inline TestUnionInUnion::Outer::Inner::Builder TestUnionInUnion::Outer::Builder::getInner() {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::INNER,
              "Must check which() before get()ing a union member.");
  return TestUnionInUnion::Outer::Inner::Builder(_builder);
}
inline TestUnionInUnion::Outer::Inner::Builder TestUnionInUnion::Outer::Builder::initInner() {
  _builder.setDataField<TestUnionInUnion::Outer::Which>(
      4 * ::capnp::ELEMENTS, TestUnionInUnion::Outer::INNER);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  return TestUnionInUnion::Outer::Inner::Builder(_builder);
}
inline bool TestUnionInUnion::Outer::Reader::isBaz() const {
  return which() == TestUnionInUnion::Outer::BAZ;
}
inline bool TestUnionInUnion::Outer::Builder::isBaz() {
  return which() == TestUnionInUnion::Outer::BAZ;
}
inline bool TestUnionInUnion::Outer::Reader::hasBaz() const {
  if (which() != TestUnionInUnion::Outer::BAZ) return false;
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnionInUnion::Outer::Builder::hasBaz() {
  if (which() != TestUnionInUnion::Outer::BAZ) return false;
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnionInUnion::Outer::Reader::getBaz() const {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::BAZ,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnionInUnion::Outer::Builder::getBaz() {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::BAZ,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnionInUnion::Outer::Builder::setBaz( ::int32_t value) {
  _builder.setDataField<TestUnionInUnion::Outer::Which>(
      4 * ::capnp::ELEMENTS, TestUnionInUnion::Outer::BAZ);
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline TestUnionInUnion::Outer::Inner::Which TestUnionInUnion::Outer::Inner::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline TestUnionInUnion::Outer::Inner::Which TestUnionInUnion::Outer::Inner::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestUnionInUnion::Outer::Inner::Reader::isFoo() const {
  return which() == TestUnionInUnion::Outer::Inner::FOO;
}
inline bool TestUnionInUnion::Outer::Inner::Builder::isFoo() {
  return which() == TestUnionInUnion::Outer::Inner::FOO;
}
inline bool TestUnionInUnion::Outer::Inner::Reader::hasFoo() const {
  if (which() != TestUnionInUnion::Outer::Inner::FOO) return false;
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnionInUnion::Outer::Inner::Builder::hasFoo() {
  if (which() != TestUnionInUnion::Outer::Inner::FOO) return false;
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnionInUnion::Outer::Inner::Reader::getFoo() const {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::Inner::FOO,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnionInUnion::Outer::Inner::Builder::getFoo() {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::Inner::FOO,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnionInUnion::Outer::Inner::Builder::setFoo( ::int32_t value) {
  _builder.setDataField<TestUnionInUnion::Outer::Inner::Which>(
      2 * ::capnp::ELEMENTS, TestUnionInUnion::Outer::Inner::FOO);
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestUnionInUnion::Outer::Inner::Reader::isBar() const {
  return which() == TestUnionInUnion::Outer::Inner::BAR;
}
inline bool TestUnionInUnion::Outer::Inner::Builder::isBar() {
  return which() == TestUnionInUnion::Outer::Inner::BAR;
}
inline bool TestUnionInUnion::Outer::Inner::Reader::hasBar() const {
  if (which() != TestUnionInUnion::Outer::Inner::BAR) return false;
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestUnionInUnion::Outer::Inner::Builder::hasBar() {
  if (which() != TestUnionInUnion::Outer::Inner::BAR) return false;
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestUnionInUnion::Outer::Inner::Reader::getBar() const {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::Inner::BAR,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestUnionInUnion::Outer::Inner::Builder::getBar() {
  KJ_IREQUIRE(which() == TestUnionInUnion::Outer::Inner::BAR,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestUnionInUnion::Outer::Inner::Builder::setBar( ::int32_t value) {
  _builder.setDataField<TestUnionInUnion::Outer::Inner::Which>(
      2 * ::capnp::ELEMENTS, TestUnionInUnion::Outer::Inner::BAR);
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Reader::hasGroups() const {
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestGroups::Builder::hasGroups() {
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(2 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline TestGroups::Groups::Reader TestGroups::Reader::getGroups() const {
  return TestGroups::Groups::Reader(_reader);
}
inline TestGroups::Groups::Builder TestGroups::Builder::getGroups() {
  return TestGroups::Groups::Builder(_builder);
}
inline TestGroups::Groups::Builder TestGroups::Builder::initGroups() {
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return TestGroups::Groups::Builder(_builder);
}
inline TestGroups::Groups::Which TestGroups::Groups::Reader::which() const {
  return _reader.getDataField<Which>(2 * ::capnp::ELEMENTS);
}
inline TestGroups::Groups::Which TestGroups::Groups::Builder::which() {
  return _builder.getDataField<Which>(2 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Reader::isFoo() const {
  return which() == TestGroups::Groups::FOO;
}
inline bool TestGroups::Groups::Builder::isFoo() {
  return which() == TestGroups::Groups::FOO;
}
inline bool TestGroups::Groups::Reader::hasFoo() const {
  if (which() != TestGroups::Groups::FOO) return false;
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Builder::hasFoo() {
  if (which() != TestGroups::Groups::FOO) return false;
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline TestGroups::Groups::Foo::Reader TestGroups::Groups::Reader::getFoo() const {
  KJ_IREQUIRE(which() == TestGroups::Groups::FOO,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Foo::Reader(_reader);
}
inline TestGroups::Groups::Foo::Builder TestGroups::Groups::Builder::getFoo() {
  KJ_IREQUIRE(which() == TestGroups::Groups::FOO,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Foo::Builder(_builder);
}
inline TestGroups::Groups::Foo::Builder TestGroups::Groups::Builder::initFoo() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::FOO);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  return TestGroups::Groups::Foo::Builder(_builder);
}
inline bool TestGroups::Groups::Reader::isBaz() const {
  return which() == TestGroups::Groups::BAZ;
}
inline bool TestGroups::Groups::Builder::isBaz() {
  return which() == TestGroups::Groups::BAZ;
}
inline bool TestGroups::Groups::Reader::hasBaz() const {
  if (which() != TestGroups::Groups::BAZ) return false;
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Builder::hasBaz() {
  if (which() != TestGroups::Groups::BAZ) return false;
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline TestGroups::Groups::Baz::Reader TestGroups::Groups::Reader::getBaz() const {
  KJ_IREQUIRE(which() == TestGroups::Groups::BAZ,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Baz::Reader(_reader);
}
inline TestGroups::Groups::Baz::Builder TestGroups::Groups::Builder::getBaz() {
  KJ_IREQUIRE(which() == TestGroups::Groups::BAZ,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Baz::Builder(_builder);
}
inline TestGroups::Groups::Baz::Builder TestGroups::Groups::Builder::initBaz() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::BAZ);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return TestGroups::Groups::Baz::Builder(_builder);
}
inline bool TestGroups::Groups::Reader::isBar() const {
  return which() == TestGroups::Groups::BAR;
}
inline bool TestGroups::Groups::Builder::isBar() {
  return which() == TestGroups::Groups::BAR;
}
inline bool TestGroups::Groups::Reader::hasBar() const {
  if (which() != TestGroups::Groups::BAR) return false;
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Builder::hasBar() {
  if (which() != TestGroups::Groups::BAR) return false;
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline TestGroups::Groups::Bar::Reader TestGroups::Groups::Reader::getBar() const {
  KJ_IREQUIRE(which() == TestGroups::Groups::BAR,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Bar::Reader(_reader);
}
inline TestGroups::Groups::Bar::Builder TestGroups::Groups::Builder::getBar() {
  KJ_IREQUIRE(which() == TestGroups::Groups::BAR,
              "Must check which() before get()ing a union member.");
  return TestGroups::Groups::Bar::Builder(_builder);
}
inline TestGroups::Groups::Bar::Builder TestGroups::Groups::Builder::initBar() {
  _builder.setDataField<TestGroups::Groups::Which>(
      2 * ::capnp::ELEMENTS, TestGroups::Groups::BAR);
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  return TestGroups::Groups::Bar::Builder(_builder);
}
inline bool TestGroups::Groups::Foo::Reader::hasCorge() const {
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Foo::Builder::hasCorge() {
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestGroups::Groups::Foo::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Foo::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Foo::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Foo::Reader::hasGrault() const {
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Foo::Builder::hasGrault() {
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestGroups::Groups::Foo::Reader::getGrault() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestGroups::Groups::Foo::Builder::getGrault() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Foo::Builder::setGrault( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Foo::Reader::hasGarply() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Foo::Builder::hasGarply() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestGroups::Groups::Foo::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Foo::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestGroups::Groups::Foo::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Foo::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestGroups::Groups::Foo::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Foo::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestGroups::Groups::Baz::Reader::hasCorge() const {
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Baz::Builder::hasCorge() {
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestGroups::Groups::Baz::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Baz::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Baz::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Baz::Reader::hasGrault() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Baz::Builder::hasGrault() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestGroups::Groups::Baz::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestGroups::Groups::Baz::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestGroups::Groups::Baz::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Baz::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestGroups::Groups::Baz::Reader::hasGarply() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Baz::Builder::hasGarply() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestGroups::Groups::Baz::Reader::getGarply() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::getGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestGroups::Groups::Baz::Builder::setGarply( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Baz::Builder::initGarply(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestGroups::Groups::Baz::Builder::adoptGarply(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Baz::Builder::disownGarply() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestGroups::Groups::Bar::Reader::hasCorge() const {
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Bar::Builder::hasCorge() {
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestGroups::Groups::Bar::Reader::getCorge() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestGroups::Groups::Bar::Builder::getCorge() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Bar::Builder::setCorge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestGroups::Groups::Bar::Reader::hasGrault() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestGroups::Groups::Bar::Builder::hasGrault() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestGroups::Groups::Bar::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Bar::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestGroups::Groups::Bar::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestGroups::Groups::Bar::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestGroups::Groups::Bar::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestGroups::Groups::Bar::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestGroups::Groups::Bar::Reader::hasGarply() const {
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestGroups::Groups::Bar::Builder::hasGarply() {
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestGroups::Groups::Bar::Reader::getGarply() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestGroups::Groups::Bar::Builder::getGarply() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestGroups::Groups::Bar::Builder::setGarply( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Reader::hasGroup1() const {
  return _reader.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(12 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(14 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(4 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(2 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Builder::hasGroup1() {
  return _builder.getDataField< ::uint32_t>(0 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(1 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(12 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(14 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(4 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(2 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline TestInterleavedGroups::Group1::Reader TestInterleavedGroups::Reader::getGroup1() const {
  return TestInterleavedGroups::Group1::Reader(_reader);
}
inline TestInterleavedGroups::Group1::Builder TestInterleavedGroups::Builder::getGroup1() {
  return TestInterleavedGroups::Group1::Builder(_builder);
}
inline TestInterleavedGroups::Group1::Builder TestInterleavedGroups::Builder::initGroup1() {
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(12 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(14 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  _builder.clearPointer(2 * ::capnp::POINTERS);
  _builder.clearPointer(4 * ::capnp::POINTERS);
  return TestInterleavedGroups::Group1::Builder(_builder);
}
inline bool TestInterleavedGroups::Reader::hasGroup2() const {
  return _reader.getDataField< ::uint32_t>(1 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(2 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(13 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint16_t>(15 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(5 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(1 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(3 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Builder::hasGroup2() {
  return _builder.getDataField< ::uint32_t>(1 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(2 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(13 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint16_t>(15 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(5 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(1 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(3 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline TestInterleavedGroups::Group2::Reader TestInterleavedGroups::Reader::getGroup2() const {
  return TestInterleavedGroups::Group2::Reader(_reader);
}
inline TestInterleavedGroups::Group2::Builder TestInterleavedGroups::Builder::getGroup2() {
  return TestInterleavedGroups::Group2::Builder(_builder);
}
inline TestInterleavedGroups::Group2::Builder TestInterleavedGroups::Builder::initGroup2() {
  _builder.setDataField< ::uint32_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(13 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(15 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(5 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  _builder.clearPointer(3 * ::capnp::POINTERS);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  return TestInterleavedGroups::Group2::Builder(_builder);
}
inline TestInterleavedGroups::Group1::Which TestInterleavedGroups::Group1::Reader::which() const {
  return _reader.getDataField<Which>(14 * ::capnp::ELEMENTS);
}
inline TestInterleavedGroups::Group1::Which TestInterleavedGroups::Group1::Builder::which() {
  return _builder.getDataField<Which>(14 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Reader::hasFoo() const {
  return _reader.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Builder::hasFoo() {
  return _builder.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestInterleavedGroups::Group1::Reader::getFoo() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestInterleavedGroups::Group1::Builder::getFoo() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group1::Builder::setFoo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group1::Reader::hasBar() const {
  return _reader.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Builder::hasBar() {
  return _builder.hasDataField< ::uint64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestInterleavedGroups::Group1::Reader::getBar() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestInterleavedGroups::Group1::Builder::getBar() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group1::Builder::setBar( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group1::Reader::isQux() const {
  return which() == TestInterleavedGroups::Group1::QUX;
}
inline bool TestInterleavedGroups::Group1::Builder::isQux() {
  return which() == TestInterleavedGroups::Group1::QUX;
}
inline bool TestInterleavedGroups::Group1::Reader::hasQux() const {
  if (which() != TestInterleavedGroups::Group1::QUX) return false;
  return _reader.hasDataField< ::uint16_t>(12 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Builder::hasQux() {
  if (which() != TestInterleavedGroups::Group1::QUX) return false;
  return _builder.hasDataField< ::uint16_t>(12 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestInterleavedGroups::Group1::Reader::getQux() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::QUX,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestInterleavedGroups::Group1::Builder::getQux() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::QUX,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group1::Builder::setQux( ::uint16_t value) {
  _builder.setDataField<TestInterleavedGroups::Group1::Which>(
      14 * ::capnp::ELEMENTS, TestInterleavedGroups::Group1::QUX);
  _builder.setDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group1::Reader::isCorge() const {
  return which() == TestInterleavedGroups::Group1::CORGE;
}
inline bool TestInterleavedGroups::Group1::Builder::isCorge() {
  return which() == TestInterleavedGroups::Group1::CORGE;
}
inline bool TestInterleavedGroups::Group1::Reader::hasCorge() const {
  if (which() != TestInterleavedGroups::Group1::CORGE) return false;
  return _reader.getDataField< ::uint16_t>(12 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(4 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(2 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group1::Builder::hasCorge() {
  if (which() != TestInterleavedGroups::Group1::CORGE) return false;
  return _builder.getDataField< ::uint16_t>(12 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(4 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(2 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline TestInterleavedGroups::Group1::Corge::Reader TestInterleavedGroups::Group1::Reader::getCorge() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::CORGE,
              "Must check which() before get()ing a union member.");
  return TestInterleavedGroups::Group1::Corge::Reader(_reader);
}
inline TestInterleavedGroups::Group1::Corge::Builder TestInterleavedGroups::Group1::Builder::getCorge() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::CORGE,
              "Must check which() before get()ing a union member.");
  return TestInterleavedGroups::Group1::Corge::Builder(_builder);
}
inline TestInterleavedGroups::Group1::Corge::Builder TestInterleavedGroups::Group1::Builder::initCorge() {
  _builder.setDataField<TestInterleavedGroups::Group1::Which>(
      14 * ::capnp::ELEMENTS, TestInterleavedGroups::Group1::CORGE);
  _builder.setDataField< ::uint16_t>(12 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(2 * ::capnp::POINTERS);
  _builder.clearPointer(4 * ::capnp::POINTERS);
  return TestInterleavedGroups::Group1::Corge::Builder(_builder);
}
inline bool TestInterleavedGroups::Group1::Reader::hasWaldo() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group1::Builder::hasWaldo() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group1::Reader::getWaldo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Builder::getWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group1::Builder::setWaldo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Builder::initWaldo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group1::Builder::adoptWaldo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group1::Builder::disownWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group1::Reader::isFred() const {
  return which() == TestInterleavedGroups::Group1::FRED;
}
inline bool TestInterleavedGroups::Group1::Builder::isFred() {
  return which() == TestInterleavedGroups::Group1::FRED;
}
inline bool TestInterleavedGroups::Group1::Reader::hasFred() const {
  if (which() != TestInterleavedGroups::Group1::FRED) return false;
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group1::Builder::hasFred() {
  if (which() != TestInterleavedGroups::Group1::FRED) return false;
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group1::Reader::getFred() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Builder::getFred() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group1::Builder::setFred( ::capnp::Text::Reader value) {
  _builder.setDataField<TestInterleavedGroups::Group1::Which>(
      14 * ::capnp::ELEMENTS, TestInterleavedGroups::Group1::FRED);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Builder::initFred(unsigned int size) {
  _builder.setDataField<TestInterleavedGroups::Group1::Which>(
      14 * ::capnp::ELEMENTS, TestInterleavedGroups::Group1::FRED);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group1::Builder::adoptFred(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestInterleavedGroups::Group1::Which>(
      14 * ::capnp::ELEMENTS, TestInterleavedGroups::Group1::FRED);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group1::Builder::disownFred() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group1::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group1::Corge::Reader::hasGrault() const {
  return _reader.hasDataField< ::uint64_t>(4 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Corge::Builder::hasGrault() {
  return _builder.hasDataField< ::uint64_t>(4 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestInterleavedGroups::Group1::Corge::Reader::getGrault() const {
  return _reader.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestInterleavedGroups::Group1::Corge::Builder::getGrault() {
  return _builder.getDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::setGrault( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group1::Corge::Reader::hasGarply() const {
  return _reader.hasDataField< ::uint16_t>(12 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group1::Corge::Builder::hasGarply() {
  return _builder.hasDataField< ::uint16_t>(12 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestInterleavedGroups::Group1::Corge::Reader::getGarply() const {
  return _reader.getDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestInterleavedGroups::Group1::Corge::Builder::getGarply() {
  return _builder.getDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::setGarply( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group1::Corge::Reader::hasPlugh() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group1::Corge::Builder::hasPlugh() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group1::Corge::Reader::getPlugh() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Corge::Builder::getPlugh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::setPlugh( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Corge::Builder::initPlugh(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::adoptPlugh(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group1::Corge::Builder::disownPlugh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group1::Corge::Reader::hasXyzzy() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group1::Corge::Builder::hasXyzzy() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group1::Corge::Reader::getXyzzy() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 4 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Corge::Builder::getXyzzy() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 4 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::setXyzzy( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group1::Corge::Builder::initXyzzy(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group1::Corge::Builder::adoptXyzzy(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group1::Corge::Builder::disownXyzzy() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline TestInterleavedGroups::Group2::Which TestInterleavedGroups::Group2::Reader::which() const {
  return _reader.getDataField<Which>(15 * ::capnp::ELEMENTS);
}
inline TestInterleavedGroups::Group2::Which TestInterleavedGroups::Group2::Builder::which() {
  return _builder.getDataField<Which>(15 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Reader::hasFoo() const {
  return _reader.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Builder::hasFoo() {
  return _builder.hasDataField< ::uint32_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestInterleavedGroups::Group2::Reader::getFoo() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestInterleavedGroups::Group2::Builder::getFoo() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group2::Builder::setFoo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group2::Reader::hasBar() const {
  return _reader.hasDataField< ::uint64_t>(2 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Builder::hasBar() {
  return _builder.hasDataField< ::uint64_t>(2 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestInterleavedGroups::Group2::Reader::getBar() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestInterleavedGroups::Group2::Builder::getBar() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group2::Builder::setBar( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group2::Reader::isQux() const {
  return which() == TestInterleavedGroups::Group2::QUX;
}
inline bool TestInterleavedGroups::Group2::Builder::isQux() {
  return which() == TestInterleavedGroups::Group2::QUX;
}
inline bool TestInterleavedGroups::Group2::Reader::hasQux() const {
  if (which() != TestInterleavedGroups::Group2::QUX) return false;
  return _reader.hasDataField< ::uint16_t>(13 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Builder::hasQux() {
  if (which() != TestInterleavedGroups::Group2::QUX) return false;
  return _builder.hasDataField< ::uint16_t>(13 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestInterleavedGroups::Group2::Reader::getQux() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::QUX,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestInterleavedGroups::Group2::Builder::getQux() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::QUX,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group2::Builder::setQux( ::uint16_t value) {
  _builder.setDataField<TestInterleavedGroups::Group2::Which>(
      15 * ::capnp::ELEMENTS, TestInterleavedGroups::Group2::QUX);
  _builder.setDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group2::Reader::isCorge() const {
  return which() == TestInterleavedGroups::Group2::CORGE;
}
inline bool TestInterleavedGroups::Group2::Builder::isCorge() {
  return which() == TestInterleavedGroups::Group2::CORGE;
}
inline bool TestInterleavedGroups::Group2::Reader::hasCorge() const {
  if (which() != TestInterleavedGroups::Group2::CORGE) return false;
  return _reader.getDataField< ::uint16_t>(13 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint64_t>(5 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(3 * ::capnp::POINTERS)
      || !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group2::Builder::hasCorge() {
  if (which() != TestInterleavedGroups::Group2::CORGE) return false;
  return _builder.getDataField< ::uint16_t>(13 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint64_t>(5 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(3 * ::capnp::POINTERS)
      || !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline TestInterleavedGroups::Group2::Corge::Reader TestInterleavedGroups::Group2::Reader::getCorge() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::CORGE,
              "Must check which() before get()ing a union member.");
  return TestInterleavedGroups::Group2::Corge::Reader(_reader);
}
inline TestInterleavedGroups::Group2::Corge::Builder TestInterleavedGroups::Group2::Builder::getCorge() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::CORGE,
              "Must check which() before get()ing a union member.");
  return TestInterleavedGroups::Group2::Corge::Builder(_builder);
}
inline TestInterleavedGroups::Group2::Corge::Builder TestInterleavedGroups::Group2::Builder::initCorge() {
  _builder.setDataField<TestInterleavedGroups::Group2::Which>(
      15 * ::capnp::ELEMENTS, TestInterleavedGroups::Group2::CORGE);
  _builder.setDataField< ::uint16_t>(13 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(5 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(3 * ::capnp::POINTERS);
  _builder.clearPointer(5 * ::capnp::POINTERS);
  return TestInterleavedGroups::Group2::Corge::Builder(_builder);
}
inline bool TestInterleavedGroups::Group2::Reader::hasWaldo() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group2::Builder::hasWaldo() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group2::Reader::getWaldo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Builder::getWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group2::Builder::setWaldo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Builder::initWaldo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group2::Builder::adoptWaldo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group2::Builder::disownWaldo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group2::Reader::isFred() const {
  return which() == TestInterleavedGroups::Group2::FRED;
}
inline bool TestInterleavedGroups::Group2::Builder::isFred() {
  return which() == TestInterleavedGroups::Group2::FRED;
}
inline bool TestInterleavedGroups::Group2::Reader::hasFred() const {
  if (which() != TestInterleavedGroups::Group2::FRED) return false;
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group2::Builder::hasFred() {
  if (which() != TestInterleavedGroups::Group2::FRED) return false;
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group2::Reader::getFred() const {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Builder::getFred() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group2::Builder::setFred( ::capnp::Text::Reader value) {
  _builder.setDataField<TestInterleavedGroups::Group2::Which>(
      15 * ::capnp::ELEMENTS, TestInterleavedGroups::Group2::FRED);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Builder::initFred(unsigned int size) {
  _builder.setDataField<TestInterleavedGroups::Group2::Which>(
      15 * ::capnp::ELEMENTS, TestInterleavedGroups::Group2::FRED);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group2::Builder::adoptFred(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestInterleavedGroups::Group2::Which>(
      15 * ::capnp::ELEMENTS, TestInterleavedGroups::Group2::FRED);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group2::Builder::disownFred() {
  KJ_IREQUIRE(which() == TestInterleavedGroups::Group2::FRED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group2::Corge::Reader::hasGrault() const {
  return _reader.hasDataField< ::uint64_t>(5 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Corge::Builder::hasGrault() {
  return _builder.hasDataField< ::uint64_t>(5 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestInterleavedGroups::Group2::Corge::Reader::getGrault() const {
  return _reader.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestInterleavedGroups::Group2::Corge::Builder::getGrault() {
  return _builder.getDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::setGrault( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group2::Corge::Reader::hasGarply() const {
  return _reader.hasDataField< ::uint16_t>(13 * ::capnp::ELEMENTS);
}

inline bool TestInterleavedGroups::Group2::Corge::Builder::hasGarply() {
  return _builder.hasDataField< ::uint16_t>(13 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestInterleavedGroups::Group2::Corge::Reader::getGarply() const {
  return _reader.getDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestInterleavedGroups::Group2::Corge::Builder::getGarply() {
  return _builder.getDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::setGarply( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline bool TestInterleavedGroups::Group2::Corge::Reader::hasPlugh() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group2::Corge::Builder::hasPlugh() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group2::Corge::Reader::getPlugh() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Corge::Builder::getPlugh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::setPlugh( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Corge::Builder::initPlugh(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::adoptPlugh(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group2::Corge::Builder::disownPlugh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestInterleavedGroups::Group2::Corge::Reader::hasXyzzy() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestInterleavedGroups::Group2::Corge::Builder::hasXyzzy() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestInterleavedGroups::Group2::Corge::Reader::getXyzzy() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Corge::Builder::getXyzzy() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::setXyzzy( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestInterleavedGroups::Group2::Corge::Builder::initXyzzy(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void TestInterleavedGroups::Group2::Corge::Builder::adoptXyzzy(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestInterleavedGroups::Group2::Corge::Builder::disownXyzzy() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool TestUnionDefaults::Reader::hasS16s8s64s8Set() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestUnionDefaults::Builder::hasS16s8s64s8Set() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestUnion::Reader TestUnionDefaults::Reader::getS16s8s64s8Set() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::get(
      _reader, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 52);
}
inline  ::capnproto_test::capnp::test::TestUnion::Builder TestUnionDefaults::Builder::getS16s8s64s8Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::get(
      _builder, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 52);
}
inline void TestUnionDefaults::Builder::setS16s8s64s8Set( ::capnproto_test::capnp::test::TestUnion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestUnion::Builder TestUnionDefaults::Builder::initS16s8s64s8Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestUnionDefaults::Builder::adoptS16s8s64s8Set(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion> TestUnionDefaults::Builder::disownS16s8s64s8Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestUnionDefaults::Reader::hasS0sps1s32Set() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestUnionDefaults::Builder::hasS0sps1s32Set() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestUnion::Reader TestUnionDefaults::Reader::getS0sps1s32Set() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::get(
      _reader, 1 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 70);
}
inline  ::capnproto_test::capnp::test::TestUnion::Builder TestUnionDefaults::Builder::getS0sps1s32Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::get(
      _builder, 1 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 70);
}
inline void TestUnionDefaults::Builder::setS0sps1s32Set( ::capnproto_test::capnp::test::TestUnion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestUnion::Builder TestUnionDefaults::Builder::initS0sps1s32Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestUnionDefaults::Builder::adoptS0sps1s32Set(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnion> TestUnionDefaults::Builder::disownS0sps1s32Set() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnion>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestUnionDefaults::Reader::hasUnnamed1() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestUnionDefaults::Builder::hasUnnamed1() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Reader TestUnionDefaults::Reader::getUnnamed1() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::get(
      _reader, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 89);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder TestUnionDefaults::Builder::getUnnamed1() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::get(
      _builder, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 89);
}
inline void TestUnionDefaults::Builder::setUnnamed1( ::capnproto_test::capnp::test::TestUnnamedUnion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder TestUnionDefaults::Builder::initUnnamed1() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::init(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestUnionDefaults::Builder::adoptUnnamed1(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion> TestUnionDefaults::Builder::disownUnnamed1() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestUnionDefaults::Reader::hasUnnamed2() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestUnionDefaults::Builder::hasUnnamed2() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Reader TestUnionDefaults::Reader::getUnnamed2() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::get(
      _reader, 3 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 101);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder TestUnionDefaults::Builder::getUnnamed2() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::get(
      _builder, 3 * ::capnp::POINTERS,
        ::capnp::schemas::s_94f7e0b103b4b718.encodedNode + 101);
}
inline void TestUnionDefaults::Builder::setUnnamed2( ::capnproto_test::capnp::test::TestUnnamedUnion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestUnnamedUnion::Builder TestUnionDefaults::Builder::initUnnamed2() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::init(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestUnionDefaults::Builder::adoptUnnamed2(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestUnnamedUnion> TestUnionDefaults::Builder::disownUnnamed2() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestUnnamedUnion>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestNestedTypes::Reader::hasNestedStruct() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestNestedTypes::Builder::hasNestedStruct() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Reader TestNestedTypes::Reader::getNestedStruct() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Builder TestNestedTypes::Builder::getNestedStruct() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestNestedTypes::Builder::setNestedStruct( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::Builder TestNestedTypes::Builder::initNestedStruct() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestNestedTypes::Builder::adoptNestedStruct(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct> TestNestedTypes::Builder::disownNestedStruct() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestNestedTypes::Reader::hasOuterNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(0 * ::capnp::ELEMENTS);
}

inline bool TestNestedTypes::Builder::hasOuterNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(0 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestNestedTypes::Reader::getOuterNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, 1u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestNestedTypes::Builder::getOuterNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, 1u);
}
inline void TestNestedTypes::Builder::setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, value, 1u);
}

inline bool TestNestedTypes::Reader::hasInnerNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(1 * ::capnp::ELEMENTS);
}

inline bool TestNestedTypes::Builder::hasInnerNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(1 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestNestedTypes::Reader::getInnerNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, 2u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestNestedTypes::Builder::getInnerNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, 2u);
}
inline void TestNestedTypes::Builder::setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, value, 2u);
}

inline bool TestNestedTypes::NestedStruct::Reader::hasOuterNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(0 * ::capnp::ELEMENTS);
}

inline bool TestNestedTypes::NestedStruct::Builder::hasOuterNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(0 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestNestedTypes::NestedStruct::Reader::getOuterNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, 1u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestNestedTypes::NestedStruct::Builder::getOuterNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, 1u);
}
inline void TestNestedTypes::NestedStruct::Builder::setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      0 * ::capnp::ELEMENTS, value, 1u);
}

inline bool TestNestedTypes::NestedStruct::Reader::hasInnerNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(1 * ::capnp::ELEMENTS);
}

inline bool TestNestedTypes::NestedStruct::Builder::hasInnerNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(1 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestNestedTypes::NestedStruct::Reader::getInnerNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, 2u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestNestedTypes::NestedStruct::Builder::getInnerNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, 2u);
}
inline void TestNestedTypes::NestedStruct::Builder::setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      1 * ::capnp::ELEMENTS, value, 2u);
}

inline bool TestUsing::Reader::hasInnerNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(0 * ::capnp::ELEMENTS);
}

inline bool TestUsing::Builder::hasInnerNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(0 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestUsing::Reader::getInnerNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      0 * ::capnp::ELEMENTS, 2u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum TestUsing::Builder::getInnerNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      0 * ::capnp::ELEMENTS, 2u);
}
inline void TestUsing::Builder::setInnerNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedStruct::NestedEnum>(
      0 * ::capnp::ELEMENTS, value, 2u);
}

inline bool TestUsing::Reader::hasOuterNestedEnum() const {
  return _reader.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(1 * ::capnp::ELEMENTS);
}

inline bool TestUsing::Builder::hasOuterNestedEnum() {
  return _builder.hasDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(1 * ::capnp::ELEMENTS);
}
inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestUsing::Reader::getOuterNestedEnum() const {
  return _reader.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      1 * ::capnp::ELEMENTS, 1u);
}

inline  ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum TestUsing::Builder::getOuterNestedEnum() {
  return _builder.getDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      1 * ::capnp::ELEMENTS, 1u);
}
inline void TestUsing::Builder::setOuterNestedEnum( ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum value) {
  _builder.setDataField< ::capnproto_test::capnp::test::TestNestedTypes::NestedEnum>(
      1 * ::capnp::ELEMENTS, value, 1u);
}

inline bool TestLists::Reader::hasList0() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList0() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Reader TestLists::Reader::getList0() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Builder TestLists::Builder::getList0() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList0( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>::Builder TestLists::Builder::initList0(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList0(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>> TestLists::Builder::disownList0() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct0>>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasList1() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList1() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Reader TestLists::Reader::getList1() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Builder TestLists::Builder::getList1() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList1( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>::Builder TestLists::Builder::initList1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList1(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>> TestLists::Builder::disownList1() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct1>>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasList8() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList8() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Reader TestLists::Reader::getList8() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Builder TestLists::Builder::getList8() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList8( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>::Builder TestLists::Builder::initList8(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList8(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>> TestLists::Builder::disownList8() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct8>>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasList16() const {
  return !_reader.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList16() {
  return !_builder.isPointerFieldNull(3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Reader TestLists::Reader::getList16() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::get(
      _reader, 3 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Builder TestLists::Builder::getList16() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::get(
      _builder, 3 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList16( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::set(
      _builder, 3 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>::Builder TestLists::Builder::initList16(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::init(
      _builder, 3 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList16(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::adopt(
      _builder, 3 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>> TestLists::Builder::disownList16() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct16>>::disown(
      _builder, 3 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasList32() const {
  return !_reader.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList32() {
  return !_builder.isPointerFieldNull(4 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Reader TestLists::Reader::getList32() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::get(
      _reader, 4 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Builder TestLists::Builder::getList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::get(
      _builder, 4 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList32( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::set(
      _builder, 4 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>::Builder TestLists::Builder::initList32(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::init(
      _builder, 4 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList32(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::adopt(
      _builder, 4 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>> TestLists::Builder::disownList32() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct32>>::disown(
      _builder, 4 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasList64() const {
  return !_reader.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasList64() {
  return !_builder.isPointerFieldNull(5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Reader TestLists::Reader::getList64() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::get(
      _reader, 5 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Builder TestLists::Builder::getList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::get(
      _builder, 5 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setList64( ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::set(
      _builder, 5 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>::Builder TestLists::Builder::initList64(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::init(
      _builder, 5 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptList64(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::adopt(
      _builder, 5 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>> TestLists::Builder::disownList64() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::Struct64>>::disown(
      _builder, 5 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasListP() const {
  return !_reader.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasListP() {
  return !_builder.isPointerFieldNull(6 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Reader TestLists::Reader::getListP() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::get(
      _reader, 6 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Builder TestLists::Builder::getListP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::get(
      _builder, 6 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setListP( ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::set(
      _builder, 6 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>::Builder TestLists::Builder::initListP(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::init(
      _builder, 6 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptListP(
    ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::adopt(
      _builder, 6 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>> TestLists::Builder::disownListP() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnproto_test::capnp::test::TestLists::StructP>>::disown(
      _builder, 6 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasInt32ListList() const {
  return !_reader.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasInt32ListList() {
  return !_builder.isPointerFieldNull(7 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader TestLists::Reader::getInt32ListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _reader, 7 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder TestLists::Builder::getInt32ListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _builder, 7 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setInt32ListList( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline void TestLists::Builder::setInt32ListList(std::initializer_list< ::capnp::List< ::int32_t>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder, 7 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder TestLists::Builder::initInt32ListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::init(
      _builder, 7 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptInt32ListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::adopt(
      _builder, 7 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> TestLists::Builder::disownInt32ListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::disown(
      _builder, 7 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasTextListList() const {
  return !_reader.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasTextListList() {
  return !_builder.isPointerFieldNull(8 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader TestLists::Reader::getTextListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::get(
      _reader, 8 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder TestLists::Builder::getTextListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::get(
      _builder, 8 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setTextListList( ::capnp::List< ::capnp::List< ::capnp::Text>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline void TestLists::Builder::setTextListList(std::initializer_list< ::capnp::List< ::capnp::Text>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::set(
      _builder, 8 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::List< ::capnp::Text>>::Builder TestLists::Builder::initTextListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::init(
      _builder, 8 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptTextListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::adopt(
      _builder, 8 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnp::Text>>> TestLists::Builder::disownTextListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnp::Text>>>::disown(
      _builder, 8 * ::capnp::POINTERS);
}

inline bool TestLists::Reader::hasStructListList() const {
  return !_reader.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline bool TestLists::Builder::hasStructListList() {
  return !_builder.isPointerFieldNull(9 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Reader TestLists::Reader::getStructListList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::get(
      _reader, 9 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Builder TestLists::Builder::getStructListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::get(
      _builder, 9 * ::capnp::POINTERS);
}
inline void TestLists::Builder::setStructListList( ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline void TestLists::Builder::setStructListList(std::initializer_list< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::set(
      _builder, 9 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>::Builder TestLists::Builder::initStructListList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::init(
      _builder, 9 * ::capnp::POINTERS, size);
}
inline void TestLists::Builder::adoptStructListList(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::adopt(
      _builder, 9 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>> TestLists::Builder::disownStructListList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::capnproto_test::capnp::test::TestAllTypes>>>::disown(
      _builder, 9 * ::capnp::POINTERS);
}

inline bool TestLists::Struct0::Reader::hasF() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct0::Builder::hasF() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestLists::Struct0::Reader::getF() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestLists::Struct0::Builder::getF() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct0::Builder::setF( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct1::Reader::hasF() const {
  return _reader.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1::Builder::hasF() {
  return _builder.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}
inline bool TestLists::Struct1::Reader::getF() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1::Builder::getF() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct1::Builder::setF(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct8::Reader::hasF() const {
  return _reader.hasDataField< ::uint8_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct8::Builder::hasF() {
  return _builder.hasDataField< ::uint8_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestLists::Struct8::Reader::getF() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestLists::Struct8::Builder::getF() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct8::Builder::setF( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct16::Reader::hasF() const {
  return _reader.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct16::Builder::hasF() {
  return _builder.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestLists::Struct16::Reader::getF() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestLists::Struct16::Builder::getF() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct16::Builder::setF( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct32::Reader::hasF() const {
  return _reader.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct32::Builder::hasF() {
  return _builder.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestLists::Struct32::Reader::getF() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestLists::Struct32::Builder::getF() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct32::Builder::setF( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct64::Reader::hasF() const {
  return _reader.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct64::Builder::hasF() {
  return _builder.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestLists::Struct64::Reader::getF() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::Struct64::Builder::getF() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct64::Builder::setF( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::StructP::Reader::hasF() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::StructP::Builder::hasF() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::StructP::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::StructP::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::StructP::Builder::setF( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::StructP::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::StructP::Builder::adoptF(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::StructP::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct0c::Reader::hasF() const {
  return _reader.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct0c::Builder::hasF() {
  return _builder.hasDataField< ::capnp::Void>(0 * ::capnp::ELEMENTS);
}
inline  ::capnp::Void TestLists::Struct0c::Reader::getF() const {
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestLists::Struct0c::Builder::getF() {
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct0c::Builder::setF( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct0c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct0c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct0c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct0c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct0c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct0c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct0c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct0c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct1c::Reader::hasF() const {
  return _reader.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1c::Builder::hasF() {
  return _builder.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}
inline bool TestLists::Struct1c::Reader::getF() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct1c::Builder::getF() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct1c::Builder::setF(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct1c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct1c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct1c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct1c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct1c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct1c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct1c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct1c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct8c::Reader::hasF() const {
  return _reader.hasDataField< ::uint8_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct8c::Builder::hasF() {
  return _builder.hasDataField< ::uint8_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestLists::Struct8c::Reader::getF() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestLists::Struct8c::Builder::getF() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct8c::Builder::setF( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct8c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct8c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct8c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct8c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct8c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct8c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct8c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct8c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct16c::Reader::hasF() const {
  return _reader.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct16c::Builder::hasF() {
  return _builder.hasDataField< ::uint16_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint16_t TestLists::Struct16c::Reader::getF() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestLists::Struct16c::Builder::getF() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct16c::Builder::setF( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct16c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct16c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct16c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct16c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct16c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct16c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct16c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct16c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct32c::Reader::hasF() const {
  return _reader.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct32c::Builder::hasF() {
  return _builder.hasDataField< ::uint32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint32_t TestLists::Struct32c::Reader::getF() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestLists::Struct32c::Builder::getF() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct32c::Builder::setF( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct32c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct32c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct32c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct32c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct32c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct32c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct32c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct32c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::Struct64c::Reader::hasF() const {
  return _reader.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::Struct64c::Builder::hasF() {
  return _builder.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestLists::Struct64c::Reader::getF() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::Struct64c::Builder::getF() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::Struct64c::Builder::setF( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLists::Struct64c::Reader::hasPad() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::Struct64c::Builder::hasPad() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::Struct64c::Reader::getPad() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::Struct64c::Builder::getPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::Struct64c::Builder::setPad( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::Struct64c::Builder::initPad(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::Struct64c::Builder::adoptPad(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::Struct64c::Builder::disownPad() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::StructPc::Reader::hasF() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLists::StructPc::Builder::hasF() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLists::StructPc::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLists::StructPc::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLists::StructPc::Builder::setF( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLists::StructPc::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLists::StructPc::Builder::adoptF(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLists::StructPc::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLists::StructPc::Reader::hasPad() const {
  return _reader.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLists::StructPc::Builder::hasPad() {
  return _builder.hasDataField< ::uint64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::uint64_t TestLists::StructPc::Reader::getPad() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestLists::StructPc::Builder::getPad() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLists::StructPc::Builder::setPad( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestFieldZeroIsBit::Reader::hasBit() const {
  return _reader.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}

inline bool TestFieldZeroIsBit::Builder::hasBit() {
  return _builder.hasDataField<bool>(0 * ::capnp::ELEMENTS);
}
inline bool TestFieldZeroIsBit::Reader::getBit() const {
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool TestFieldZeroIsBit::Builder::getBit() {
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void TestFieldZeroIsBit::Builder::setBit(bool value) {
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestFieldZeroIsBit::Reader::hasSecondBit() const {
  return _reader.hasDataField<bool>(1 * ::capnp::ELEMENTS);
}

inline bool TestFieldZeroIsBit::Builder::hasSecondBit() {
  return _builder.hasDataField<bool>(1 * ::capnp::ELEMENTS);
}
inline bool TestFieldZeroIsBit::Reader::getSecondBit() const {
  return _reader.getDataField<bool>(
      1 * ::capnp::ELEMENTS, true);
}

inline bool TestFieldZeroIsBit::Builder::getSecondBit() {
  return _builder.getDataField<bool>(
      1 * ::capnp::ELEMENTS, true);
}
inline void TestFieldZeroIsBit::Builder::setSecondBit(bool value) {
  _builder.setDataField<bool>(
      1 * ::capnp::ELEMENTS, value, true);
}

inline bool TestFieldZeroIsBit::Reader::hasThirdField() const {
  return _reader.hasDataField< ::uint8_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestFieldZeroIsBit::Builder::hasThirdField() {
  return _builder.hasDataField< ::uint8_t>(1 * ::capnp::ELEMENTS);
}
inline  ::uint8_t TestFieldZeroIsBit::Reader::getThirdField() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, 123u);
}

inline  ::uint8_t TestFieldZeroIsBit::Builder::getThirdField() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, 123u);
}
inline void TestFieldZeroIsBit::Builder::setThirdField( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value, 123u);
}

inline bool TestListDefaults::Reader::hasLists() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestListDefaults::Builder::hasLists() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestLists::Reader TestListDefaults::Reader::getLists() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::get(
      _reader, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_a851ad32cbc2ffea.encodedNode + 30);
}
inline  ::capnproto_test::capnp::test::TestLists::Builder TestListDefaults::Builder::getLists() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::get(
      _builder, 0 * ::capnp::POINTERS,
        ::capnp::schemas::s_a851ad32cbc2ffea.encodedNode + 30);
}
inline void TestListDefaults::Builder::setLists( ::capnproto_test::capnp::test::TestLists::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestLists::Builder TestListDefaults::Builder::initLists() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestListDefaults::Builder::adoptLists(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestLists>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestLists> TestListDefaults::Builder::disownLists() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestLists>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLateUnion::Reader::hasFoo() const {
  return _reader.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::Builder::hasFoo() {
  return _builder.hasDataField< ::int32_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int32_t TestLateUnion::Reader::getFoo() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TestLateUnion::Builder::getFoo() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestLateUnion::Builder::setFoo( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestLateUnion::Reader::hasBar() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestLateUnion::Builder::hasBar() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLateUnion::Reader::getBar() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLateUnion::Builder::getBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestLateUnion::Builder::setBar( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLateUnion::Builder::initBar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestLateUnion::Builder::adoptBar(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLateUnion::Builder::disownBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestLateUnion::Reader::hasBaz() const {
  return _reader.hasDataField< ::int16_t>(2 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::Builder::hasBaz() {
  return _builder.hasDataField< ::int16_t>(2 * ::capnp::ELEMENTS);
}
inline  ::int16_t TestLateUnion::Reader::getBaz() const {
  return _reader.getDataField< ::int16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int16_t TestLateUnion::Builder::getBaz() {
  return _builder.getDataField< ::int16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TestLateUnion::Builder::setBaz( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool TestLateUnion::Reader::hasTheUnion() const {
  return _reader.getDataField< ::uint16_t>(3 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint32_t>(2 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestLateUnion::Builder::hasTheUnion() {
  return _builder.getDataField< ::uint16_t>(3 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint32_t>(2 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline TestLateUnion::TheUnion::Reader TestLateUnion::Reader::getTheUnion() const {
  return TestLateUnion::TheUnion::Reader(_reader);
}
inline TestLateUnion::TheUnion::Builder TestLateUnion::Builder::getTheUnion() {
  return TestLateUnion::TheUnion::Builder(_builder);
}
inline TestLateUnion::TheUnion::Builder TestLateUnion::Builder::initTheUnion() {
  _builder.setDataField< ::uint16_t>(3 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(1 * ::capnp::POINTERS);
  return TestLateUnion::TheUnion::Builder(_builder);
}
inline bool TestLateUnion::Reader::hasAnotherUnion() const {
  return _reader.getDataField< ::uint16_t>(6 * ::capnp::ELEMENTS) != 0
      || _reader.getDataField< ::uint32_t>(4 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestLateUnion::Builder::hasAnotherUnion() {
  return _builder.getDataField< ::uint16_t>(6 * ::capnp::ELEMENTS) != 0
      || _builder.getDataField< ::uint32_t>(4 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline TestLateUnion::AnotherUnion::Reader TestLateUnion::Reader::getAnotherUnion() const {
  return TestLateUnion::AnotherUnion::Reader(_reader);
}
inline TestLateUnion::AnotherUnion::Builder TestLateUnion::Builder::getAnotherUnion() {
  return TestLateUnion::AnotherUnion::Builder(_builder);
}
inline TestLateUnion::AnotherUnion::Builder TestLateUnion::Builder::initAnotherUnion() {
  _builder.setDataField< ::uint16_t>(6 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(4 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(2 * ::capnp::POINTERS);
  return TestLateUnion::AnotherUnion::Builder(_builder);
}
inline TestLateUnion::TheUnion::Which TestLateUnion::TheUnion::Reader::which() const {
  return _reader.getDataField<Which>(3 * ::capnp::ELEMENTS);
}
inline TestLateUnion::TheUnion::Which TestLateUnion::TheUnion::Builder::which() {
  return _builder.getDataField<Which>(3 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::TheUnion::Reader::isQux() const {
  return which() == TestLateUnion::TheUnion::QUX;
}
inline bool TestLateUnion::TheUnion::Builder::isQux() {
  return which() == TestLateUnion::TheUnion::QUX;
}
inline bool TestLateUnion::TheUnion::Reader::hasQux() const {
  if (which() != TestLateUnion::TheUnion::QUX) return false;
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestLateUnion::TheUnion::Builder::hasQux() {
  if (which() != TestLateUnion::TheUnion::QUX) return false;
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLateUnion::TheUnion::Reader::getQux() const {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLateUnion::TheUnion::Builder::getQux() {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestLateUnion::TheUnion::Builder::setQux( ::capnp::Text::Reader value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::QUX);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLateUnion::TheUnion::Builder::initQux(unsigned int size) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::QUX);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestLateUnion::TheUnion::Builder::adoptQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::QUX);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLateUnion::TheUnion::Builder::disownQux() {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestLateUnion::TheUnion::Reader::isCorge() const {
  return which() == TestLateUnion::TheUnion::CORGE;
}
inline bool TestLateUnion::TheUnion::Builder::isCorge() {
  return which() == TestLateUnion::TheUnion::CORGE;
}
inline bool TestLateUnion::TheUnion::Reader::hasCorge() const {
  if (which() != TestLateUnion::TheUnion::CORGE) return false;
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestLateUnion::TheUnion::Builder::hasCorge() {
  if (which() != TestLateUnion::TheUnion::CORGE) return false;
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Reader TestLateUnion::TheUnion::Reader::getCorge() const {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Builder TestLateUnion::TheUnion::Builder::getCorge() {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestLateUnion::TheUnion::Builder::setCorge( ::capnp::List< ::int32_t>::Reader value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline void TestLateUnion::TheUnion::Builder::setCorge(std::initializer_list< ::int32_t> value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int32_t>::Builder TestLateUnion::TheUnion::Builder::initCorge(unsigned int size) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::CORGE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder, 1 * ::capnp::POINTERS, size);
}
inline void TestLateUnion::TheUnion::Builder::adoptCorge(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestLateUnion::TheUnion::Builder::disownCorge() {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestLateUnion::TheUnion::Reader::isGrault() const {
  return which() == TestLateUnion::TheUnion::GRAULT;
}
inline bool TestLateUnion::TheUnion::Builder::isGrault() {
  return which() == TestLateUnion::TheUnion::GRAULT;
}
inline bool TestLateUnion::TheUnion::Reader::hasGrault() const {
  if (which() != TestLateUnion::TheUnion::GRAULT) return false;
  return _reader.hasDataField<float>(2 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::TheUnion::Builder::hasGrault() {
  if (which() != TestLateUnion::TheUnion::GRAULT) return false;
  return _builder.hasDataField<float>(2 * ::capnp::ELEMENTS);
}
inline float TestLateUnion::TheUnion::Reader::getGrault() const {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::GRAULT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float TestLateUnion::TheUnion::Builder::getGrault() {
  KJ_IREQUIRE(which() == TestLateUnion::TheUnion::GRAULT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void TestLateUnion::TheUnion::Builder::setGrault(float value) {
  _builder.setDataField<TestLateUnion::TheUnion::Which>(
      3 * ::capnp::ELEMENTS, TestLateUnion::TheUnion::GRAULT);
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline TestLateUnion::AnotherUnion::Which TestLateUnion::AnotherUnion::Reader::which() const {
  return _reader.getDataField<Which>(6 * ::capnp::ELEMENTS);
}
inline TestLateUnion::AnotherUnion::Which TestLateUnion::AnotherUnion::Builder::which() {
  return _builder.getDataField<Which>(6 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::AnotherUnion::Reader::isQux() const {
  return which() == TestLateUnion::AnotherUnion::QUX;
}
inline bool TestLateUnion::AnotherUnion::Builder::isQux() {
  return which() == TestLateUnion::AnotherUnion::QUX;
}
inline bool TestLateUnion::AnotherUnion::Reader::hasQux() const {
  if (which() != TestLateUnion::AnotherUnion::QUX) return false;
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestLateUnion::AnotherUnion::Builder::hasQux() {
  if (which() != TestLateUnion::AnotherUnion::QUX) return false;
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestLateUnion::AnotherUnion::Reader::getQux() const {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestLateUnion::AnotherUnion::Builder::getQux() {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestLateUnion::AnotherUnion::Builder::setQux( ::capnp::Text::Reader value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::QUX);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestLateUnion::AnotherUnion::Builder::initQux(unsigned int size) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::QUX);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestLateUnion::AnotherUnion::Builder::adoptQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::QUX);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestLateUnion::AnotherUnion::Builder::disownQux() {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::QUX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestLateUnion::AnotherUnion::Reader::isCorge() const {
  return which() == TestLateUnion::AnotherUnion::CORGE;
}
inline bool TestLateUnion::AnotherUnion::Builder::isCorge() {
  return which() == TestLateUnion::AnotherUnion::CORGE;
}
inline bool TestLateUnion::AnotherUnion::Reader::hasCorge() const {
  if (which() != TestLateUnion::AnotherUnion::CORGE) return false;
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestLateUnion::AnotherUnion::Builder::hasCorge() {
  if (which() != TestLateUnion::AnotherUnion::CORGE) return false;
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Reader TestLateUnion::AnotherUnion::Reader::getCorge() const {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader, 2 * ::capnp::POINTERS);
}
inline  ::capnp::List< ::int32_t>::Builder TestLateUnion::AnotherUnion::Builder::getCorge() {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder, 2 * ::capnp::POINTERS);
}
inline void TestLateUnion::AnotherUnion::Builder::setCorge( ::capnp::List< ::int32_t>::Reader value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline void TestLateUnion::AnotherUnion::Builder::setCorge(std::initializer_list< ::int32_t> value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::List< ::int32_t>::Builder TestLateUnion::AnotherUnion::Builder::initCorge(unsigned int size) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::CORGE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestLateUnion::AnotherUnion::Builder::adoptCorge(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::CORGE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> TestLateUnion::AnotherUnion::Builder::disownCorge() {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::CORGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestLateUnion::AnotherUnion::Reader::isGrault() const {
  return which() == TestLateUnion::AnotherUnion::GRAULT;
}
inline bool TestLateUnion::AnotherUnion::Builder::isGrault() {
  return which() == TestLateUnion::AnotherUnion::GRAULT;
}
inline bool TestLateUnion::AnotherUnion::Reader::hasGrault() const {
  if (which() != TestLateUnion::AnotherUnion::GRAULT) return false;
  return _reader.hasDataField<float>(4 * ::capnp::ELEMENTS);
}

inline bool TestLateUnion::AnotherUnion::Builder::hasGrault() {
  if (which() != TestLateUnion::AnotherUnion::GRAULT) return false;
  return _builder.hasDataField<float>(4 * ::capnp::ELEMENTS);
}
inline float TestLateUnion::AnotherUnion::Reader::getGrault() const {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::GRAULT,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float TestLateUnion::AnotherUnion::Builder::getGrault() {
  KJ_IREQUIRE(which() == TestLateUnion::AnotherUnion::GRAULT,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void TestLateUnion::AnotherUnion::Builder::setGrault(float value) {
  _builder.setDataField<TestLateUnion::AnotherUnion::Which>(
      6 * ::capnp::ELEMENTS, TestLateUnion::AnotherUnion::GRAULT);
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool TestOldVersion::Reader::hasOld1() const {
  return _reader.hasDataField< ::int64_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestOldVersion::Builder::hasOld1() {
  return _builder.hasDataField< ::int64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestOldVersion::Reader::getOld1() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestOldVersion::Builder::getOld1() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestOldVersion::Builder::setOld1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestOldVersion::Reader::hasOld2() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestOldVersion::Builder::hasOld2() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestOldVersion::Reader::getOld2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestOldVersion::Builder::getOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestOldVersion::Builder::setOld2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestOldVersion::Builder::initOld2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestOldVersion::Builder::adoptOld2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestOldVersion::Builder::disownOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestOldVersion::Reader::hasOld3() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestOldVersion::Builder::hasOld3() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestOldVersion::Reader TestOldVersion::Reader::getOld3() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestOldVersion::Builder TestOldVersion::Builder::getOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestOldVersion::Builder::setOld3( ::capnproto_test::capnp::test::TestOldVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestOldVersion::Builder TestOldVersion::Builder::initOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestOldVersion::Builder::adoptOld3(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestOldVersion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestOldVersion> TestOldVersion::Builder::disownOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestOldVersion>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestNewVersion::Reader::hasOld1() const {
  return _reader.hasDataField< ::int64_t>(0 * ::capnp::ELEMENTS);
}

inline bool TestNewVersion::Builder::hasOld1() {
  return _builder.hasDataField< ::int64_t>(0 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestNewVersion::Reader::getOld1() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t TestNewVersion::Builder::getOld1() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TestNewVersion::Builder::setOld1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool TestNewVersion::Reader::hasOld2() const {
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestNewVersion::Builder::hasOld2() {
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestNewVersion::Reader::getOld2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::getOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestNewVersion::Builder::setOld2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::initOld2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 0 * ::capnp::POINTERS, size);
}
inline void TestNewVersion::Builder::adoptOld2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestNewVersion::Builder::disownOld2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestNewVersion::Reader::hasOld3() const {
  return !_reader.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline bool TestNewVersion::Builder::hasOld3() {
  return !_builder.isPointerFieldNull(1 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestNewVersion::Reader TestNewVersion::Reader::getOld3() const {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::get(
      _reader, 1 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestNewVersion::Builder TestNewVersion::Builder::getOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::get(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestNewVersion::Builder::setOld3( ::capnproto_test::capnp::test::TestNewVersion::Reader value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::set(
      _builder, 1 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestNewVersion::Builder TestNewVersion::Builder::initOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::init(
      _builder, 1 * ::capnp::POINTERS);
}
inline void TestNewVersion::Builder::adoptOld3(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestNewVersion>&& value) {
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::adopt(
      _builder, 1 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestNewVersion> TestNewVersion::Builder::disownOld3() {
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestNewVersion>::disown(
      _builder, 1 * ::capnp::POINTERS);
}

inline bool TestNewVersion::Reader::hasNew1() const {
  return _reader.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}

inline bool TestNewVersion::Builder::hasNew1() {
  return _builder.hasDataField< ::int64_t>(1 * ::capnp::ELEMENTS);
}
inline  ::int64_t TestNewVersion::Reader::getNew1() const {
  return _reader.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, 987ll);
}

inline  ::int64_t TestNewVersion::Builder::getNew1() {
  return _builder.getDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, 987ll);
}
inline void TestNewVersion::Builder::setNew1( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      1 * ::capnp::ELEMENTS, value, 987ll);
}

inline bool TestNewVersion::Reader::hasNew2() const {
  return !_reader.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline bool TestNewVersion::Builder::hasNew2() {
  return !_builder.isPointerFieldNull(2 * ::capnp::POINTERS);
}
inline  ::capnp::Text::Reader TestNewVersion::Reader::getNew2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_8ed75a7469f04ce3.encodedNode + 87, 3);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::getNew2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder, 2 * ::capnp::POINTERS,
        ::capnp::schemas::s_8ed75a7469f04ce3.encodedNode + 87, 3);
}
inline void TestNewVersion::Builder::setNew2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder, 2 * ::capnp::POINTERS, value);
}
inline  ::capnp::Text::Builder TestNewVersion::Builder::initNew2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder, 2 * ::capnp::POINTERS, size);
}
inline void TestNewVersion::Builder::adoptNew2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder, 2 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestNewVersion::Builder::disownNew2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder, 2 * ::capnp::POINTERS);
}

inline bool TestStructUnion::Reader::hasUn() const {
  return _reader.getDataField< ::uint16_t>(0 * ::capnp::ELEMENTS) != 0
      || !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestStructUnion::Builder::hasUn() {
  return _builder.getDataField< ::uint16_t>(0 * ::capnp::ELEMENTS) != 0
      || !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline TestStructUnion::Un::Reader TestStructUnion::Reader::getUn() const {
  return TestStructUnion::Un::Reader(_reader);
}
inline TestStructUnion::Un::Builder TestStructUnion::Builder::getUn() {
  return TestStructUnion::Un::Builder(_builder);
}
inline TestStructUnion::Un::Builder TestStructUnion::Builder::initUn() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.clearPointer(0 * ::capnp::POINTERS);
  return TestStructUnion::Un::Builder(_builder);
}
inline TestStructUnion::Un::Which TestStructUnion::Un::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline TestStructUnion::Un::Which TestStructUnion::Un::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool TestStructUnion::Un::Reader::isAllTypes() const {
  return which() == TestStructUnion::Un::ALL_TYPES;
}
inline bool TestStructUnion::Un::Builder::isAllTypes() {
  return which() == TestStructUnion::Un::ALL_TYPES;
}
inline bool TestStructUnion::Un::Reader::hasAllTypes() const {
  if (which() != TestStructUnion::Un::ALL_TYPES) return false;
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestStructUnion::Un::Builder::hasAllTypes() {
  if (which() != TestStructUnion::Un::ALL_TYPES) return false;
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Reader TestStructUnion::Un::Reader::getAllTypes() const {
  KJ_IREQUIRE(which() == TestStructUnion::Un::ALL_TYPES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestStructUnion::Un::Builder::getAllTypes() {
  KJ_IREQUIRE(which() == TestStructUnion::Un::ALL_TYPES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestStructUnion::Un::Builder::setAllTypes( ::capnproto_test::capnp::test::TestAllTypes::Reader value) {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::ALL_TYPES);
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestAllTypes::Builder TestStructUnion::Un::Builder::initAllTypes() {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::ALL_TYPES);
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestStructUnion::Un::Builder::adoptAllTypes(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes>&& value) {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::ALL_TYPES);
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestAllTypes> TestStructUnion::Un::Builder::disownAllTypes() {
  KJ_IREQUIRE(which() == TestStructUnion::Un::ALL_TYPES,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestAllTypes>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

inline bool TestStructUnion::Un::Reader::isObject() const {
  return which() == TestStructUnion::Un::OBJECT;
}
inline bool TestStructUnion::Un::Builder::isObject() {
  return which() == TestStructUnion::Un::OBJECT;
}
inline bool TestStructUnion::Un::Reader::hasObject() const {
  if (which() != TestStructUnion::Un::OBJECT) return false;
  return !_reader.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline bool TestStructUnion::Un::Builder::hasObject() {
  if (which() != TestStructUnion::Un::OBJECT) return false;
  return !_builder.isPointerFieldNull(0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestObject::Reader TestStructUnion::Un::Reader::getObject() const {
  KJ_IREQUIRE(which() == TestStructUnion::Un::OBJECT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::get(
      _reader, 0 * ::capnp::POINTERS);
}
inline  ::capnproto_test::capnp::test::TestObject::Builder TestStructUnion::Un::Builder::getObject() {
  KJ_IREQUIRE(which() == TestStructUnion::Un::OBJECT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::get(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestStructUnion::Un::Builder::setObject( ::capnproto_test::capnp::test::TestObject::Reader value) {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::OBJECT);
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::set(
      _builder, 0 * ::capnp::POINTERS, value);
}
inline  ::capnproto_test::capnp::test::TestObject::Builder TestStructUnion::Un::Builder::initObject() {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::OBJECT);
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::init(
      _builder, 0 * ::capnp::POINTERS);
}
inline void TestStructUnion::Un::Builder::adoptObject(
    ::capnp::Orphan< ::capnproto_test::capnp::test::TestObject>&& value) {
  _builder.setDataField<TestStructUnion::Un::Which>(
      0 * ::capnp::ELEMENTS, TestStructUnion::Un::OBJECT);
  ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::adopt(
      _builder, 0 * ::capnp::POINTERS, kj::mv(value));
}
inline ::capnp::Orphan< ::capnproto_test::capnp::test::TestObject> TestStructUnion::Un::Builder::disownObject() {
  KJ_IREQUIRE(which() == TestStructUnion::Un::OBJECT,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnproto_test::capnp::test::TestObject>::disown(
      _builder, 0 * ::capnp::POINTERS);
}

}  // namespace
}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_d508eebdc2dc42b8_
